{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-material-master/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/material-icons.css","path":"css/material-icons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify.css","path":"css/prettify.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify.min.css","path":"css/prettify.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/lsloader.js","path":"js/lsloader.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/prettify.min.js","path":"js/prettify.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/queue.min.js","path":"js/queue.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-segmentfault.svg","path":"img/footer/footer_ico-segmentfault.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-master/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_drafts/firstBlood.md","hash":"a3ca077241bc36f956ebeaab76e6fa03f967d7de","modified":1620522787671},{"_id":"source/_posts/JAVA并发编程基础.md","hash":"879640c74424136f7e3b1e2599078ac4aff65821","modified":1620551185911},{"_id":"source/_posts/mysql笔记.md","hash":"fe72ceca27819c4fc6b76ae6d151a7c934aad6c5","modified":1620535605157},{"_id":"source/_posts/爬虫入门笔记.md","hash":"96523aa4ff3e239ec2b2339c1669ac116207f0d5","modified":1620551096525},{"_id":"source/_posts/多线程.md","hash":"1c784ae534db9ffd2b69d2d3710ae8331f6e9ce8","modified":1620550943618},{"_id":"source/_posts/redis基础.md","hash":"31055b00526dc7fe3560c9c5267b912ce4cbfc31","modified":1620551264477},{"_id":"source/.DS_Store","hash":"c56e8553a1664adb7d6acca14fe919e415cea46b","modified":1620550835421},{"_id":"source/_posts/.DS_Store","hash":"77be29600f8f661b9519669508a4e5baae6b1458","modified":1620551426734},{"_id":"themes/hexo-theme-material-master/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/.DS_Store","hash":"2586db3bcad3f4110675f856e9ee323714f7faea","modified":1620536582774},{"_id":"themes/hexo-theme-material-master/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/.gitignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/_config.template.yml","hash":"5aac3cf295f6d5a3e0e68f4a503f540970446d1c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/_config.yml","hash":"0264a531986d76b3242ddd67d94ebfb60c0e1b9d","modified":1620535077810},{"_id":"themes/hexo-theme-material-master/package.json","hash":"35274ddcf345997103e83f33a80fc036c74e4ee5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/README.md","hash":"1e266d743acd105f47acce21445395cf304c976e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/ko.yml","hash":"97526bf1fe67dc3fe50b20a64f94bac0d3dba673","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/index.ejs","hash":"a2b586b5bacd595360ddf29c11ef0a2998a01935","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/layout.ejs","hash":"ea811e2dc752e131a18dd999f2f1f4addb4b48bb","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/config_font.ejs","hash":"f1439e7c22378c45ebfd9c04101e7511153699a3","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/footer-left.ejs","hash":"65c1ee9c6faef3d630564cabdb3278c94602b3d7","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/footer.ejs","hash":"e9633d1112d8369251b6c82f9c44b4231b813df9","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/head.ejs","hash":"6cb3de048e08ece3d280d36c4e06766aa6266eb1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/import_js.ejs","hash":"1638830cae8039c1979f3ae6783de9061380b9a5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/dnsprefetch.ejs","hash":"a6950132a5b3c073c9679645b93413a5ac7adb51","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/page-gallery.ejs","hash":"6331adcfad97d49e1820e42dc12a6f402c8b9c81","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/avatar.png","hash":"8486b99a44513139e86fe6366ad85bd60892c359","modified":1620534899790},{"_id":"themes/hexo-theme-material-master/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-segmentfault.svg","hash":"f6c667cff0c57095ce01b7adb4f18b3c92dc060b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/gitment/enter.ejs","hash":"d0307598380be2ce0126cadd451a4a907184e488","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/valine/main.ejs","hash":"04c41da0bf670272d440df61791e63e664f9b689","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/wildfire/common.ejs","hash":"c43dabb52245d1d39e20882a42e0cd30d0abfe76","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/wildfire/enter.ejs","hash":"492927e61fa1dda0dcc97f0bb74bad533ca9f7ec","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/layout/_widget/comment/wildfire/main.ejs","hash":"cd6a1e3f71f552c2412f6dbe41c08042625180e6","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/style.css","hash":"a499a32b44c86c63e1d848ea6a0b4f3d89f52e73","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/css/style.min.css","hash":"feec7397cdef3776701505bc2afe6df3291ece5a","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/js.min.js","hash":"ad613dad94f0e82e5c4ed179de43de2ac709143c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/js/js.js","hash":"d919314cdfe92664462d67738ff9f4aaad0afb8c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1618988654000},{"_id":"themes/hexo-theme-material-master/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1618988654000},{"_id":"public/search.xml","hash":"861d0581f828c46d51b88400bbf1e1ea214c236f","modified":1620551577531},{"_id":"public/2021/05/09/redis基础/index.html","hash":"730aa8f7512194447436689cce776cab0d45e420","modified":1620551577531},{"_id":"public/2021/05/09/JAVA并发编程基础/index.html","hash":"ef8c646885931c39769c27d8c7b20c07d43fbc5b","modified":1620551577531},{"_id":"public/2021/05/09/多线程/index.html","hash":"35317f4c9b49d729f2f1a25f2208b6a9eba9bd62","modified":1620551577531},{"_id":"public/2021/05/09/mysql笔记/index.html","hash":"e2382f668bae492ab5a8565fa1d3b672a5ea63e7","modified":1620551577531},{"_id":"public/archives/index.html","hash":"b1a89a2f4800b57db9ffa48fe34b493fda550e7d","modified":1620551577531},{"_id":"public/archives/2021/index.html","hash":"fcb8f4e2c3280e609ed31ca52b8b8b3599aae6ea","modified":1620551577531},{"_id":"public/archives/2021/05/index.html","hash":"6727b88af971f687d9322a80d31f3b268b72655a","modified":1620551577531},{"_id":"public/2021/05/09/爬虫入门笔记/index.html","hash":"0953775be207f9b9962b76f19c39bb61162d8e33","modified":1620551577531},{"_id":"public/categories/JUC/index.html","hash":"cb7cd197809ba61320ced7b233b80a7411accdf6","modified":1620551577531},{"_id":"public/categories/mysql/index.html","hash":"6211472d3687adfd2d3ed131cd2da85118ed3201","modified":1620551577531},{"_id":"public/categories/redis/index.html","hash":"ddee3106765711f0f74da16d154b774155be4360","modified":1620551577531},{"_id":"public/categories/爬虫/index.html","hash":"1198b90a6f4610cbc6082d0413d32d1e2c16b918","modified":1620551577531},{"_id":"public/index.html","hash":"5af7c8a3efa4ba480034edbc43651892c766dbc8","modified":1620551577531},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1620551577531},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1620551577531},{"_id":"public/img/avatar.png","hash":"8486b99a44513139e86fe6366ad85bd60892c359","modified":1620551577531},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1620551577531},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1620551577531},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1620551577531},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1620551577531},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1620551577531},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1620551577531},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1620551577531},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1620551577531},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1620551577531},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1620551577531},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1620551577531},{"_id":"public/img/footer/footer_ico-segmentfault.svg","hash":"f6c667cff0c57095ce01b7adb4f18b3c92dc060b","modified":1620551577531},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1620551577531},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1620551577531},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1620551577531},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1620551577531},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1620551577531},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1620551577531},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1620551577531},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1620551577531},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1620551577531},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1620551577531},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1620551577531},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1620551577531},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1620551577531},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1620551577531},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1620551577531},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1620551577531},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1620551577531},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1620551577531},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1620551577531},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1620551577531},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1620551577531},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1620551577531},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1620551577531},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1620551577531},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1620551577531},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1620551577531},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1620551577531},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1620551577531},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1620551577531},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1620551577531},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1620551577531},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1620551577531},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1620551577531},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1620551577531},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1620551577531},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1620551577531},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1620551577531},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1620551577531},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1620551577531},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1620551577531},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1620551577531},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1620551577531},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1620551577531},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1620551577531},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1620551577531},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1620551577531},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1620551577531},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1620551577531},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1620551577531},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1620551577531},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1620551577531},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1620551577531},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1620551577531},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1620551577531},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1620551577531},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1620551577531},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1620551577531},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1620551577531},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1620551577531},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1620551577531},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1620551577531},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1620551577531},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1620551577531},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1620551577531},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1620551577531},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1620551577531},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1620551577531},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1620551577531},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1620551577531},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1620551577531},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1620551577531},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1620551577531},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1620551577531},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1620551577531},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1620551577531},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1620551577531},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1620551577531},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1620551577531},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1620551577531},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1620551577531},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1620551577531},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1620551577531},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1620551577531},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1620551577531},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1620551577531},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1620551577531},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1620551577531},{"_id":"public/css/style.css","hash":"a499a32b44c86c63e1d848ea6a0b4f3d89f52e73","modified":1620551577531},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1620551577531},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1620551577531},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1620551577531},{"_id":"public/js/js.min.js","hash":"ad613dad94f0e82e5c4ed179de43de2ac709143c","modified":1620551577531},{"_id":"public/css/style.min.css","hash":"feec7397cdef3776701505bc2afe6df3291ece5a","modified":1620551577531},{"_id":"public/js/js.js","hash":"d919314cdfe92664462d67738ff9f4aaad0afb8c","modified":1620551577531},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1620551577531},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1620551577531},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1620551577531},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1620551577531},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1620551577531},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1620551577531},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1620551577531},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1620551577531},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1620551577531},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1620551577531},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1620551577531},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1620551577531},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1620551577531}],"Category":[{"name":"JUC","_id":"ckogykg390003k2702trvgojg"},{"name":"mysql","_id":"ckogykg3b0006k270ecly72ar"},{"name":"redis","_id":"ckogykg3b0008k27013lgftar"},{"name":"爬虫","_id":"ckogykg3h000dk270d6zl6r3m"}],"Data":[],"Page":[],"Post":[{"title":"firstBlood","_content":"\n\n","source":"_drafts/firstBlood.md","raw":"---\ntitle: firstBlood\ntags:\n---\n\n\n","slug":"firstBlood","published":0,"date":"2021-05-09T01:11:08.612Z","updated":"2021-05-09T01:13:07.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckogykg360000k2707sqlasd9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JAVA并发编程基础","date":"2021-05-09T09:05:53.000Z","_content":"\n#### Lock锁\n\n1.Synchronized 内置的java关键字，Lock是一个java类\n\n2.Synchronized无法判断获取锁的状态，Lock可以判断是否获取到了锁\n\n3.Synchronized会自动释放锁，lock必须要手动释放锁！如果不释放锁，死锁\n\n4.Synchronized 线程1（获得锁、阻塞）、线程2（等待、傻傻的等）；Lock锁就不一定会等待下去\n\n5.Synchronized 可重入锁，不可以中断的、非公平；Lock，可重入锁、可以判断锁、非公平（可以自己设置）\n\n6.Synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步代码\n\n\n\n\n\n\n\nCondition实现精准通知唤醒\n\n```java\n//A执行完调用B，B执行完调用C，C执行完调用A\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class C {\n\n    public static void main(String[] args) {\n        Data3 data = new Data3();\n\n        new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                data.printA();\n            }\n        }, \"A\").start();\n\n        new Thread(()->{\n            for (int i = 0; i < 10; i++) {\n                data.printB();\n            }\n        },\"B\").start();\n\n        new Thread(()->{\n            for (int i = 0; i < 10; i++) {\n                data.printC();\n            }\n        },\"C\").start();\n\n    }\n\n\n\n\n\n\n    static class Data3 {  //资源类Lock\n\n        private Lock lock = new ReentrantLock();\n        private Condition condition1 = lock.newCondition();\n        private Condition condition2 = lock.newCondition();\n        private Condition condition3 = lock.newCondition();\n        private int number = 1; //1A 2B 3C\n\n        public void printA() {\n            lock.lock();\n            try {\n                while (number != 1) {\n                    //等待\n                    condition1.await();\n                }\n                System.out.println(Thread.currentThread().getName() + \"=>AAAAAAA\");\n                //唤醒，唤醒指定的人，B\n                number = 2;\n                condition2.signal();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n\n        public void printB() {\n            lock.lock();\n            try {\n                while (number != 2) {\n                    //等待\n                    condition2.await();\n                }\n                System.out.println(Thread.currentThread().getName() + \"=>BBBBBBBB\");\n                //唤醒，唤醒指定的人，C\n                number = 3;\n                condition3.signal();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n\n          public void printC() {\n            lock.lock();\n            try {\n                while (number != 3) {\n                    //等待\n                    condition3.await();\n                }\n                System.out.println(Thread.currentThread().getName() + \"=>CCCCCCCCC\");\n                //唤醒，唤醒指定的人，A\n                number = 1;\n                condition1.signal();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n\n}\n```\n\n\n\n（List不安全）\n\nCopyOnWriteArrayList\n\n```java\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class ListTest {\n\n    public static void main(String[] args) {\n\n        //并发下ArrayList不安全\n        /*\n        解决方案：\n        1.List<String> list = new Vector<>();\n        2.List<String> list = Collections.synchronizedList(new ArrayList<>());\n        3.List<String> list = new CopyOnWriteArrayList<>();\n        */\n        \n        //CopyOnWrite 写入时复制 COW 计算机程序设计领域的一种优化策略;\n        //多个线程调用的时候，List，读取的时候，固定的，写入时可能会出现覆盖操作\n        //在写入的时候避免覆盖，造成数据问题\n\n        List<String> list=new CopyOnWriteArrayList<>();\n\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                list.add(UUID.randomUUID().toString().substring(0,5));\n                System.out.println(list);\n            },String.valueOf(i)).start();\n        }\n    }\n}\n```\n\n\n\nCopyOnWriteArraySet\n\n```java\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\npublic class SetTest {\n\n    public static void main(String[] args) {\n\n        Set<String> set =new HashSet<>();\n        //Set<String> set = Collections.synchronizedSet(new HashSet<>());\n        //Set<String> set = new CopyOnWriteArraySet<>();\n\n        for (int i = 1; i <= 30; i++) {\n            new Thread(()->{\n                set.add(UUID.randomUUID().toString().substring(0,5));\n                System.out.println(set);\n            },String.valueOf(i)).start();\n\n        }\n\n    }\n}\n```\n\n\n\nHashSet的底层是什么？\n\n```java\npublic HashSet(){\n\tmap = new HashMap<>();\n}\n\n// add set 本质就是 map key是无法重复的！\npublic boolean add(E e){\n\treturn map.put(e,PRESENT)==null;\n}\n \nprivate static final Object PRESENT = new Object(); //不变的值！\n```\n\n\n\nCallable接口\n\n```java\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.FutureTask;\n\npublic class CallableTest {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n\n        //new Thread().start();//怎么启动Callable\n\n        MyThread thread = new MyThread();\n        FutureTask futureTask = new FutureTask(thread); //适配类\n\n        new Thread(futureTask,\"A\").start();\n\n        Integer o = (Integer) futureTask.get();//获取Callable的返回结果\n\n    }\n\n}\n\nclass MyThread implements Callable<Integer>{\n\n    @Override\n    public Integer call(){\n        System.out.println(\"call()\");\n        return 1024;\n    }\n}\n```\n\n\n\n\n\n\n\n\n\nCountDownLatch\n\n\n\n```java\nimport java.util.concurrent.CountDownLatch;\n\npublic class CountDownLatchDemo {\n    public static void main(String[] args) throws InterruptedException {\n        //总数是6\n\n        CountDownLatch countDownLatch = new CountDownLatch(6);\n\n        for (int i = 1; i <= 6; i++) {\n            new Thread(()->{\n                System.out.println(Thread.currentThread().getName()+\"go out\");\n                countDownLatch.countDown(); //数量-1\n            },String.valueOf(i)).start();\n        }\n\n        countDownLatch.await(); //等待计数器归零，然后再向下执行\n\n        System.out.println(\"关门\");\n\n    }\n\n}\n```\n\n​    \n\nCyclicBarrier\n\n```java \nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\n\npublic class CyclicBarrierDemo {\n\n    public static void main(String[] args) {\n\n\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -> {\n            System.out.println(\"召唤神龙成功\");\n        });\n\n        for (int i = 1; i <= 7; i++) {\n            final int temp=i;\n\n            int finalI = i;\n            new Thread(()->{\n                System.out.println(Thread.currentThread().getName()+\"收集了\"+ finalI +\"个龙珠\");\n                try {\n                    cyclicBarrier.await(); //等待\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } catch (BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n        }\n    }\n}\n```\n\n\n\n\n\n\n\nSemaphore\n\n```java\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\n\npublic class SemaphoreDemo {\n\n    public static void main(String[] args) {\n        //线程数量：停车位(有三个停车位)\n        Semaphore semaphore = new Semaphore(3);\n\n        for (int i = 1; i <= 6; i++) {\n            new Thread(()->{\n                //acquire()得到\n\n                try {\n                    semaphore.acquire();\n                    System.out.println(Thread.currentThread().getName()+\"抢到车位\");\n                    TimeUnit.SECONDS.sleep(2);\n                    System.out.println(Thread.currentThread().getName()+\"离开车位\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } finally {\n                    semaphore.release();//释放\n                }\n\n\n            },String.valueOf(i)).start();\n        }\n\n\n    }\n\n}\n```\n\n\n\n\n\nReadWriteLock\n\n```java\nimport java.util.HashMap;import java.util.Map;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantLock;import java.util.concurrent.locks.ReentrantReadWriteLock;//独占锁（写锁） 一次只能被一个线程占用//共享锁（读锁） 多个线程可以同时占用public class ReadWriteLockDemo{    public static void main(String[] args) {        MyCacheLock myCache = new MyCacheLock();        //写入        for (int i = 1; i <= 5; i++) {            final int temp = i;            new Thread(()->{                myCache.put(temp+\"\",temp+\"\");            },String.valueOf(i)).start();        }        //读取        for (int i = 1; i <= 5; i++) {            final int temp = i;            new Thread(()->{                myCache.get(temp+\"\");            },String.valueOf(i)).start();        }    }}/*    加锁的 */class MyCacheLock{    private volatile Map<String,Object> map = new HashMap<>();    //读写锁:更加细粒度的控制    private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();    //存，写入的时候，只希望同时只有一个线程写    public void put(String key,Object value){        readWriteLock.writeLock().lock();        try {            System.out.println(Thread.currentThread().getName()+\"写入\"+key);            map.put(key,value);            System.out.println(Thread.currentThread().getName()+\"写入OK\");        } catch (Exception e) {            e.printStackTrace();        } finally {            readWriteLock.writeLock().unlock();        }    }    //取，读，所有人都可以读！    public void get(String key){        readWriteLock.readLock().lock();        try {            System.out.println(Thread.currentThread().getName()+\"读取\"+key);            Object o=map.get(key);            System.out.println(Thread.currentThread().getName()+\"读取OK\");        } catch (Exception e) {            e.printStackTrace();        } finally {        readWriteLock.readLock().unlock();        }    }}\n```\n\n\n\n四组API\n\n| 方式         | 抛出异常 | 有返回值，不抛出异常 | 阻塞 等待 | 超时等待                      |\n| ------------ | -------- | -------------------- | --------- | ----------------------------- |\n| 添加         | add      | offer                | put       | offer(\" \",2,TimeUnit.SECONDS) |\n| 移除         | remove   | poll                 | take      | poll(\" \",2,TimeUnit.SECONDS)  |\n| 检测队首元素 | element  | peek                 |           |                               |\n\n\n\n\n\n\n\n抛出异常:\n\n```java\n    public static void main(String[] args) {        test1();    }    public static void test1() {        //队列的大小        ArrayBlockingQueue blockingQueue = new ArrayBlockingQueue<>(3);        System.out.println(blockingQueue.add(\"a\"));        System.out.println(blockingQueue.add(\"b\"));        System.out.println(blockingQueue.add(\"c\"));\t\t//IllegalStateException:Queue full 抛出异常！        //System.out.println(blockingQueue.add(\"d\"));                System.out.println(\"============\");        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());\t\t        //java.util.NoSuchElementException 抛出异常！        //System.out.println(blockingQueue.remove());            }}\n```\n\n\n\nSynchronousQueue同步队列：\n\n没有容量，\n\n进去一个元素，必须等待取出来之后，才能再往里面放一个元素！\n\nput,take;\n\n\n\n\n\n#### 线程池\n\n线程池：三大方法、七大参数、四种拒绝策略\n\n池化技术：\n\n\n\n线程池使用案例：\n\n```java\nimport java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Demo01 {    public static void main(String[] args) {        //ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个固定的线程池的大小        //ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩的        try {            for (int i = 0; i < 10; i++) {                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()->{                        System.out.println(Thread.currentThread().getName()+\" ok\");                });            }        } catch (Exception e) {            e.printStackTrace();        } finally {            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        }    }}\n```\n\n\n\n7大参数及自定义线程池：\n\n```java\nimport java.util.concurrent.*;// Executors 工具类，3大方法public class Demo01 {    public static void main(String[] args) {        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque<>(3),                Executors.defaultThreadFactory(),                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常             //new ThreadPoolExecutor.CallerRunsPolicy()  哪来的去哪里！！（一般让main线程去处理）         //new ThreadPoolExecutor.DiscardPolicy() //队列满了，丢掉任务，不会抛出异常！               //new ThreadPoolExecutor.DiscardOldestPolicy() 队列满了，尝试去和最早的竞争，也不会抛出异常        );        try {            for (int i = 0; i < 10; i++) {                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()->{                        System.out.println(Thread.currentThread().getName()+\" ok\");                });            }        } catch (Exception e) {            e.printStackTrace();        } finally {            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        }    }}\n```\n\n\n\n7大参数以及自定义线程池\n\n```java\nimport java.util.concurrent.*;// Executors 工具类，3大方法public class Demo01 {    public static void main(String[] args) { //       Executors.newSingleThreadExecutor();        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque<>(3),                Executors.defaultThreadFactory(), //默认的线程工厂                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常        );        try {            for (int i = 0; i < 10; i++) {                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()->{                        System.out.println(Thread.currentThread().getName()+\" ok\");                });            }        } catch (Exception e) {            e.printStackTrace();        } finally {            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        }    }}\n```\n\n\n\n\n\n最大线程应该如何定义：\n\n1.CPU密集型，几核，就是几，可以保持CPU的效率最高！\n\n2.IO密集型， >判断你程序中十分耗IO的线程\n\n\n\n\n\n### 四大函数式接口\n\n1.Function\n\n```java\nimport java.util.concurrent.*;import java.util.function.Function;// Executors 工具类，3大方法/* Function 函数型接口，有一个输入参数，有一个输出 只要是 函数型接口 可以 用 Lambda表达式简化 */public class Demo01 {    public static void main(String[] args) {    //    Function function = new Function<String,String>(){    //        @Override    //        public String apply(String str){    //            return str;          //        }    //    };                                Function function = (str)->{return str;};        System.out.println(function.apply(\"sad\"));            }}\n```\n\n\n\n2.Predicate （断定性接口）\n\n\n\n```java\nimport java.util.function.Predicate;/*    断定型接口，有一个输入参数，返回值只能是布尔值 */public class Demo2 {    public static void main(String[] args) {        //判断字符串是否为空        /*Predicate<String> predicate = new Predicate<String>() {            @Override            public boolean test(String str) {                return str.isEmpty();            }        };          */        Predicate<String> predicate = (str)->{return str.isEmpty();};        System.out.println(predicate.test(\"\"));    }}\n```\n\n\n\n3.Consumer 消费型接口：只有输入，没有返回值\n\n\n\n4.Supplier 供给型接口：没有参数，只有返回值\n\n\n\n### Stream流式计算：\n\n\n\n```java\nimport java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantReadWriteLock;import static org.graalvm.compiler.options.OptionType.User;public class Test {    public static void main(String[] args) {        User u1 = new User(1,\"a\",21);        User u2 = new User(2,\"b\",22);        User u3 = new User(3,\"c\",23);        User u4 = new User(4,\"d\",24);        User u5 = new User(6,\"e\",25);        //集合就是存储        List<User> list = Arrays.asList(u1, u2, u3, u4, u5);        //Lambda表达式 链式编程 函数式接口 Stream流式计算        //计算交给Stream流        list.stream()                .filter(u->{return u.getId()%2==0;})                .filter(u->{return u.getAge()>23;})                .map(u->{return u.getName().toUpperCase();})                .sorted((uu1,uu2)->{return uu2.compareTo(uu1);})                .limit(1)                .forEach(System.out::println);    }}class User{    public User(int id, String name, int age) {        this.id = id;        this.name = name;        this.age = age;    }    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public int id;    public String name;    public int age;    }\n```\n\n\n\n### ForkJoin:\n\n工作窃取：这个里面维护的都是双端队列\n\n\n\n```java\nimport java.util.concurrent.RecursiveTask;public class ForkJoinDemo extends RecursiveTask<Long> {        private Long start; //1    private Long end;   //1990900000        //临界值    private Long temp = 10000L;        public ForkJoinDemo(Long start,Long end){        this.start=start;        this.end=end;    }        @Override    protected Long compute(){        if((end-start)<temp){            Long sum=0L;            for(Long i=start;i<end;i++){                sum+=i;            }            return sum;        }else{ //forkjoin 递归            long middle = (start+end)/2; //中间值            ForkJoinDemo task1 = new ForkJoinDemo(start,middle);            task1.fork(); //拆分任务，把任务压入线程队列            ForkJoinDemo task2 = new ForkJoinDemo(middle+1,end);            task2.fork();                        return task1.join()+task2.join();                    }            }    }\n```\n\n\n\n测试：\n\n```java\nimport java.util.concurrent.ExecutionException;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.ForkJoinTask;import java.util.stream.LongStream;public class Test {    public static void main(String[] args) throws ExecutionException, InterruptedException {        //test1();        //test2();        test3();    }    public static void test1(){        Long sum = 0l;        long start = System.currentTimeMillis();        for (Long i = 1L;i<=10_0000_0000;i++){            sum+=i;        }        long end = System.currentTimeMillis();        System.out.println(\"sum=\"+sum+\"时间：\"+(end-start));    }    //会使用ForkJoin    public static void test2() throws ExecutionException, InterruptedException {        long start = System.currentTimeMillis();        ForkJoinPool forkJoinPool = new ForkJoinPool();        ForkJoinTask<Long> task = new ForkJoinDemo(0L,10_0000_0000L);        ForkJoinTask<Long> submit = forkJoinPool.submit(task); //提交任务        Long sum = submit.get();        long end = System.currentTimeMillis();        System.out.println(\"sum=\"+sum+\"时间：\"+(end-start));    }    public static void test3(){        long start = System.currentTimeMillis();        //Stream并行流         long sum = LongStream.rangeClosed(0L,10_0000_0000).parallel().reduce(0,Long::sum);                long end=System.currentTimeMillis();        System.out.println(\"sum=\"+\"时间：\"+(end-start));            }    }\n```\n\n\n\n异步回调\n\n```java\npackage kk;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;public class Demo01 {    /*    异步调用：CompletableFuture    //异步执行    //成功回调    //失败回调     */    public static void main(String[] args) throws ExecutionException, InterruptedException {     /*   //发起一个请求        CompletableFuture<Void> completableFuture = CompletableFuture.runAsync(()->{            try {                TimeUnit.SECONDS.sleep(2);            } catch (InterruptedException e) {                e.printStackTrace();            }            System.out.println(Thread.currentThread().getName()+\"runAsync=>Void\");        });        System.out.println(\"1111\");        completableFuture.get(); //获取阻塞执行结果        }        */    // 有返回值的supplyAsync 异步回调    // ajax 成功和失败的回调        CompletableFuture<Integer> completableFuture = CompletableFuture.supplyAsync(()->{            System.out.println(Thread.currentThread().getName()+\"supplyAsync=>VInteger\");            return 1024;        });        completableFuture.whenComplete((t,u)->{            System.out.println(\"t->\"+t); //正常的返回结果            System.out.println(\"u->\"+u); //错误信息        }).exceptionally((e)->{            System.out.println(e.getMessage());            return 233; //可以获取到错误的返回结果         }).get();    }}\n```\n\n\n\n\n\n\n\n### JMM\n\nVolatile 是Java虚拟机提供轻量级的同步机制\n\n1.保证可见性\n\n2.不保证原子性\n\n3.禁止指令重排\n\n\n\nJMM：java内存模型，不存在的东西，属于概念，约定。\n\n\n\n关于JMM的一些同步的约定：\n\n1.线程解锁前，必须把共享变量立刻刷回主存\n\n2.线程加锁前，必须读取主存中的最新值到工作内存中\n\n3.加锁和解锁的是用一把锁\n\n\n\n\n\n```java\npackage kk;import java.util.concurrent.TimeUnit;public class JMMDemo {    //不加volatile程序会进入死循环！ （保证可见性）    private volatile static int num = 0;    public static void main(String[] args) { // main        new Thread(() -> {            while (num == 0) {            }        }).start();        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {            e.printStackTrace();        }        num = 1;    }}\n```\n\n\n\n原子性：不可分割 （而volatile不保证原子性）\n\n​\t使用原子类解决原子性问题\n\n\n\n\n\n\n\n单例模式\n\n```java\n//饿汉式单例public class Hungry {        //可能会浪费空间    private byte[] data1 = new byte[1024*1024];    private byte[] data2 = new byte[1024*1024];    private byte[] data3 = new byte[1024*1024];    private byte[] data4 = new byte[1024*1024];        private Hungry(){            }  //构造器私有化        private final static Hungry HUNGRY = Hungry();        public static Hungry getInstance(){        return HUNGRY;    }    }\n```\n\n\n\n懒汉式单例：\n\n```java\npublic class LazyMan {    private LazyMan(){    }    private volatile static LazyMan lazyMan;        //双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() {        if (lazyMan == null) {            synchronized (LazyMan.class) {                if (lazyMan == null) {                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                }            }        }            return lazyMan;            }}\n```\n\n\n\n静态内部类\n\n```java\n//静态内部类public class Holder {    private Holder(){    }    public static Holder getInstance(){        return InnerClass.HOLDER;    }        public static class InnerClass{        private static final Holder HOLDER = new Holder();    }    }\n```\n\n\n\n\n\n通过反射破坏懒汉式单例\n\n```java\nimport java.lang.reflect.Constructor;public class LazyMan {    private LazyMan(){        System.out.println(Thread.currentThread().getName()+\"OK\");    }    private volatile static LazyMan lazyMan;    //双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() {        if (lazyMan == null) {            synchronized (LazyMan.class) {                if (lazyMan == null) {                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                }            }        }            return lazyMan;    }    //用反射破坏单例模式    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {        LazyMan instance = LazyMan.getInstance();        Constructor<LazyMan> declaredConstructor = LazyMan.class.getDeclaredConstructor(null);        declaredConstructor.setAccessible(true); //无视私有构造器        LazyMan instance2 = declaredConstructor.newInstance();        System.out.println(instance);        System.out.println(instance2);    }        }\n```\n\n\n\n\n\n","source":"_posts/JAVA并发编程基础.md","raw":"---\ntitle: JAVA并发编程基础\ndate: 2021-05-09 17:05:53\ntags:\ncategories: JUC\n---\n\n#### Lock锁\n\n1.Synchronized 内置的java关键字，Lock是一个java类\n\n2.Synchronized无法判断获取锁的状态，Lock可以判断是否获取到了锁\n\n3.Synchronized会自动释放锁，lock必须要手动释放锁！如果不释放锁，死锁\n\n4.Synchronized 线程1（获得锁、阻塞）、线程2（等待、傻傻的等）；Lock锁就不一定会等待下去\n\n5.Synchronized 可重入锁，不可以中断的、非公平；Lock，可重入锁、可以判断锁、非公平（可以自己设置）\n\n6.Synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步代码\n\n\n\n\n\n\n\nCondition实现精准通知唤醒\n\n```java\n//A执行完调用B，B执行完调用C，C执行完调用A\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class C {\n\n    public static void main(String[] args) {\n        Data3 data = new Data3();\n\n        new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                data.printA();\n            }\n        }, \"A\").start();\n\n        new Thread(()->{\n            for (int i = 0; i < 10; i++) {\n                data.printB();\n            }\n        },\"B\").start();\n\n        new Thread(()->{\n            for (int i = 0; i < 10; i++) {\n                data.printC();\n            }\n        },\"C\").start();\n\n    }\n\n\n\n\n\n\n    static class Data3 {  //资源类Lock\n\n        private Lock lock = new ReentrantLock();\n        private Condition condition1 = lock.newCondition();\n        private Condition condition2 = lock.newCondition();\n        private Condition condition3 = lock.newCondition();\n        private int number = 1; //1A 2B 3C\n\n        public void printA() {\n            lock.lock();\n            try {\n                while (number != 1) {\n                    //等待\n                    condition1.await();\n                }\n                System.out.println(Thread.currentThread().getName() + \"=>AAAAAAA\");\n                //唤醒，唤醒指定的人，B\n                number = 2;\n                condition2.signal();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n\n        public void printB() {\n            lock.lock();\n            try {\n                while (number != 2) {\n                    //等待\n                    condition2.await();\n                }\n                System.out.println(Thread.currentThread().getName() + \"=>BBBBBBBB\");\n                //唤醒，唤醒指定的人，C\n                number = 3;\n                condition3.signal();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n\n          public void printC() {\n            lock.lock();\n            try {\n                while (number != 3) {\n                    //等待\n                    condition3.await();\n                }\n                System.out.println(Thread.currentThread().getName() + \"=>CCCCCCCCC\");\n                //唤醒，唤醒指定的人，A\n                number = 1;\n                condition1.signal();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n\n}\n```\n\n\n\n（List不安全）\n\nCopyOnWriteArrayList\n\n```java\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class ListTest {\n\n    public static void main(String[] args) {\n\n        //并发下ArrayList不安全\n        /*\n        解决方案：\n        1.List<String> list = new Vector<>();\n        2.List<String> list = Collections.synchronizedList(new ArrayList<>());\n        3.List<String> list = new CopyOnWriteArrayList<>();\n        */\n        \n        //CopyOnWrite 写入时复制 COW 计算机程序设计领域的一种优化策略;\n        //多个线程调用的时候，List，读取的时候，固定的，写入时可能会出现覆盖操作\n        //在写入的时候避免覆盖，造成数据问题\n\n        List<String> list=new CopyOnWriteArrayList<>();\n\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                list.add(UUID.randomUUID().toString().substring(0,5));\n                System.out.println(list);\n            },String.valueOf(i)).start();\n        }\n    }\n}\n```\n\n\n\nCopyOnWriteArraySet\n\n```java\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\npublic class SetTest {\n\n    public static void main(String[] args) {\n\n        Set<String> set =new HashSet<>();\n        //Set<String> set = Collections.synchronizedSet(new HashSet<>());\n        //Set<String> set = new CopyOnWriteArraySet<>();\n\n        for (int i = 1; i <= 30; i++) {\n            new Thread(()->{\n                set.add(UUID.randomUUID().toString().substring(0,5));\n                System.out.println(set);\n            },String.valueOf(i)).start();\n\n        }\n\n    }\n}\n```\n\n\n\nHashSet的底层是什么？\n\n```java\npublic HashSet(){\n\tmap = new HashMap<>();\n}\n\n// add set 本质就是 map key是无法重复的！\npublic boolean add(E e){\n\treturn map.put(e,PRESENT)==null;\n}\n \nprivate static final Object PRESENT = new Object(); //不变的值！\n```\n\n\n\nCallable接口\n\n```java\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.FutureTask;\n\npublic class CallableTest {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n\n        //new Thread().start();//怎么启动Callable\n\n        MyThread thread = new MyThread();\n        FutureTask futureTask = new FutureTask(thread); //适配类\n\n        new Thread(futureTask,\"A\").start();\n\n        Integer o = (Integer) futureTask.get();//获取Callable的返回结果\n\n    }\n\n}\n\nclass MyThread implements Callable<Integer>{\n\n    @Override\n    public Integer call(){\n        System.out.println(\"call()\");\n        return 1024;\n    }\n}\n```\n\n\n\n\n\n\n\n\n\nCountDownLatch\n\n\n\n```java\nimport java.util.concurrent.CountDownLatch;\n\npublic class CountDownLatchDemo {\n    public static void main(String[] args) throws InterruptedException {\n        //总数是6\n\n        CountDownLatch countDownLatch = new CountDownLatch(6);\n\n        for (int i = 1; i <= 6; i++) {\n            new Thread(()->{\n                System.out.println(Thread.currentThread().getName()+\"go out\");\n                countDownLatch.countDown(); //数量-1\n            },String.valueOf(i)).start();\n        }\n\n        countDownLatch.await(); //等待计数器归零，然后再向下执行\n\n        System.out.println(\"关门\");\n\n    }\n\n}\n```\n\n​    \n\nCyclicBarrier\n\n```java \nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\n\npublic class CyclicBarrierDemo {\n\n    public static void main(String[] args) {\n\n\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -> {\n            System.out.println(\"召唤神龙成功\");\n        });\n\n        for (int i = 1; i <= 7; i++) {\n            final int temp=i;\n\n            int finalI = i;\n            new Thread(()->{\n                System.out.println(Thread.currentThread().getName()+\"收集了\"+ finalI +\"个龙珠\");\n                try {\n                    cyclicBarrier.await(); //等待\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } catch (BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n        }\n    }\n}\n```\n\n\n\n\n\n\n\nSemaphore\n\n```java\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\n\npublic class SemaphoreDemo {\n\n    public static void main(String[] args) {\n        //线程数量：停车位(有三个停车位)\n        Semaphore semaphore = new Semaphore(3);\n\n        for (int i = 1; i <= 6; i++) {\n            new Thread(()->{\n                //acquire()得到\n\n                try {\n                    semaphore.acquire();\n                    System.out.println(Thread.currentThread().getName()+\"抢到车位\");\n                    TimeUnit.SECONDS.sleep(2);\n                    System.out.println(Thread.currentThread().getName()+\"离开车位\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } finally {\n                    semaphore.release();//释放\n                }\n\n\n            },String.valueOf(i)).start();\n        }\n\n\n    }\n\n}\n```\n\n\n\n\n\nReadWriteLock\n\n```java\nimport java.util.HashMap;import java.util.Map;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantLock;import java.util.concurrent.locks.ReentrantReadWriteLock;//独占锁（写锁） 一次只能被一个线程占用//共享锁（读锁） 多个线程可以同时占用public class ReadWriteLockDemo{    public static void main(String[] args) {        MyCacheLock myCache = new MyCacheLock();        //写入        for (int i = 1; i <= 5; i++) {            final int temp = i;            new Thread(()->{                myCache.put(temp+\"\",temp+\"\");            },String.valueOf(i)).start();        }        //读取        for (int i = 1; i <= 5; i++) {            final int temp = i;            new Thread(()->{                myCache.get(temp+\"\");            },String.valueOf(i)).start();        }    }}/*    加锁的 */class MyCacheLock{    private volatile Map<String,Object> map = new HashMap<>();    //读写锁:更加细粒度的控制    private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();    //存，写入的时候，只希望同时只有一个线程写    public void put(String key,Object value){        readWriteLock.writeLock().lock();        try {            System.out.println(Thread.currentThread().getName()+\"写入\"+key);            map.put(key,value);            System.out.println(Thread.currentThread().getName()+\"写入OK\");        } catch (Exception e) {            e.printStackTrace();        } finally {            readWriteLock.writeLock().unlock();        }    }    //取，读，所有人都可以读！    public void get(String key){        readWriteLock.readLock().lock();        try {            System.out.println(Thread.currentThread().getName()+\"读取\"+key);            Object o=map.get(key);            System.out.println(Thread.currentThread().getName()+\"读取OK\");        } catch (Exception e) {            e.printStackTrace();        } finally {        readWriteLock.readLock().unlock();        }    }}\n```\n\n\n\n四组API\n\n| 方式         | 抛出异常 | 有返回值，不抛出异常 | 阻塞 等待 | 超时等待                      |\n| ------------ | -------- | -------------------- | --------- | ----------------------------- |\n| 添加         | add      | offer                | put       | offer(\" \",2,TimeUnit.SECONDS) |\n| 移除         | remove   | poll                 | take      | poll(\" \",2,TimeUnit.SECONDS)  |\n| 检测队首元素 | element  | peek                 |           |                               |\n\n\n\n\n\n\n\n抛出异常:\n\n```java\n    public static void main(String[] args) {        test1();    }    public static void test1() {        //队列的大小        ArrayBlockingQueue blockingQueue = new ArrayBlockingQueue<>(3);        System.out.println(blockingQueue.add(\"a\"));        System.out.println(blockingQueue.add(\"b\"));        System.out.println(blockingQueue.add(\"c\"));\t\t//IllegalStateException:Queue full 抛出异常！        //System.out.println(blockingQueue.add(\"d\"));                System.out.println(\"============\");        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());\t\t        //java.util.NoSuchElementException 抛出异常！        //System.out.println(blockingQueue.remove());            }}\n```\n\n\n\nSynchronousQueue同步队列：\n\n没有容量，\n\n进去一个元素，必须等待取出来之后，才能再往里面放一个元素！\n\nput,take;\n\n\n\n\n\n#### 线程池\n\n线程池：三大方法、七大参数、四种拒绝策略\n\n池化技术：\n\n\n\n线程池使用案例：\n\n```java\nimport java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Demo01 {    public static void main(String[] args) {        //ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个固定的线程池的大小        //ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩的        try {            for (int i = 0; i < 10; i++) {                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()->{                        System.out.println(Thread.currentThread().getName()+\" ok\");                });            }        } catch (Exception e) {            e.printStackTrace();        } finally {            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        }    }}\n```\n\n\n\n7大参数及自定义线程池：\n\n```java\nimport java.util.concurrent.*;// Executors 工具类，3大方法public class Demo01 {    public static void main(String[] args) {        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque<>(3),                Executors.defaultThreadFactory(),                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常             //new ThreadPoolExecutor.CallerRunsPolicy()  哪来的去哪里！！（一般让main线程去处理）         //new ThreadPoolExecutor.DiscardPolicy() //队列满了，丢掉任务，不会抛出异常！               //new ThreadPoolExecutor.DiscardOldestPolicy() 队列满了，尝试去和最早的竞争，也不会抛出异常        );        try {            for (int i = 0; i < 10; i++) {                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()->{                        System.out.println(Thread.currentThread().getName()+\" ok\");                });            }        } catch (Exception e) {            e.printStackTrace();        } finally {            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        }    }}\n```\n\n\n\n7大参数以及自定义线程池\n\n```java\nimport java.util.concurrent.*;// Executors 工具类，3大方法public class Demo01 {    public static void main(String[] args) { //       Executors.newSingleThreadExecutor();        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque<>(3),                Executors.defaultThreadFactory(), //默认的线程工厂                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常        );        try {            for (int i = 0; i < 10; i++) {                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()->{                        System.out.println(Thread.currentThread().getName()+\" ok\");                });            }        } catch (Exception e) {            e.printStackTrace();        } finally {            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        }    }}\n```\n\n\n\n\n\n最大线程应该如何定义：\n\n1.CPU密集型，几核，就是几，可以保持CPU的效率最高！\n\n2.IO密集型， >判断你程序中十分耗IO的线程\n\n\n\n\n\n### 四大函数式接口\n\n1.Function\n\n```java\nimport java.util.concurrent.*;import java.util.function.Function;// Executors 工具类，3大方法/* Function 函数型接口，有一个输入参数，有一个输出 只要是 函数型接口 可以 用 Lambda表达式简化 */public class Demo01 {    public static void main(String[] args) {    //    Function function = new Function<String,String>(){    //        @Override    //        public String apply(String str){    //            return str;          //        }    //    };                                Function function = (str)->{return str;};        System.out.println(function.apply(\"sad\"));            }}\n```\n\n\n\n2.Predicate （断定性接口）\n\n\n\n```java\nimport java.util.function.Predicate;/*    断定型接口，有一个输入参数，返回值只能是布尔值 */public class Demo2 {    public static void main(String[] args) {        //判断字符串是否为空        /*Predicate<String> predicate = new Predicate<String>() {            @Override            public boolean test(String str) {                return str.isEmpty();            }        };          */        Predicate<String> predicate = (str)->{return str.isEmpty();};        System.out.println(predicate.test(\"\"));    }}\n```\n\n\n\n3.Consumer 消费型接口：只有输入，没有返回值\n\n\n\n4.Supplier 供给型接口：没有参数，只有返回值\n\n\n\n### Stream流式计算：\n\n\n\n```java\nimport java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantReadWriteLock;import static org.graalvm.compiler.options.OptionType.User;public class Test {    public static void main(String[] args) {        User u1 = new User(1,\"a\",21);        User u2 = new User(2,\"b\",22);        User u3 = new User(3,\"c\",23);        User u4 = new User(4,\"d\",24);        User u5 = new User(6,\"e\",25);        //集合就是存储        List<User> list = Arrays.asList(u1, u2, u3, u4, u5);        //Lambda表达式 链式编程 函数式接口 Stream流式计算        //计算交给Stream流        list.stream()                .filter(u->{return u.getId()%2==0;})                .filter(u->{return u.getAge()>23;})                .map(u->{return u.getName().toUpperCase();})                .sorted((uu1,uu2)->{return uu2.compareTo(uu1);})                .limit(1)                .forEach(System.out::println);    }}class User{    public User(int id, String name, int age) {        this.id = id;        this.name = name;        this.age = age;    }    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public int id;    public String name;    public int age;    }\n```\n\n\n\n### ForkJoin:\n\n工作窃取：这个里面维护的都是双端队列\n\n\n\n```java\nimport java.util.concurrent.RecursiveTask;public class ForkJoinDemo extends RecursiveTask<Long> {        private Long start; //1    private Long end;   //1990900000        //临界值    private Long temp = 10000L;        public ForkJoinDemo(Long start,Long end){        this.start=start;        this.end=end;    }        @Override    protected Long compute(){        if((end-start)<temp){            Long sum=0L;            for(Long i=start;i<end;i++){                sum+=i;            }            return sum;        }else{ //forkjoin 递归            long middle = (start+end)/2; //中间值            ForkJoinDemo task1 = new ForkJoinDemo(start,middle);            task1.fork(); //拆分任务，把任务压入线程队列            ForkJoinDemo task2 = new ForkJoinDemo(middle+1,end);            task2.fork();                        return task1.join()+task2.join();                    }            }    }\n```\n\n\n\n测试：\n\n```java\nimport java.util.concurrent.ExecutionException;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.ForkJoinTask;import java.util.stream.LongStream;public class Test {    public static void main(String[] args) throws ExecutionException, InterruptedException {        //test1();        //test2();        test3();    }    public static void test1(){        Long sum = 0l;        long start = System.currentTimeMillis();        for (Long i = 1L;i<=10_0000_0000;i++){            sum+=i;        }        long end = System.currentTimeMillis();        System.out.println(\"sum=\"+sum+\"时间：\"+(end-start));    }    //会使用ForkJoin    public static void test2() throws ExecutionException, InterruptedException {        long start = System.currentTimeMillis();        ForkJoinPool forkJoinPool = new ForkJoinPool();        ForkJoinTask<Long> task = new ForkJoinDemo(0L,10_0000_0000L);        ForkJoinTask<Long> submit = forkJoinPool.submit(task); //提交任务        Long sum = submit.get();        long end = System.currentTimeMillis();        System.out.println(\"sum=\"+sum+\"时间：\"+(end-start));    }    public static void test3(){        long start = System.currentTimeMillis();        //Stream并行流         long sum = LongStream.rangeClosed(0L,10_0000_0000).parallel().reduce(0,Long::sum);                long end=System.currentTimeMillis();        System.out.println(\"sum=\"+\"时间：\"+(end-start));            }    }\n```\n\n\n\n异步回调\n\n```java\npackage kk;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;public class Demo01 {    /*    异步调用：CompletableFuture    //异步执行    //成功回调    //失败回调     */    public static void main(String[] args) throws ExecutionException, InterruptedException {     /*   //发起一个请求        CompletableFuture<Void> completableFuture = CompletableFuture.runAsync(()->{            try {                TimeUnit.SECONDS.sleep(2);            } catch (InterruptedException e) {                e.printStackTrace();            }            System.out.println(Thread.currentThread().getName()+\"runAsync=>Void\");        });        System.out.println(\"1111\");        completableFuture.get(); //获取阻塞执行结果        }        */    // 有返回值的supplyAsync 异步回调    // ajax 成功和失败的回调        CompletableFuture<Integer> completableFuture = CompletableFuture.supplyAsync(()->{            System.out.println(Thread.currentThread().getName()+\"supplyAsync=>VInteger\");            return 1024;        });        completableFuture.whenComplete((t,u)->{            System.out.println(\"t->\"+t); //正常的返回结果            System.out.println(\"u->\"+u); //错误信息        }).exceptionally((e)->{            System.out.println(e.getMessage());            return 233; //可以获取到错误的返回结果         }).get();    }}\n```\n\n\n\n\n\n\n\n### JMM\n\nVolatile 是Java虚拟机提供轻量级的同步机制\n\n1.保证可见性\n\n2.不保证原子性\n\n3.禁止指令重排\n\n\n\nJMM：java内存模型，不存在的东西，属于概念，约定。\n\n\n\n关于JMM的一些同步的约定：\n\n1.线程解锁前，必须把共享变量立刻刷回主存\n\n2.线程加锁前，必须读取主存中的最新值到工作内存中\n\n3.加锁和解锁的是用一把锁\n\n\n\n\n\n```java\npackage kk;import java.util.concurrent.TimeUnit;public class JMMDemo {    //不加volatile程序会进入死循环！ （保证可见性）    private volatile static int num = 0;    public static void main(String[] args) { // main        new Thread(() -> {            while (num == 0) {            }        }).start();        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {            e.printStackTrace();        }        num = 1;    }}\n```\n\n\n\n原子性：不可分割 （而volatile不保证原子性）\n\n​\t使用原子类解决原子性问题\n\n\n\n\n\n\n\n单例模式\n\n```java\n//饿汉式单例public class Hungry {        //可能会浪费空间    private byte[] data1 = new byte[1024*1024];    private byte[] data2 = new byte[1024*1024];    private byte[] data3 = new byte[1024*1024];    private byte[] data4 = new byte[1024*1024];        private Hungry(){            }  //构造器私有化        private final static Hungry HUNGRY = Hungry();        public static Hungry getInstance(){        return HUNGRY;    }    }\n```\n\n\n\n懒汉式单例：\n\n```java\npublic class LazyMan {    private LazyMan(){    }    private volatile static LazyMan lazyMan;        //双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() {        if (lazyMan == null) {            synchronized (LazyMan.class) {                if (lazyMan == null) {                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                }            }        }            return lazyMan;            }}\n```\n\n\n\n静态内部类\n\n```java\n//静态内部类public class Holder {    private Holder(){    }    public static Holder getInstance(){        return InnerClass.HOLDER;    }        public static class InnerClass{        private static final Holder HOLDER = new Holder();    }    }\n```\n\n\n\n\n\n通过反射破坏懒汉式单例\n\n```java\nimport java.lang.reflect.Constructor;public class LazyMan {    private LazyMan(){        System.out.println(Thread.currentThread().getName()+\"OK\");    }    private volatile static LazyMan lazyMan;    //双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() {        if (lazyMan == null) {            synchronized (LazyMan.class) {                if (lazyMan == null) {                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                }            }        }            return lazyMan;    }    //用反射破坏单例模式    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {        LazyMan instance = LazyMan.getInstance();        Constructor<LazyMan> declaredConstructor = LazyMan.class.getDeclaredConstructor(null);        declaredConstructor.setAccessible(true); //无视私有构造器        LazyMan instance2 = declaredConstructor.newInstance();        System.out.println(instance);        System.out.println(instance2);    }        }\n```\n\n\n\n\n\n","slug":"JAVA并发编程基础","published":1,"updated":"2021-05-09T09:06:25.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckogykg380001k2708256a9ji","content":"<h4 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h4><p>1.Synchronized 内置的java关键字，Lock是一个java类</p>\n<p>2.Synchronized无法判断获取锁的状态，Lock可以判断是否获取到了锁</p>\n<p>3.Synchronized会自动释放锁，lock必须要手动释放锁！如果不释放锁，死锁</p>\n<p>4.Synchronized 线程1（获得锁、阻塞）、线程2（等待、傻傻的等）；Lock锁就不一定会等待下去</p>\n<p>5.Synchronized 可重入锁，不可以中断的、非公平；Lock，可重入锁、可以判断锁、非公平（可以自己设置）</p>\n<p>6.Synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步代码</p>\n<p>Condition实现精准通知唤醒</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//A执行完调用B，B执行完调用C，C执行完调用A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Data3 data = <span class=\"keyword\">new</span> Data3();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printA();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printB();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printC();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data3</span> </span>&#123;  <span class=\"comment\">//资源类Lock</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Condition condition1 = lock.newCondition();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Condition condition2 = lock.newCondition();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Condition condition3 = lock.newCondition();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>; <span class=\"comment\">//1A 2B 3C</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (number != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//等待</span></span><br><span class=\"line\">                    condition1.await();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;AAAAAAA&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒，唤醒指定的人，B</span></span><br><span class=\"line\">                number = <span class=\"number\">2</span>;</span><br><span class=\"line\">                condition2.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (number != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//等待</span></span><br><span class=\"line\">                    condition2.await();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;BBBBBBBB&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒，唤醒指定的人，C</span></span><br><span class=\"line\">                number = <span class=\"number\">3</span>;</span><br><span class=\"line\">                condition3.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printC</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (number != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//等待</span></span><br><span class=\"line\">                    condition3.await();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;CCCCCCCCC&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒，唤醒指定的人，A</span></span><br><span class=\"line\">                number = <span class=\"number\">1</span>;</span><br><span class=\"line\">                condition1.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>（List不安全）</p>\n<p>CopyOnWriteArrayList</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//并发下ArrayList不安全</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解决方案：</span></span><br><span class=\"line\"><span class=\"comment\">        1.List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">        2.List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class=\"line\"><span class=\"comment\">        3.List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//CopyOnWrite 写入时复制 COW 计算机程序设计领域的一种优化策略;</span></span><br><span class=\"line\">        <span class=\"comment\">//多个线程调用的时候，List，读取的时候，固定的，写入时可能会出现覆盖操作</span></span><br><span class=\"line\">        <span class=\"comment\">//在写入的时候避免覆盖，造成数据问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; list=<span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                list.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>CopyOnWriteArraySet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;String&gt; set =<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class=\"line\">        <span class=\"comment\">//Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                set.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(set);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>HashSet的底层是什么？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashSet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add set 本质就是 map key是无法重复的！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> map.put(e,PRESENT)==<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object PRESENT = <span class=\"keyword\">new</span> Object(); <span class=\"comment\">//不变的值！</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>Callable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//new Thread().start();//怎么启动Callable</span></span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        FutureTask futureTask = <span class=\"keyword\">new</span> FutureTask(thread); <span class=\"comment\">//适配类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(futureTask,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer o = (Integer) futureTask.get();<span class=\"comment\">//获取Callable的返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p>CountDownLatch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountDownLatchDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//总数是6</span></span><br><span class=\"line\"></span><br><span class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;go out&quot;</span>);</span><br><span class=\"line\">                countDownLatch.countDown(); <span class=\"comment\">//数量-1</span></span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        countDownLatch.await(); <span class=\"comment\">//等待计数器归零，然后再向下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;关门&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>CyclicBarrier</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">7</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;召唤神龙成功&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp=i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> finalI = i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;收集了&quot;</span>+ finalI +<span class=\"string\">&quot;个龙珠&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cyclicBarrier.await(); <span class=\"comment\">//等待</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>Semaphore</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程数量：停车位(有三个停车位)</span></span><br><span class=\"line\">        Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"comment\">//acquire()得到</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;抢到车位&quot;</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;离开车位&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    semaphore.release();<span class=\"comment\">//释放</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>ReadWriteLock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;<span class=\"keyword\">import</span> java.util.Map;<span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReadWriteLock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<span class=\"comment\">//独占锁（写锁） 一次只能被一个线程占用//共享锁（读锁） 多个线程可以同时占用public class ReadWriteLockDemo&#123;    public static void main(String[] args) &#123;        MyCacheLock myCache = new MyCacheLock();        //写入        for (int i = 1; i &lt;= 5; i++) &#123;            final int temp = i;            new Thread(()-&gt;&#123;                myCache.put(temp+&quot;&quot;,temp+&quot;&quot;);            &#125;,String.valueOf(i)).start();        &#125;        //读取        for (int i = 1; i &lt;= 5; i++) &#123;            final int temp = i;            new Thread(()-&gt;&#123;                myCache.get(temp+&quot;&quot;);            &#125;,String.valueOf(i)).start();        &#125;    &#125;&#125;/*    加锁的 */class MyCacheLock&#123;    private volatile Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();    //读写锁:更加细粒度的控制    private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();    //存，写入的时候，只希望同时只有一个线程写    public void put(String key,Object value)&#123;        readWriteLock.writeLock().lock();        try &#123;            System.out.println(Thread.currentThread().getName()+&quot;写入&quot;+key);            map.put(key,value);            System.out.println(Thread.currentThread().getName()+&quot;写入OK&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            readWriteLock.writeLock().unlock();        &#125;    &#125;    //取，读，所有人都可以读！    public void get(String key)&#123;        readWriteLock.readLock().lock();        try &#123;            System.out.println(Thread.currentThread().getName()+&quot;读取&quot;+key);            Object o=map.get(key);            System.out.println(Thread.currentThread().getName()+&quot;读取OK&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;        readWriteLock.readLock().unlock();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>四组API</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>抛出异常</th>\n<th>有返回值，不抛出异常</th>\n<th>阻塞 等待</th>\n<th>超时等待</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add</td>\n<td>offer</td>\n<td>put</td>\n<td>offer(“ “,2,TimeUnit.SECONDS)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td>remove</td>\n<td>poll</td>\n<td>take</td>\n<td>poll(“ “,2,TimeUnit.SECONDS)</td>\n</tr>\n<tr>\n<td>检测队首元素</td>\n<td>element</td>\n<td>peek</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>抛出异常:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        test1();    &#125;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;        <span class=\"comment\">//队列的大小        ArrayBlockingQueue blockingQueue = new ArrayBlockingQueue&lt;&gt;(3);        System.out.println(blockingQueue.add(&quot;a&quot;));        System.out.println(blockingQueue.add(&quot;b&quot;));        System.out.println(blockingQueue.add(&quot;c&quot;));\t\t//IllegalStateException:Queue full 抛出异常！        //System.out.println(blockingQueue.add(&quot;d&quot;));                System.out.println(&quot;============&quot;);        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());\t\t        //java.util.NoSuchElementException 抛出异常！        //System.out.println(blockingQueue.remove());            &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>SynchronousQueue同步队列：</p>\n<p>没有容量，</p>\n<p>进去一个元素，必须等待取出来之后，才能再往里面放一个元素！</p>\n<p>put,take;</p>\n<h4 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h4><p>线程池：三大方法、七大参数、四种拒绝策略</p>\n<p>池化技术：</p>\n<p>线程池使用案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;<span class=\"keyword\">import</span> java.util.concurrent.Executors;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        <span class=\"comment\">//ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个固定的线程池的大小        //ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩的        try &#123;            for (int i = 0; i &lt; 10; i++) &#123;                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()-&gt;&#123;                        System.out.println(Thread.currentThread().getName()+&quot; ok&quot;);                &#125;);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>7大参数及自定义线程池：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;<span class=\"comment\">// Executors 工具类，3大方法public class Demo01 &#123;    public static void main(String[] args) &#123;        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque&lt;&gt;(3),                Executors.defaultThreadFactory(),                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常             //new ThreadPoolExecutor.CallerRunsPolicy()  哪来的去哪里！！（一般让main线程去处理）         //new ThreadPoolExecutor.DiscardPolicy() //队列满了，丢掉任务，不会抛出异常！               //new ThreadPoolExecutor.DiscardOldestPolicy() 队列满了，尝试去和最早的竞争，也不会抛出异常        );        try &#123;            for (int i = 0; i &lt; 10; i++) &#123;                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()-&gt;&#123;                        System.out.println(Thread.currentThread().getName()+&quot; ok&quot;);                &#125;);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>7大参数以及自定义线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;<span class=\"comment\">// Executors 工具类，3大方法public class Demo01 &#123;    public static void main(String[] args) &#123; //       Executors.newSingleThreadExecutor();        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque&lt;&gt;(3),                Executors.defaultThreadFactory(), //默认的线程工厂                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常        );        try &#123;            for (int i = 0; i &lt; 10; i++) &#123;                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()-&gt;&#123;                        System.out.println(Thread.currentThread().getName()+&quot; ok&quot;);                &#125;);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>最大线程应该如何定义：</p>\n<p>1.CPU密集型，几核，就是几，可以保持CPU的效率最高！</p>\n<p>2.IO密集型， &gt;判断你程序中十分耗IO的线程</p>\n<h3 id=\"四大函数式接口\"><a href=\"#四大函数式接口\" class=\"headerlink\" title=\"四大函数式接口\"></a>四大函数式接口</h3><p>1.Function</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;<span class=\"keyword\">import</span> java.util.function.Function;<span class=\"comment\">// Executors 工具类，3大方法/* Function 函数型接口，有一个输入参数，有一个输出 只要是 函数型接口 可以 用 Lambda表达式简化 */public class Demo01 &#123;    public static void main(String[] args) &#123;    //    Function function = new Function&lt;String,String&gt;()&#123;    //        @Override    //        public String apply(String str)&#123;    //            return str;          //        &#125;    //    &#125;;                                Function function = (str)-&gt;&#123;return str;&#125;;        System.out.println(function.apply(&quot;sad&quot;));            &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.Predicate （断定性接口）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;<span class=\"comment\">/*    断定型接口，有一个输入参数，返回值只能是布尔值 */</span><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        <span class=\"comment\">//判断字符串是否为空        /*Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() &#123;            @Override            public boolean test(String str) &#123;                return str.isEmpty();            &#125;        &#125;;          */        Predicate&lt;String&gt; predicate = (str)-&gt;&#123;return str.isEmpty();&#125;;        System.out.println(predicate.test(&quot;&quot;));    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.Consumer 消费型接口：只有输入，没有返回值</p>\n<p>4.Supplier 供给型接口：没有参数，只有返回值</p>\n<h3 id=\"Stream流式计算：\"><a href=\"#Stream流式计算：\" class=\"headerlink\" title=\"Stream流式计算：\"></a>Stream流式计算：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;<span class=\"keyword\">import</span> java.util.HashMap;<span class=\"keyword\">import</span> java.util.List;<span class=\"keyword\">import</span> java.util.Map;<span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReadWriteLock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.graalvm.compiler.options.OptionType.User;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        User u1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">21</span>);        User u2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">22</span>);        User u3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>,<span class=\"string\">&quot;c&quot;</span>,<span class=\"number\">23</span>);        User u4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>,<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">24</span>);        User u5 = <span class=\"keyword\">new</span> User(<span class=\"number\">6</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"number\">25</span>);        <span class=\"comment\">//集合就是存储        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);        //Lambda表达式 链式编程 函数式接口 Stream流式计算        //计算交给Stream流        list.stream()                .filter(u-&gt;&#123;return u.getId()%2==0;&#125;)                .filter(u-&gt;&#123;return u.getAge()&gt;23;&#125;)                .map(u-&gt;&#123;return u.getName().toUpperCase();&#125;)                .sorted((uu1,uu2)-&gt;&#123;return uu2.compareTo(uu1);&#125;)                .limit(1)                .forEach(System.out::println);    &#125;&#125;class User&#123;    public User(int id, String name, int age) &#123;        this.id = id;        this.name = name;        this.age = age;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public int id;    public String name;    public int age;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin:\"></a>ForkJoin:</h3><p>工作窃取：这个里面维护的都是双端队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;        <span class=\"keyword\">private</span> Long start; <span class=\"comment\">//1    private Long end;   //1990900000        //临界值    private Long temp = 10000L;        public ForkJoinDemo(Long start,Long end)&#123;        this.start=start;        this.end=end;    &#125;        @Override    protected Long compute()&#123;        if((end-start)&lt;temp)&#123;            Long sum=0L;            for(Long i=start;i&lt;end;i++)&#123;                sum+=i;            &#125;            return sum;        &#125;else&#123; //forkjoin 递归            long middle = (start+end)/2; //中间值            ForkJoinDemo task1 = new ForkJoinDemo(start,middle);            task1.fork(); //拆分任务，把任务压入线程队列            ForkJoinDemo task2 = new ForkJoinDemo(middle+1,end);            task2.fork();                        return task1.join()+task2.join();                    &#125;            &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;<span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;<span class=\"keyword\">import</span> java.util.concurrent.ForkJoinTask;<span class=\"keyword\">import</span> java.util.stream.LongStream;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;        <span class=\"comment\">//test1();        //test2();        test3();    &#125;    public static void test1()&#123;        Long sum = 0l;        long start = System.currentTimeMillis();        for (Long i = 1L;i&lt;=10_0000_0000;i++)&#123;            sum+=i;        &#125;        long end = System.currentTimeMillis();        System.out.println(&quot;sum=&quot;+sum+&quot;时间：&quot;+(end-start));    &#125;    //会使用ForkJoin    public static void test2() throws ExecutionException, InterruptedException &#123;        long start = System.currentTimeMillis();        ForkJoinPool forkJoinPool = new ForkJoinPool();        ForkJoinTask&lt;Long&gt; task = new ForkJoinDemo(0L,10_0000_0000L);        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task); //提交任务        Long sum = submit.get();        long end = System.currentTimeMillis();        System.out.println(&quot;sum=&quot;+sum+&quot;时间：&quot;+(end-start));    &#125;    public static void test3()&#123;        long start = System.currentTimeMillis();        //Stream并行流         long sum = LongStream.rangeClosed(0L,10_0000_0000).parallel().reduce(0,Long::sum);                long end=System.currentTimeMillis();        System.out.println(&quot;sum=&quot;+&quot;时间：&quot;+(end-start));            &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>异步回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kk;<span class=\"keyword\">import</span> java.util.concurrent.CompletableFuture;<span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;<span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01</span> </span>&#123;    <span class=\"comment\">/*    异步调用：CompletableFuture    //异步执行    //成功回调    //失败回调     */</span>    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;     <span class=\"comment\">/*   //发起一个请求        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;            try &#123;                TimeUnit.SECONDS.sleep(2);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            System.out.println(Thread.currentThread().getName()+&quot;runAsync=&gt;Void&quot;);        &#125;);        System.out.println(&quot;1111&quot;);        completableFuture.get(); //获取阻塞执行结果        &#125;        */</span>    <span class=\"comment\">// 有返回值的supplyAsync 异步回调    // ajax 成功和失败的回调        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;            System.out.println(Thread.currentThread().getName()+&quot;supplyAsync=&gt;VInteger&quot;);            return 1024;        &#125;);        completableFuture.whenComplete((t,u)-&gt;&#123;            System.out.println(&quot;t-&gt;&quot;+t); //正常的返回结果            System.out.println(&quot;u-&gt;&quot;+u); //错误信息        &#125;).exceptionally((e)-&gt;&#123;            System.out.println(e.getMessage());            return 233; //可以获取到错误的返回结果         &#125;).get();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h3><p>Volatile 是Java虚拟机提供轻量级的同步机制</p>\n<p>1.保证可见性</p>\n<p>2.不保证原子性</p>\n<p>3.禁止指令重排</p>\n<p>JMM：java内存模型，不存在的东西，属于概念，约定。</p>\n<p>关于JMM的一些同步的约定：</p>\n<p>1.线程解锁前，必须把共享变量立刻刷回主存</p>\n<p>2.线程加锁前，必须读取主存中的最新值到工作内存中</p>\n<p>3.加锁和解锁的是用一把锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kk;<span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JMMDemo</span> </span>&#123;    <span class=\"comment\">//不加volatile程序会进入死循环！ （保证可见性）    private volatile static int num = 0;    public static void main(String[] args) &#123; // main        new Thread(() -&gt; &#123;            while (num == 0) &#123;            &#125;        &#125;).start();        try &#123;            TimeUnit.SECONDS.sleep(1);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        num = 1;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>原子性：不可分割 （而volatile不保证原子性）</p>\n<p>​    使用原子类解决原子性问题</p>\n<p>单例模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉式单例public class Hungry &#123;        //可能会浪费空间    private byte[] data1 = new byte[1024*1024];    private byte[] data2 = new byte[1024*1024];    private byte[] data3 = new byte[1024*1024];    private byte[] data4 = new byte[1024*1024];        private Hungry()&#123;            &#125;  //构造器私有化        private final static Hungry HUNGRY = Hungry();        public static Hungry getInstance()&#123;        return HUNGRY;    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>懒汉式单例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyMan</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazyMan</span><span class=\"params\">()</span></span>&#123;    &#125;    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;        <span class=\"comment\">//双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() &#123;        if (lazyMan == null) &#123;            synchronized (LazyMan.class) &#123;                if (lazyMan == null) &#123;                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                &#125;            &#125;        &#125;            return lazyMan;            &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>静态内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态内部类public class Holder &#123;    private Holder()&#123;    &#125;    public static Holder getInstance()&#123;        return InnerClass.HOLDER;    &#125;        public static class InnerClass&#123;        private static final Holder HOLDER = new Holder();    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过反射破坏懒汉式单例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyMan</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazyMan</span><span class=\"params\">()</span></span>&#123;        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;OK&quot;</span>);    &#125;    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;    <span class=\"comment\">//双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() &#123;        if (lazyMan == null) &#123;            synchronized (LazyMan.class) &#123;                if (lazyMan == null) &#123;                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                &#125;            &#125;        &#125;            return lazyMan;    &#125;    //用反射破坏单例模式    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;        LazyMan instance = LazyMan.getInstance();        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);        declaredConstructor.setAccessible(true); //无视私有构造器        LazyMan instance2 = declaredConstructor.newInstance();        System.out.println(instance);        System.out.println(instance2);    &#125;        &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h4><p>1.Synchronized 内置的java关键字，Lock是一个java类</p>\n<p>2.Synchronized无法判断获取锁的状态，Lock可以判断是否获取到了锁</p>\n<p>3.Synchronized会自动释放锁，lock必须要手动释放锁！如果不释放锁，死锁</p>\n<p>4.Synchronized 线程1（获得锁、阻塞）、线程2（等待、傻傻的等）；Lock锁就不一定会等待下去</p>\n<p>5.Synchronized 可重入锁，不可以中断的、非公平；Lock，可重入锁、可以判断锁、非公平（可以自己设置）</p>\n<p>6.Synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步代码</p>\n<p>Condition实现精准通知唤醒</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//A执行完调用B，B执行完调用C，C执行完调用A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Data3 data = <span class=\"keyword\">new</span> Data3();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printA();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printB();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printC();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data3</span> </span>&#123;  <span class=\"comment\">//资源类Lock</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Condition condition1 = lock.newCondition();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Condition condition2 = lock.newCondition();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Condition condition3 = lock.newCondition();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>; <span class=\"comment\">//1A 2B 3C</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (number != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//等待</span></span><br><span class=\"line\">                    condition1.await();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;AAAAAAA&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒，唤醒指定的人，B</span></span><br><span class=\"line\">                number = <span class=\"number\">2</span>;</span><br><span class=\"line\">                condition2.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (number != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//等待</span></span><br><span class=\"line\">                    condition2.await();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;BBBBBBBB&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒，唤醒指定的人，C</span></span><br><span class=\"line\">                number = <span class=\"number\">3</span>;</span><br><span class=\"line\">                condition3.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printC</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (number != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//等待</span></span><br><span class=\"line\">                    condition3.await();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;CCCCCCCCC&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//唤醒，唤醒指定的人，A</span></span><br><span class=\"line\">                number = <span class=\"number\">1</span>;</span><br><span class=\"line\">                condition1.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>（List不安全）</p>\n<p>CopyOnWriteArrayList</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//并发下ArrayList不安全</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解决方案：</span></span><br><span class=\"line\"><span class=\"comment\">        1.List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">        2.List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class=\"line\"><span class=\"comment\">        3.List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//CopyOnWrite 写入时复制 COW 计算机程序设计领域的一种优化策略;</span></span><br><span class=\"line\">        <span class=\"comment\">//多个线程调用的时候，List，读取的时候，固定的，写入时可能会出现覆盖操作</span></span><br><span class=\"line\">        <span class=\"comment\">//在写入的时候避免覆盖，造成数据问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; list=<span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                list.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>CopyOnWriteArraySet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;String&gt; set =<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class=\"line\">        <span class=\"comment\">//Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                set.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(set);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>HashSet的底层是什么？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashSet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add set 本质就是 map key是无法重复的！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> map.put(e,PRESENT)==<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object PRESENT = <span class=\"keyword\">new</span> Object(); <span class=\"comment\">//不变的值！</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>Callable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Future;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//new Thread().start();//怎么启动Callable</span></span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        FutureTask futureTask = <span class=\"keyword\">new</span> FutureTask(thread); <span class=\"comment\">//适配类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(futureTask,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer o = (Integer) futureTask.get();<span class=\"comment\">//获取Callable的返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p>CountDownLatch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountDownLatchDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//总数是6</span></span><br><span class=\"line\"></span><br><span class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;go out&quot;</span>);</span><br><span class=\"line\">                countDownLatch.countDown(); <span class=\"comment\">//数量-1</span></span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        countDownLatch.await(); <span class=\"comment\">//等待计数器归零，然后再向下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;关门&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>CyclicBarrier</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">7</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;召唤神龙成功&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp=i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> finalI = i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;收集了&quot;</span>+ finalI +<span class=\"string\">&quot;个龙珠&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cyclicBarrier.await(); <span class=\"comment\">//等待</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>Semaphore</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程数量：停车位(有三个停车位)</span></span><br><span class=\"line\">        Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"comment\">//acquire()得到</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;抢到车位&quot;</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;离开车位&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    semaphore.release();<span class=\"comment\">//释放</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>ReadWriteLock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;<span class=\"keyword\">import</span> java.util.Map;<span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReadWriteLock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<span class=\"comment\">//独占锁（写锁） 一次只能被一个线程占用//共享锁（读锁） 多个线程可以同时占用public class ReadWriteLockDemo&#123;    public static void main(String[] args) &#123;        MyCacheLock myCache = new MyCacheLock();        //写入        for (int i = 1; i &lt;= 5; i++) &#123;            final int temp = i;            new Thread(()-&gt;&#123;                myCache.put(temp+&quot;&quot;,temp+&quot;&quot;);            &#125;,String.valueOf(i)).start();        &#125;        //读取        for (int i = 1; i &lt;= 5; i++) &#123;            final int temp = i;            new Thread(()-&gt;&#123;                myCache.get(temp+&quot;&quot;);            &#125;,String.valueOf(i)).start();        &#125;    &#125;&#125;/*    加锁的 */class MyCacheLock&#123;    private volatile Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();    //读写锁:更加细粒度的控制    private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();    //存，写入的时候，只希望同时只有一个线程写    public void put(String key,Object value)&#123;        readWriteLock.writeLock().lock();        try &#123;            System.out.println(Thread.currentThread().getName()+&quot;写入&quot;+key);            map.put(key,value);            System.out.println(Thread.currentThread().getName()+&quot;写入OK&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            readWriteLock.writeLock().unlock();        &#125;    &#125;    //取，读，所有人都可以读！    public void get(String key)&#123;        readWriteLock.readLock().lock();        try &#123;            System.out.println(Thread.currentThread().getName()+&quot;读取&quot;+key);            Object o=map.get(key);            System.out.println(Thread.currentThread().getName()+&quot;读取OK&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;        readWriteLock.readLock().unlock();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>四组API</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>抛出异常</th>\n<th>有返回值，不抛出异常</th>\n<th>阻塞 等待</th>\n<th>超时等待</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add</td>\n<td>offer</td>\n<td>put</td>\n<td>offer(“ “,2,TimeUnit.SECONDS)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td>remove</td>\n<td>poll</td>\n<td>take</td>\n<td>poll(“ “,2,TimeUnit.SECONDS)</td>\n</tr>\n<tr>\n<td>检测队首元素</td>\n<td>element</td>\n<td>peek</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>抛出异常:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        test1();    &#125;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;        <span class=\"comment\">//队列的大小        ArrayBlockingQueue blockingQueue = new ArrayBlockingQueue&lt;&gt;(3);        System.out.println(blockingQueue.add(&quot;a&quot;));        System.out.println(blockingQueue.add(&quot;b&quot;));        System.out.println(blockingQueue.add(&quot;c&quot;));\t\t//IllegalStateException:Queue full 抛出异常！        //System.out.println(blockingQueue.add(&quot;d&quot;));                System.out.println(&quot;============&quot;);        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());        System.out.println(blockingQueue.remove());\t\t        //java.util.NoSuchElementException 抛出异常！        //System.out.println(blockingQueue.remove());            &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>SynchronousQueue同步队列：</p>\n<p>没有容量，</p>\n<p>进去一个元素，必须等待取出来之后，才能再往里面放一个元素！</p>\n<p>put,take;</p>\n<h4 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h4><p>线程池：三大方法、七大参数、四种拒绝策略</p>\n<p>池化技术：</p>\n<p>线程池使用案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;<span class=\"keyword\">import</span> java.util.concurrent.Executors;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        <span class=\"comment\">//ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个固定的线程池的大小        //ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩的        try &#123;            for (int i = 0; i &lt; 10; i++) &#123;                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()-&gt;&#123;                        System.out.println(Thread.currentThread().getName()+&quot; ok&quot;);                &#125;);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>7大参数及自定义线程池：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;<span class=\"comment\">// Executors 工具类，3大方法public class Demo01 &#123;    public static void main(String[] args) &#123;        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque&lt;&gt;(3),                Executors.defaultThreadFactory(),                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常             //new ThreadPoolExecutor.CallerRunsPolicy()  哪来的去哪里！！（一般让main线程去处理）         //new ThreadPoolExecutor.DiscardPolicy() //队列满了，丢掉任务，不会抛出异常！               //new ThreadPoolExecutor.DiscardOldestPolicy() 队列满了，尝试去和最早的竞争，也不会抛出异常        );        try &#123;            for (int i = 0; i &lt; 10; i++) &#123;                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()-&gt;&#123;                        System.out.println(Thread.currentThread().getName()+&quot; ok&quot;);                &#125;);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>7大参数以及自定义线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;<span class=\"comment\">// Executors 工具类，3大方法public class Demo01 &#123;    public static void main(String[] args) &#123; //       Executors.newSingleThreadExecutor();        ExecutorService threadPool = new ThreadPoolExecutor(                2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque&lt;&gt;(3),                Executors.defaultThreadFactory(), //默认的线程工厂                new ThreadPoolExecutor.AbortPolicy()//银行满了，还有人进来，不处理这个人的，抛出异常        );        try &#123;            for (int i = 0; i &lt; 10; i++) &#123;                //使用了线程池后，使用线程池来创建线程                threadPool.execute(()-&gt;&#123;                        System.out.println(Thread.currentThread().getName()+&quot; ok&quot;);                &#125;);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            //线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>最大线程应该如何定义：</p>\n<p>1.CPU密集型，几核，就是几，可以保持CPU的效率最高！</p>\n<p>2.IO密集型， &gt;判断你程序中十分耗IO的线程</p>\n<h3 id=\"四大函数式接口\"><a href=\"#四大函数式接口\" class=\"headerlink\" title=\"四大函数式接口\"></a>四大函数式接口</h3><p>1.Function</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;<span class=\"keyword\">import</span> java.util.function.Function;<span class=\"comment\">// Executors 工具类，3大方法/* Function 函数型接口，有一个输入参数，有一个输出 只要是 函数型接口 可以 用 Lambda表达式简化 */public class Demo01 &#123;    public static void main(String[] args) &#123;    //    Function function = new Function&lt;String,String&gt;()&#123;    //        @Override    //        public String apply(String str)&#123;    //            return str;          //        &#125;    //    &#125;;                                Function function = (str)-&gt;&#123;return str;&#125;;        System.out.println(function.apply(&quot;sad&quot;));            &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.Predicate （断定性接口）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;<span class=\"comment\">/*    断定型接口，有一个输入参数，返回值只能是布尔值 */</span><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        <span class=\"comment\">//判断字符串是否为空        /*Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() &#123;            @Override            public boolean test(String str) &#123;                return str.isEmpty();            &#125;        &#125;;          */        Predicate&lt;String&gt; predicate = (str)-&gt;&#123;return str.isEmpty();&#125;;        System.out.println(predicate.test(&quot;&quot;));    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.Consumer 消费型接口：只有输入，没有返回值</p>\n<p>4.Supplier 供给型接口：没有参数，只有返回值</p>\n<h3 id=\"Stream流式计算：\"><a href=\"#Stream流式计算：\" class=\"headerlink\" title=\"Stream流式计算：\"></a>Stream流式计算：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;<span class=\"keyword\">import</span> java.util.HashMap;<span class=\"keyword\">import</span> java.util.List;<span class=\"keyword\">import</span> java.util.Map;<span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReadWriteLock;<span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.graalvm.compiler.options.OptionType.User;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        User u1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">21</span>);        User u2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">22</span>);        User u3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>,<span class=\"string\">&quot;c&quot;</span>,<span class=\"number\">23</span>);        User u4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>,<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">24</span>);        User u5 = <span class=\"keyword\">new</span> User(<span class=\"number\">6</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"number\">25</span>);        <span class=\"comment\">//集合就是存储        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);        //Lambda表达式 链式编程 函数式接口 Stream流式计算        //计算交给Stream流        list.stream()                .filter(u-&gt;&#123;return u.getId()%2==0;&#125;)                .filter(u-&gt;&#123;return u.getAge()&gt;23;&#125;)                .map(u-&gt;&#123;return u.getName().toUpperCase();&#125;)                .sorted((uu1,uu2)-&gt;&#123;return uu2.compareTo(uu1);&#125;)                .limit(1)                .forEach(System.out::println);    &#125;&#125;class User&#123;    public User(int id, String name, int age) &#123;        this.id = id;        this.name = name;        this.age = age;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public int id;    public String name;    public int age;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin:\"></a>ForkJoin:</h3><p>工作窃取：这个里面维护的都是双端队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;        <span class=\"keyword\">private</span> Long start; <span class=\"comment\">//1    private Long end;   //1990900000        //临界值    private Long temp = 10000L;        public ForkJoinDemo(Long start,Long end)&#123;        this.start=start;        this.end=end;    &#125;        @Override    protected Long compute()&#123;        if((end-start)&lt;temp)&#123;            Long sum=0L;            for(Long i=start;i&lt;end;i++)&#123;                sum+=i;            &#125;            return sum;        &#125;else&#123; //forkjoin 递归            long middle = (start+end)/2; //中间值            ForkJoinDemo task1 = new ForkJoinDemo(start,middle);            task1.fork(); //拆分任务，把任务压入线程队列            ForkJoinDemo task2 = new ForkJoinDemo(middle+1,end);            task2.fork();                        return task1.join()+task2.join();                    &#125;            &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;<span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;<span class=\"keyword\">import</span> java.util.concurrent.ForkJoinTask;<span class=\"keyword\">import</span> java.util.stream.LongStream;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;        <span class=\"comment\">//test1();        //test2();        test3();    &#125;    public static void test1()&#123;        Long sum = 0l;        long start = System.currentTimeMillis();        for (Long i = 1L;i&lt;=10_0000_0000;i++)&#123;            sum+=i;        &#125;        long end = System.currentTimeMillis();        System.out.println(&quot;sum=&quot;+sum+&quot;时间：&quot;+(end-start));    &#125;    //会使用ForkJoin    public static void test2() throws ExecutionException, InterruptedException &#123;        long start = System.currentTimeMillis();        ForkJoinPool forkJoinPool = new ForkJoinPool();        ForkJoinTask&lt;Long&gt; task = new ForkJoinDemo(0L,10_0000_0000L);        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task); //提交任务        Long sum = submit.get();        long end = System.currentTimeMillis();        System.out.println(&quot;sum=&quot;+sum+&quot;时间：&quot;+(end-start));    &#125;    public static void test3()&#123;        long start = System.currentTimeMillis();        //Stream并行流         long sum = LongStream.rangeClosed(0L,10_0000_0000).parallel().reduce(0,Long::sum);                long end=System.currentTimeMillis();        System.out.println(&quot;sum=&quot;+&quot;时间：&quot;+(end-start));            &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>异步回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kk;<span class=\"keyword\">import</span> java.util.concurrent.CompletableFuture;<span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;<span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo01</span> </span>&#123;    <span class=\"comment\">/*    异步调用：CompletableFuture    //异步执行    //成功回调    //失败回调     */</span>    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;     <span class=\"comment\">/*   //发起一个请求        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;            try &#123;                TimeUnit.SECONDS.sleep(2);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            System.out.println(Thread.currentThread().getName()+&quot;runAsync=&gt;Void&quot;);        &#125;);        System.out.println(&quot;1111&quot;);        completableFuture.get(); //获取阻塞执行结果        &#125;        */</span>    <span class=\"comment\">// 有返回值的supplyAsync 异步回调    // ajax 成功和失败的回调        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;            System.out.println(Thread.currentThread().getName()+&quot;supplyAsync=&gt;VInteger&quot;);            return 1024;        &#125;);        completableFuture.whenComplete((t,u)-&gt;&#123;            System.out.println(&quot;t-&gt;&quot;+t); //正常的返回结果            System.out.println(&quot;u-&gt;&quot;+u); //错误信息        &#125;).exceptionally((e)-&gt;&#123;            System.out.println(e.getMessage());            return 233; //可以获取到错误的返回结果         &#125;).get();    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h3><p>Volatile 是Java虚拟机提供轻量级的同步机制</p>\n<p>1.保证可见性</p>\n<p>2.不保证原子性</p>\n<p>3.禁止指令重排</p>\n<p>JMM：java内存模型，不存在的东西，属于概念，约定。</p>\n<p>关于JMM的一些同步的约定：</p>\n<p>1.线程解锁前，必须把共享变量立刻刷回主存</p>\n<p>2.线程加锁前，必须读取主存中的最新值到工作内存中</p>\n<p>3.加锁和解锁的是用一把锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kk;<span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JMMDemo</span> </span>&#123;    <span class=\"comment\">//不加volatile程序会进入死循环！ （保证可见性）    private volatile static int num = 0;    public static void main(String[] args) &#123; // main        new Thread(() -&gt; &#123;            while (num == 0) &#123;            &#125;        &#125;).start();        try &#123;            TimeUnit.SECONDS.sleep(1);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        num = 1;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>原子性：不可分割 （而volatile不保证原子性）</p>\n<p>​    使用原子类解决原子性问题</p>\n<p>单例模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉式单例public class Hungry &#123;        //可能会浪费空间    private byte[] data1 = new byte[1024*1024];    private byte[] data2 = new byte[1024*1024];    private byte[] data3 = new byte[1024*1024];    private byte[] data4 = new byte[1024*1024];        private Hungry()&#123;            &#125;  //构造器私有化        private final static Hungry HUNGRY = Hungry();        public static Hungry getInstance()&#123;        return HUNGRY;    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>懒汉式单例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyMan</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazyMan</span><span class=\"params\">()</span></span>&#123;    &#125;    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;        <span class=\"comment\">//双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() &#123;        if (lazyMan == null) &#123;            synchronized (LazyMan.class) &#123;                if (lazyMan == null) &#123;                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                &#125;            &#125;        &#125;            return lazyMan;            &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>静态内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态内部类public class Holder &#123;    private Holder()&#123;    &#125;    public static Holder getInstance()&#123;        return InnerClass.HOLDER;    &#125;        public static class InnerClass&#123;        private static final Holder HOLDER = new Holder();    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过反射破坏懒汉式单例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyMan</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazyMan</span><span class=\"params\">()</span></span>&#123;        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;OK&quot;</span>);    &#125;    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;    <span class=\"comment\">//双重检测锁模式的 懒汉式单例 DCL懒汉式    public static LazyMan getInstance() &#123;        if (lazyMan == null) &#123;            synchronized (LazyMan.class) &#123;                if (lazyMan == null) &#123;                    lazyMan = new LazyMan();  //不是一个原子性操作                    /*   1.分配内存空间                         2.执行构造方法，初始化对象                         3.把这个对象指向这个空间 （如果发生指令重排，会触发错误）                     */                &#125;            &#125;        &#125;            return lazyMan;    &#125;    //用反射破坏单例模式    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;        LazyMan instance = LazyMan.getInstance();        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);        declaredConstructor.setAccessible(true); //无视私有构造器        LazyMan instance2 = declaredConstructor.newInstance();        System.out.println(instance);        System.out.println(instance2);    &#125;        &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"mysql笔记","date":"2021-05-09T03:48:01.000Z","typora-copy-images-to":"./用Typora写Hexo博客","_content":"\n\n\n### 连接数据库\n\n命令行连接：\n\n```sql\nmysql -uroot -p //连接数据库\n\nflush privileges; --刷新权限\n\nshow databases; --查看所有数据库\n\nuse school； --切换数据库use数据库名\n\nshow tables； --查看数据库中所有的表\ndescribe student； --显示数据库中所有表的信息\n\ncreate database westos； --创建一个数据库\n\nexit； --退出连接\n```\n\n### 操作数据库\n\n```\nCREATE DATABASE if not exists hello\n\nDROP DATABASE IF EXISTS hello //删除\n\nUSE 123  //使用\n```\n\n\n\n\n\n建表：\n\n```sql\ncreate table if not exists `student` (\n`id` int(4) not null auto_increment comment `学号`,\n`name` varchar(30) not null default `匿名` comment `学号`,\n`pwd` varchar(30) not null default `123456` comment `密码`,\n`sex` varchar(30) not null default `女` comment `性别`,\n`birthday` datetime default null comment `出生日期`,\nprimary key(`id`)\n)engine=innodb default charset=utf8\n```\n\n\n\n常用命令：\n\n```\nshow create database school --查看创建数据库的语句\nshow create table student --查看student数据表的定义语句\ndesc student --查看表的结构\n```\n\n\n\n修改操作\n\n```sql\nALTER TABLE teacher RENAME AS teacher1 --修改表名\nALTER TABLE teacher ADD age INT(11) --增加表的字段\nALTER TABLE teacher1 MODIFY age VARCHAR(11) --修改表的字段（重命名）\nALTER TABLE tescher1 CHANGE age age1 INT(1) --修改约束\nALTER TABLE teacher1 DROP age1 --删除表的字段\n\nDROP TABLE IF EXISTS teacher1 --删除表\n```\n\n\n\n\n\n外键：\n\n\n\n注：删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）\n\n\n\n```sql\n--创建表的时候没有外键关系（添加外键）\nALTER TABLE `student`\nADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);\n```\n\n\n\n### DML语言\n\n\n\n添加：\n\n```sql\nINSERT INTO `grade`(`gradename`) VALUES(`大四`)\nINSERT INTO `grade`(`gradename`) VALUES(`大四`),(`大二`)\nINSERT INTO `grade`(`gradename`,`gradeid`) VALUES(`大四`,2)\n```\n\n修改：\n\n```sql\n--修改学员名字\nUPDATE `student` SET `name`=`小明`,`email`=`1123@qq.com` WHERE id=1;\nUPDATE `student` SET `name`=`小明`,`email`=`1123@qq.com` WHERE id BETWEEN 2 AND 5;\nUPDATE `student` SET `name`=`小明`,`email`=`1123@qq.com` WHERE id=1 AND sex=`女`;\n```\n\n删除：\n\n```\nTRUNCATE `student`  --清空student表\n\nDELETE FROM `student` WHERE id=1;\n```\n\n查询：\n\n```sql\n--查询全部\nSELECT * FROM student\n--查询指定字段\nSELECT `StudentNo`,`StudentName` FROM student\n--别名，给结果起一个名字\nSELECT `StudentNo` AS 学号,`StudentName` AS 学生姓名 FROM student AS S\n-- 函数 Concat(a,b)\nSELECT CONCAT(`姓名`，StudentName) AS 新名字 FROM student\n\nSELECT studentNo,`StudentResult` FROM result \nWHERE NOT studentNo=1000\n```\n\n去重：\n\n```sql\nSELECT * FROM result   -- 查询全部的考试成绩\nSELECT `StudentNo` FROM result   --查询有哪些同学参加了考试\nSELECT DISTINCT `StudentNo` FROM result  --发现重复数据，查重\n```\n\n\n\n考试成绩+1分查看\n\n```sql\nSELECT `StudentNo`,`StudentResult`+1 AS `提分后` FROM result\n```\n\n\n\n\n\n### 模糊查询\n\n```sql\n--查询姓刘的同学\n--like结合 %（代表0到任意个字符） \nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `刘%`\n\n--查询姓刘的同学，后面只带一个字的\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `刘_`\n\n--查询姓刘的同学，后面只带两个字的\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `刘__`\n\n--查询名字中间有嘉字的同学\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `%嘉%`\n\n```\n\n\n\n```sql\n--查询1001，1002，1003号成员\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentNo IN (1001,1002,1003);\n\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentNo IS NULL;\n```\n\n\n\n### 联表查询\n\n```sql\n--查询参加了考试的同学\nSELECT * FROM student\nSELECT * FROM result\n\n/* 思路\n1.分析需求，分析查询的字段来自哪些表，（连接查询）\n2.确定使用哪种连接查询？ 7种\n确定交叉点（这两个表中哪个数据是相同的）\n判断的条件：学生表中的studentNo = 成绩表 studentNo\n*/\n\nSELECT s.studentNO,studentName,SubjectNo,StudentResult\nFROM student AS s\nINNER JOIN result AS r\nWHERE s.studentNO = r.studentNO\n\n-- Right Join\nSELECT s.studentNO,studentName,SubjectNo,StudentResult\nFROM student AS r\nRIGHT JOIN result AS r\nON s.studentNO = r.studentNO\n\n-- Left Join\nSELECT s.studentNO,studentName,SubjectNo,StudentResult\nFROM student r\nLEFT JOIN result r\nON s.studentNO = r.studentNO\n\n\n\n--如：查询学员所属的年级（学号，学生的姓名，年级名称）\nSELECT studentNo,studentName,`GradeName`\nFROM student s\nINNER JOIN `grade` g\nON s.`GradeID` = g.`GradeID`\n```\n\n\n\n自连表：\n\n自己的表和自己的表连接，核心：一张表拆为两张一样的表即可\n\n```sql\n--查询父子信息\nSELECT a.`categoryName` AS `父栏目`,b.`categoryName` AS `子栏目`\nFROM `category` AS a,`category` AS b\nWHERE a.`categoryid`=b.`pid`\n```\n\n\n\n### 分页和排序\n\n```sql\nSELECT studentNo,studentName,`GradeName`\nFROM student s\nINNER JOIN `grade` g\nON s.`GradeID` = g.`GradeID`\nORDER BY StudentNo DESC  //降序\n\nSELECT studentNo,studentName,`GradeName`\nFROM student s\nINNER JOIN `grade` g\nON s.`GradeID` = g.`GradeID`\nORDER BY StudentNo ASC\nLIMIT 0，5 //0指的是当前页，5指的是页面的大小\n\n--第一页 limit 0,5\n--第二页 limit 5,5\n--第三页 limit 10,5\n...\n```\n\n\n\n子查询：\n\n```sql\n-- 查询 数据库结构-1 的所有考试结果\n-- 方式一：使用连接查询\nSELECT `StudentNo`,r.`SubjectNo`,`StudentResult`\nFROM `result` r\nINNER JOIN `subject` sub\nON r.SubjectNo = sub.SubjectNo\nWHERE SubjectName = `数据库结构-1`\nORDER BY StudentResult DESC\n\n-- 方式二：使用子查询（由里及外）\nSELECT `StudentNo`,`SubjectNo`,`StudentResult`\nFROM `result`\nWHERE SubjectNo = (\n\t\tSELECT SubjectNo FROM `subject`\n\t\tWHERE SubjectName = '数据库结构-1'\n)\nORDER BY StudentResult DESC\n\nSELECT StudentNo,StudentName FROM student WHERE StudentNo IN (\n    SELECT StudentNo FROM result WHERE StudentResult>80 AND SubjectNo = (\n    \tSELECT SubjectNo FROM `subject` WHERE `subjectName` = `高等数学-2`\n    )\n)\n```\n\n\n\n### MySQL函数\n\n```sql\n--数学运算\nSELECT ABS(-8)\nSELECT CEILING(9.4)\nSELECT FLOOR(9.4)\nSELECT RAND()\nSELECT SIGN(-10) --判断一个数的符号 负数返回-1 正数返回1 0返回0\n\n--字符串函数\nSELECT CHAR_LENGTH(`即使再小的帆也能远航`)  --字符串长度\nSELECT CONCAT('A','B','C') --拼接字符串\nSELECT INSERT('ABCD',1,2,'LLLL')--查询，替换 -- 换成LLLLCD(从某个位置开始替换某个长度)\nSELECT LOWER(...)\nSELECT UPPER(...)\nSELECT INSTR('abcdefg','c') --返回3\nSELECT REPLACE('ABCDEF','CD','cd')\nSELECT SUBSTR('ABCDEF',3,2) --返回CD  截取开始的位置，截取的长度（长度没给就截取到头）\nSELECT REVERSE(...)\n\n--例子\nSELECT REPLACE(studentname,'周','邹') FROM student\nWHERE studentname LIKE `周%`\n\n--时间与日期函数\nSELECT CURRENT_DATE() --获取当前日期\nSELECT CURDATE() --获取当前日期\nSELECT NOW() --获取当前的时间\nSELECT LOCALTIME() --本地时间\nSELECT SYSDATE() --系统时间\n\n--系统\nSELECT SYSTEM_USER()\nSELECT USER()\nSELECT VERSION()\n\n```\n\n\n\n\n\n聚合函数：\n\n```sql\nSELECT COUNT(studentname) FROM student; --Count(指定列) ,会忽略所有的null值\nSELECT COUNT(*) FROM student; --Count(*) ，不会忽略null值， 本质 计算行数\nSELECT COUNT(1) FROM result; --Count(1)，不会忽略null值， 本质 计算行数\n\nSELECT SUM('StudentResult') AS 总和 FROM result\nSELECT AVG('StudentResult') AS 平均分 FROM result\nSELECT MAX('StudentResult') AS 最高分 FROM result\nSELECT MIN('StudentResult') AS 最低分 FROM result\n```\n\n\n\n\n\n```sql\nSELECT SubjectName,AVG(StudentResult) AS 平均分，MAX(StudentResult),MIN(StudentResult)\nFROM result r\nINNER JOIN `subject` sub\nON r.`SubjectNo` = sub.`SubjectNo`\nGROUP BY r.SubjectNo --通过什么字段来分组\nHAVING 平均分>80 --分组后的过滤条件\n```\n\n\n\n### 事务\n\n事务：将一组SQL放到一个批次中去执行\n\n\n\n事务原则：ACID 原则\n\n原子性，一致性，隔离性，持久性  （脏读，幻读...）\n\n\n\n原子性：针对同一个事务，要么都完成，要么都失败\n\n一致性：针对一个事务操作前与操作后的状态一致（前后数据完整性要保证一致）\n\n持久性：表示事务结束后的数据不随着外界原因导致数据丢失（事务一旦提交就不可逆了）\n\n隔离性：针对多个用户同时操作，主要是排除其他事务对本次事务的影响\n\n（多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，不同事务要相互隔离）\n\n\n\n隔离所导致的问题：\n\n\n\n脏读：一个事务读取了另外一个事务未提交的数据\n\n不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。\n\n（这个不一定是错误，只是某些场合不对）\n\n幻读:一个事务内读取到了别的事务插入的数据，导致前后读取不一致\n\n（一般是行影响，多了一行）\n\n\n\n```sql\n--mysql 是默认开启事务自动提交的\nSET autocommit =0 /*关闭*/\nSET autocommit =1 /*开启（默认的）*/\n\n--收到处理事务\nSET autocommit = 0 --关闭自动提交\n\n--事务开启\nSTART TRANSACTION --标记一个事务的开始，从这个之后的sql都在同一个事务内\n\n--提交：持久化（成功！）\nCOMMIT\n--回滚：回到原来的样子（失败！）\nROLLBACK\n\n--事务结束\nSET autocommit = 1 --开启自动提交\n\n--了解\nSAVEPOINT 保存点名 --设置一个事务的保存点\nROLLBACK TO SAVEPOINT 保存点名 --回滚到保存点\nRELEASE SAVEPOINT 保存点名 -- 撤销保存点 \n```\n\n\n\n\n\n```sql\nCREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ci\nUSE shop\n\nCREATE TABLE `account`(\n`id` INT(3) NOT NULL AUTO_INCREMENT,\n`name` VARCHAR(30) NOT NULL,\n`money` DECIMAL(9,2) NOT NULL,\nPRIMARY KEY (`id`)\n)ENGINE=INNODB DEFAULT CHARSET=utf8\n\nINSERT INTO account(`name`,`money`)\nVALUES ('A',2000.00),(`B`,10000.00)\n\n--模拟转账：事务\nSET autocommit = 0;--关闭自动提交\nSTART TRANSACTION --开启一个事务\n\nUPDATE account SET money=money-500 WHERE `name`=`A` --A减500\nUPDATE account SET money=money+500 WHERE `name`=`B` --A加500\n\nCOMMIT; --提交事务，就被持久化了\nROLLBACK; --回滚\n\nSET autocommit = 1; --恢复默认值 \n```\n\n\n\n### 索引\n\n\n\n索引的分类：\n\n主键索引（PRIMARY KEY)  --唯一的标识，主键不可重复\n\n唯一索引  (UNIQUE KEY)  --避免重复的列的出现，唯一索引可以重复\n\n常规索引  (KEY/INDEX) --默认的，index. key关键字来设置\n\n全文索引  (FullText)  --快速定位数据\n\n\n\n```sql\n--索引的使用\n--1.在创建表的时候给字段增加索引\n--2.创建完毕后，增加索引\n\n--显示所有的索引信息\nSHOW INDEX FROM student\n\n--增加一个全文索引(索引名) 列名\nALTER TABLE school.student ADD FULLTEXT INDEX `studentName`(`studentName`);\n\n--EXPLAIN 分析sql执行的状况\n\nEXPLAIN SELECT * FROM student; --非全文索引\n\nEXPLAIN SELECT * FROM student WHERE MATCH(studentName) AGAINST(`刘`);\n```\n\n\n\n测试索引\n\n```sql\nCREATE INDEX id_app_user_name ON app_user(`name`); \n-- CREATE INDEX 索引名 ON 表（字段）\n\nSELECT * FROM app_user WHERE `name`=`用户9999`; --0.001 sec\n```\n\n\n\n\n\n### 权限管理和备份\n\n\n\n```\n--创建用户\nCREATE USER acow IDENTIFIED BY `123456`\n\n--修改密码（修改当前用户密码）\nSET PASSWORD=PASSWORD(`111111`)\n\n--修改密码（修改指定用户密码）\nSET PASSWORD FOR acow = PASSWORD(`111111`)\n\n--重命名\nRENAME USER acow TO acow337\n\n--用户授权\nGRANT ALL PRIVILEGES ON *.* TO acow337\n\n--查询权限\nSHOW GRANTS FOR acow337\nSHOW GRANTS FOR root@localhost\n\n--ROOT用户权限：GRANT ALL PRIVILEGES ON *.* TO `root`@`localhost` WITH GRANT OPTION\n\n--撤销权限 REVOKE \nREVOKE ALL PRIVILEGES ON *.* FROM acow337\n\n--删除用户\nDROP USER acow337\n```\n\n\n\n### MySQL备份\n\n\n\n```cmd\n--导出数据表（school是库名，student和result是表名）\nmysqldump -hlocalhost -uroot -p123456 school student result>D:/a.sql\n\n--导入\nmysql -uroot -p123456\nuse school\nsource d:/a.sql\n\n或者：\nmysql -u用户名 -p密码 库名<备份文件\n```\n\n\n\n\n\n### 三大范式\n\n第一范式：要求数据库表的每一列都是不可分割的原子数据项\n\n\n\n（前提：满足第一范式）\n\n第二范式：数据库表的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）\n\n \n\n（前提：满足第一 二范式）\n\n第三范式：确保数据表中的每一列数据都和主键直接相关，而不能间接相关\n\n\n\n### JDBC\n\n加载驱动->输入用户信息->创建连接->创建执行类->编写SQL语句->执行语句->释放连接\n\n```\npackage com.acow;\n\nimport java.sql.*;\n\n\tpublic class practice01 {\n    public static void main(String[] args) throws ClassNotFoundException, SQLException {\n        //1.加载驱动\n        //DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 不推荐这么用\n       Class.forName(\"com.mysql.jdbc.Driver\"); //固定写法，加载驱动\n\n        //2.用户信息和url\n        String   url=\"jdbc:mysql://localhost:3306/jdbcstudyuseUnicode=true&characterEncoding=utf8&useSSL=true\";\n        String username=\"root\";\n        String password=\"123456\";\n\n        //3.连接成功，数据库对象 Connection 代表数据库\n        Connection connection=DriverManager.getConnection(url,username,password);\n\n        //4.执行SQL的对象 Statement 执行sql的对象（执行类）\n        Statement statement = connection.createStatement();\n       \n\n        //5.执行SQL的对象，去执行SQL，可能存在结果，查看返回结果\n        String sql=\"SELECT * FROM users\";  //编写SQL\n\n        ResultSet resultSet = statement.executeQuery(sql);//返回的结果集,结果集中封装了我们全部的查询出来的结果\n        \n        while(resultSet.next()){\n            System.out.println(\"id=\"+resultSet.getObject(\"id\"));\n            System.out.println(\"id=\"+resultSet.getObject(\"NAME\"));\n            System.out.println(\"id=\"+resultSet.getObject(\"PASSWORD\"));\n        }\n        \n        //6.释放连接（必做！！）\n        resultSet.close();\n        statement.close();\n        connection.close();\n        \n        \n    }\n\n```\n\n\n\n\n\n```\nstatement.executeQuery(); //查询操作返回ResultSet\nstatement.execute(); //执行任何的SQL\nstatement.executeUpdate(); //更新 插入 删除 都是用这个 返回一个收影响的行数         \n```\n\n\n\n```\nresultSet.getObject();  //在不知道列类型的情况下使用\nresultSet.getString();\nresultSet.getInt();\nresultSet.getFloat();\nresultSet.getDate();\n\nresultSet.beforeFirst(); //移动到最前面\nresultSet.afterLast(); //移动到最后面\nresultSet.next(); //移动到下一个数据\nresultSet.previous(); //移动到前一行\nresultSet.absolute(row); //移动到指定行\n```\n\n\n\n\n\n\n\n在目录下创建文件db.properties\n\n```java\ndriver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/jdbcstudy\nusername=root\npassword=123456\n```\n\n\n\n编写工具类：\n\n```java\npackage com.acow;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\nimport static java.lang.System.getProperty;\n\npublic class JdbcUtils {\n    \n    private static String driver =null;\n    private static String url =null;\n    private static String username =null;\n    private static String password =null;\n\n    static {\n        try{\n           InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(\"db.properties\");\n            Properties properties = new Properties();\n            properties.load(in);\n            \n           driver= properties.getProperty(\"driver\");\n           url= properties.getProperty(\"url\");\n           username= properties.getProperty(\"username\");\n           password= properties.getProperty(\"password\");\n\n           //驱动只用加载一次 \n           Class.forName(driver);\n\n        }catch (IOException | ClassNotFoundException e){\n            e.printStackTrace();\n        }\n        \n    }\n    \n    //获取连接\n    public static Connection getConnection() throws SQLException {\n        \n        return DriverManager.getConnection(url,username,password);\n    }\n    \n    //释放连接资源\n    public static void release(Connection conn, Statement st, ResultSet rs){\n        if(rs!=null){\n            try {\n                rs.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n        if(st!=null){\n            try {\n                st.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n        if(rs!=null){\n            try {\n                rs.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n\n}\n\n```\n\n\n\n编写增删改：\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class TestInsert {\n    public static void main(String[] args) {\n        Connection conn=null;\n        Statement st=null;\n        ResultSet rs=null;\n\n        try {\n            conn=JdbcUtils.getConnection(); //获取数据库连接\n            st = conn.createStatement(); //获得SQL的执行对象\n            String sql=\"INSERT INTO users(id,`NAME`,`email`,`birthday`)\"+\n                    \"VALUES(4,'acow','123456','123qq.com','2020-01-01')\";\n            \n            int i = st.executeUpdate(sql);\n            if(i>0){\n                System.out.println(\"插入成功！\");\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n\n    }\n    \n}\n```\n\n查询：\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class TestSelect {\n    public static void main(String[] args) {\n        Connection conn=null;\n        Statement st=null;\n        ResultSet rs=null;\n\n        try {\n            conn=JdbcUtils.getConnection(); //获取数据库连接\n            st = conn.createStatement(); //获得SQL的执行对象\n            String sql=\"select * from users where id = 1\";\n            \n            rs=st.executeQuery(\"sql\"); //查询完会返回一个结果集\n            \n            while(rs.next()){\n                System.out.println(rs.getString(\"NAME\"));\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n\n    }\n\n}\n```\n\n\n\nprepareStatement\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.sql.rowset.JdbcRowSet;\nimport javax.xml.transform.Result;\nimport java.sql.*;\n\npublic class TestInsert {\n    public static void main(String[] args) {\n        Connection conn=null;\n        PreparedStatement st=null;\n\n        try {\n            conn = JdbcUtils.getConnection();\n            \n            //区别\n            //使用？占位符代替参数\n            String sql = \"insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)\";\n            \n            st = conn.prepareStatement(sql); //预编译SQL,先写sql,然后不执行\n            \n            //手动给参数赋值\n            st.setInt(1,4);\n            st.setString(2,\"acow\");\n            st.setString(3,\"123456\");\n            st.setString(4,\"34221@qq.com\");\n            //注意点： sql.Date  数据库\n            //       util.Date   Java     new Date().getTime() 获得时间戳\n            st.setDate(5,new java.sql.Date(new Date().getTime()));\n            \n            //执行\n            int i=st.executeUpdate();\n            if(i>0){\n                System.out.println(\"插入成功！\");\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally{\n            JdbcUtils.release(conn,st,null);\n        }\n    }\n}\n```\n\n\n\n\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class TestSelect {\n    public static void main(String[] args) {\n        Connection conn=null;\n        PreparedStatement st=null;\n        ResultSet rs=null;\n\n        try {\n            conn=JdbcUtils.getConnection();\n            //PreparedStatement 防止SQL注入的本质，把传递进来的参数当作字符\n            //假设其中存在转义字符，比如说''就会直接被转移\n            \n            String sql=\"select * from users where id=?\"; //编写SQL\n            \n            st = conn.prepareStatement(sql); //预编译\n            \n            st.setInt(1,1); //传递参数\n            \n            rs=st.executeQuery(); //执行\n            \n            if(rs.next()) {\n                System.out.println(rs.getString(\"NAME\"));\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n\n\n    }\n\n    }\n\n}\n```\n\n\n\n\n\n```java\npackage Test;\n\nimport com.acow.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class TestTransaction1 {\n\n    public static void main(String[] args) {\n        Connection conn=null;\n        PreparedStatement st= null;\n        ResultSet rs=null;\n\n        try {\n            conn= JdbcUtils.getConnection();\n            //关闭数据库的自动提交，自动会开启事务\n            conn.setAutoCommit(false); //开启事务\n            \n            String sql1=\"update account set money = money-100 where name='A\";\n            st=conn.prepareStatement(sql1);\n            st.executeUpdate();\n            \n            String sql2=\"update account set money = money+100 where name='B'\";\n            st=conn.prepareStatement(sql1);\n            st.executeUpdate();\n            \n            //业务完毕，提交事务\n            conn.commit();\n            System.out.println(\"成功\");\n            \n        } catch (Exception e) {\n            try {\n                conn.rollback(); //如果失败则回滚事务\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n    }\n}\n```","source":"_posts/mysql笔记.md","raw":"---\ntitle: mysql笔记\ndate: 2021-05-09 11:48:01\ntags:\ntypora-copy-images-to: ./用Typora写Hexo博客\ncategories: mysql\n---\n\n\n\n### 连接数据库\n\n命令行连接：\n\n```sql\nmysql -uroot -p //连接数据库\n\nflush privileges; --刷新权限\n\nshow databases; --查看所有数据库\n\nuse school； --切换数据库use数据库名\n\nshow tables； --查看数据库中所有的表\ndescribe student； --显示数据库中所有表的信息\n\ncreate database westos； --创建一个数据库\n\nexit； --退出连接\n```\n\n### 操作数据库\n\n```\nCREATE DATABASE if not exists hello\n\nDROP DATABASE IF EXISTS hello //删除\n\nUSE 123  //使用\n```\n\n\n\n\n\n建表：\n\n```sql\ncreate table if not exists `student` (\n`id` int(4) not null auto_increment comment `学号`,\n`name` varchar(30) not null default `匿名` comment `学号`,\n`pwd` varchar(30) not null default `123456` comment `密码`,\n`sex` varchar(30) not null default `女` comment `性别`,\n`birthday` datetime default null comment `出生日期`,\nprimary key(`id`)\n)engine=innodb default charset=utf8\n```\n\n\n\n常用命令：\n\n```\nshow create database school --查看创建数据库的语句\nshow create table student --查看student数据表的定义语句\ndesc student --查看表的结构\n```\n\n\n\n修改操作\n\n```sql\nALTER TABLE teacher RENAME AS teacher1 --修改表名\nALTER TABLE teacher ADD age INT(11) --增加表的字段\nALTER TABLE teacher1 MODIFY age VARCHAR(11) --修改表的字段（重命名）\nALTER TABLE tescher1 CHANGE age age1 INT(1) --修改约束\nALTER TABLE teacher1 DROP age1 --删除表的字段\n\nDROP TABLE IF EXISTS teacher1 --删除表\n```\n\n\n\n\n\n外键：\n\n\n\n注：删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）\n\n\n\n```sql\n--创建表的时候没有外键关系（添加外键）\nALTER TABLE `student`\nADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);\n```\n\n\n\n### DML语言\n\n\n\n添加：\n\n```sql\nINSERT INTO `grade`(`gradename`) VALUES(`大四`)\nINSERT INTO `grade`(`gradename`) VALUES(`大四`),(`大二`)\nINSERT INTO `grade`(`gradename`,`gradeid`) VALUES(`大四`,2)\n```\n\n修改：\n\n```sql\n--修改学员名字\nUPDATE `student` SET `name`=`小明`,`email`=`1123@qq.com` WHERE id=1;\nUPDATE `student` SET `name`=`小明`,`email`=`1123@qq.com` WHERE id BETWEEN 2 AND 5;\nUPDATE `student` SET `name`=`小明`,`email`=`1123@qq.com` WHERE id=1 AND sex=`女`;\n```\n\n删除：\n\n```\nTRUNCATE `student`  --清空student表\n\nDELETE FROM `student` WHERE id=1;\n```\n\n查询：\n\n```sql\n--查询全部\nSELECT * FROM student\n--查询指定字段\nSELECT `StudentNo`,`StudentName` FROM student\n--别名，给结果起一个名字\nSELECT `StudentNo` AS 学号,`StudentName` AS 学生姓名 FROM student AS S\n-- 函数 Concat(a,b)\nSELECT CONCAT(`姓名`，StudentName) AS 新名字 FROM student\n\nSELECT studentNo,`StudentResult` FROM result \nWHERE NOT studentNo=1000\n```\n\n去重：\n\n```sql\nSELECT * FROM result   -- 查询全部的考试成绩\nSELECT `StudentNo` FROM result   --查询有哪些同学参加了考试\nSELECT DISTINCT `StudentNo` FROM result  --发现重复数据，查重\n```\n\n\n\n考试成绩+1分查看\n\n```sql\nSELECT `StudentNo`,`StudentResult`+1 AS `提分后` FROM result\n```\n\n\n\n\n\n### 模糊查询\n\n```sql\n--查询姓刘的同学\n--like结合 %（代表0到任意个字符） \nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `刘%`\n\n--查询姓刘的同学，后面只带一个字的\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `刘_`\n\n--查询姓刘的同学，后面只带两个字的\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `刘__`\n\n--查询名字中间有嘉字的同学\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentName LIKE `%嘉%`\n\n```\n\n\n\n```sql\n--查询1001，1002，1003号成员\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentNo IN (1001,1002,1003);\n\nSELECT `StudentNo`,`StudentName` FROM `student`\nWHERE StudentNo IS NULL;\n```\n\n\n\n### 联表查询\n\n```sql\n--查询参加了考试的同学\nSELECT * FROM student\nSELECT * FROM result\n\n/* 思路\n1.分析需求，分析查询的字段来自哪些表，（连接查询）\n2.确定使用哪种连接查询？ 7种\n确定交叉点（这两个表中哪个数据是相同的）\n判断的条件：学生表中的studentNo = 成绩表 studentNo\n*/\n\nSELECT s.studentNO,studentName,SubjectNo,StudentResult\nFROM student AS s\nINNER JOIN result AS r\nWHERE s.studentNO = r.studentNO\n\n-- Right Join\nSELECT s.studentNO,studentName,SubjectNo,StudentResult\nFROM student AS r\nRIGHT JOIN result AS r\nON s.studentNO = r.studentNO\n\n-- Left Join\nSELECT s.studentNO,studentName,SubjectNo,StudentResult\nFROM student r\nLEFT JOIN result r\nON s.studentNO = r.studentNO\n\n\n\n--如：查询学员所属的年级（学号，学生的姓名，年级名称）\nSELECT studentNo,studentName,`GradeName`\nFROM student s\nINNER JOIN `grade` g\nON s.`GradeID` = g.`GradeID`\n```\n\n\n\n自连表：\n\n自己的表和自己的表连接，核心：一张表拆为两张一样的表即可\n\n```sql\n--查询父子信息\nSELECT a.`categoryName` AS `父栏目`,b.`categoryName` AS `子栏目`\nFROM `category` AS a,`category` AS b\nWHERE a.`categoryid`=b.`pid`\n```\n\n\n\n### 分页和排序\n\n```sql\nSELECT studentNo,studentName,`GradeName`\nFROM student s\nINNER JOIN `grade` g\nON s.`GradeID` = g.`GradeID`\nORDER BY StudentNo DESC  //降序\n\nSELECT studentNo,studentName,`GradeName`\nFROM student s\nINNER JOIN `grade` g\nON s.`GradeID` = g.`GradeID`\nORDER BY StudentNo ASC\nLIMIT 0，5 //0指的是当前页，5指的是页面的大小\n\n--第一页 limit 0,5\n--第二页 limit 5,5\n--第三页 limit 10,5\n...\n```\n\n\n\n子查询：\n\n```sql\n-- 查询 数据库结构-1 的所有考试结果\n-- 方式一：使用连接查询\nSELECT `StudentNo`,r.`SubjectNo`,`StudentResult`\nFROM `result` r\nINNER JOIN `subject` sub\nON r.SubjectNo = sub.SubjectNo\nWHERE SubjectName = `数据库结构-1`\nORDER BY StudentResult DESC\n\n-- 方式二：使用子查询（由里及外）\nSELECT `StudentNo`,`SubjectNo`,`StudentResult`\nFROM `result`\nWHERE SubjectNo = (\n\t\tSELECT SubjectNo FROM `subject`\n\t\tWHERE SubjectName = '数据库结构-1'\n)\nORDER BY StudentResult DESC\n\nSELECT StudentNo,StudentName FROM student WHERE StudentNo IN (\n    SELECT StudentNo FROM result WHERE StudentResult>80 AND SubjectNo = (\n    \tSELECT SubjectNo FROM `subject` WHERE `subjectName` = `高等数学-2`\n    )\n)\n```\n\n\n\n### MySQL函数\n\n```sql\n--数学运算\nSELECT ABS(-8)\nSELECT CEILING(9.4)\nSELECT FLOOR(9.4)\nSELECT RAND()\nSELECT SIGN(-10) --判断一个数的符号 负数返回-1 正数返回1 0返回0\n\n--字符串函数\nSELECT CHAR_LENGTH(`即使再小的帆也能远航`)  --字符串长度\nSELECT CONCAT('A','B','C') --拼接字符串\nSELECT INSERT('ABCD',1,2,'LLLL')--查询，替换 -- 换成LLLLCD(从某个位置开始替换某个长度)\nSELECT LOWER(...)\nSELECT UPPER(...)\nSELECT INSTR('abcdefg','c') --返回3\nSELECT REPLACE('ABCDEF','CD','cd')\nSELECT SUBSTR('ABCDEF',3,2) --返回CD  截取开始的位置，截取的长度（长度没给就截取到头）\nSELECT REVERSE(...)\n\n--例子\nSELECT REPLACE(studentname,'周','邹') FROM student\nWHERE studentname LIKE `周%`\n\n--时间与日期函数\nSELECT CURRENT_DATE() --获取当前日期\nSELECT CURDATE() --获取当前日期\nSELECT NOW() --获取当前的时间\nSELECT LOCALTIME() --本地时间\nSELECT SYSDATE() --系统时间\n\n--系统\nSELECT SYSTEM_USER()\nSELECT USER()\nSELECT VERSION()\n\n```\n\n\n\n\n\n聚合函数：\n\n```sql\nSELECT COUNT(studentname) FROM student; --Count(指定列) ,会忽略所有的null值\nSELECT COUNT(*) FROM student; --Count(*) ，不会忽略null值， 本质 计算行数\nSELECT COUNT(1) FROM result; --Count(1)，不会忽略null值， 本质 计算行数\n\nSELECT SUM('StudentResult') AS 总和 FROM result\nSELECT AVG('StudentResult') AS 平均分 FROM result\nSELECT MAX('StudentResult') AS 最高分 FROM result\nSELECT MIN('StudentResult') AS 最低分 FROM result\n```\n\n\n\n\n\n```sql\nSELECT SubjectName,AVG(StudentResult) AS 平均分，MAX(StudentResult),MIN(StudentResult)\nFROM result r\nINNER JOIN `subject` sub\nON r.`SubjectNo` = sub.`SubjectNo`\nGROUP BY r.SubjectNo --通过什么字段来分组\nHAVING 平均分>80 --分组后的过滤条件\n```\n\n\n\n### 事务\n\n事务：将一组SQL放到一个批次中去执行\n\n\n\n事务原则：ACID 原则\n\n原子性，一致性，隔离性，持久性  （脏读，幻读...）\n\n\n\n原子性：针对同一个事务，要么都完成，要么都失败\n\n一致性：针对一个事务操作前与操作后的状态一致（前后数据完整性要保证一致）\n\n持久性：表示事务结束后的数据不随着外界原因导致数据丢失（事务一旦提交就不可逆了）\n\n隔离性：针对多个用户同时操作，主要是排除其他事务对本次事务的影响\n\n（多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，不同事务要相互隔离）\n\n\n\n隔离所导致的问题：\n\n\n\n脏读：一个事务读取了另外一个事务未提交的数据\n\n不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。\n\n（这个不一定是错误，只是某些场合不对）\n\n幻读:一个事务内读取到了别的事务插入的数据，导致前后读取不一致\n\n（一般是行影响，多了一行）\n\n\n\n```sql\n--mysql 是默认开启事务自动提交的\nSET autocommit =0 /*关闭*/\nSET autocommit =1 /*开启（默认的）*/\n\n--收到处理事务\nSET autocommit = 0 --关闭自动提交\n\n--事务开启\nSTART TRANSACTION --标记一个事务的开始，从这个之后的sql都在同一个事务内\n\n--提交：持久化（成功！）\nCOMMIT\n--回滚：回到原来的样子（失败！）\nROLLBACK\n\n--事务结束\nSET autocommit = 1 --开启自动提交\n\n--了解\nSAVEPOINT 保存点名 --设置一个事务的保存点\nROLLBACK TO SAVEPOINT 保存点名 --回滚到保存点\nRELEASE SAVEPOINT 保存点名 -- 撤销保存点 \n```\n\n\n\n\n\n```sql\nCREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ci\nUSE shop\n\nCREATE TABLE `account`(\n`id` INT(3) NOT NULL AUTO_INCREMENT,\n`name` VARCHAR(30) NOT NULL,\n`money` DECIMAL(9,2) NOT NULL,\nPRIMARY KEY (`id`)\n)ENGINE=INNODB DEFAULT CHARSET=utf8\n\nINSERT INTO account(`name`,`money`)\nVALUES ('A',2000.00),(`B`,10000.00)\n\n--模拟转账：事务\nSET autocommit = 0;--关闭自动提交\nSTART TRANSACTION --开启一个事务\n\nUPDATE account SET money=money-500 WHERE `name`=`A` --A减500\nUPDATE account SET money=money+500 WHERE `name`=`B` --A加500\n\nCOMMIT; --提交事务，就被持久化了\nROLLBACK; --回滚\n\nSET autocommit = 1; --恢复默认值 \n```\n\n\n\n### 索引\n\n\n\n索引的分类：\n\n主键索引（PRIMARY KEY)  --唯一的标识，主键不可重复\n\n唯一索引  (UNIQUE KEY)  --避免重复的列的出现，唯一索引可以重复\n\n常规索引  (KEY/INDEX) --默认的，index. key关键字来设置\n\n全文索引  (FullText)  --快速定位数据\n\n\n\n```sql\n--索引的使用\n--1.在创建表的时候给字段增加索引\n--2.创建完毕后，增加索引\n\n--显示所有的索引信息\nSHOW INDEX FROM student\n\n--增加一个全文索引(索引名) 列名\nALTER TABLE school.student ADD FULLTEXT INDEX `studentName`(`studentName`);\n\n--EXPLAIN 分析sql执行的状况\n\nEXPLAIN SELECT * FROM student; --非全文索引\n\nEXPLAIN SELECT * FROM student WHERE MATCH(studentName) AGAINST(`刘`);\n```\n\n\n\n测试索引\n\n```sql\nCREATE INDEX id_app_user_name ON app_user(`name`); \n-- CREATE INDEX 索引名 ON 表（字段）\n\nSELECT * FROM app_user WHERE `name`=`用户9999`; --0.001 sec\n```\n\n\n\n\n\n### 权限管理和备份\n\n\n\n```\n--创建用户\nCREATE USER acow IDENTIFIED BY `123456`\n\n--修改密码（修改当前用户密码）\nSET PASSWORD=PASSWORD(`111111`)\n\n--修改密码（修改指定用户密码）\nSET PASSWORD FOR acow = PASSWORD(`111111`)\n\n--重命名\nRENAME USER acow TO acow337\n\n--用户授权\nGRANT ALL PRIVILEGES ON *.* TO acow337\n\n--查询权限\nSHOW GRANTS FOR acow337\nSHOW GRANTS FOR root@localhost\n\n--ROOT用户权限：GRANT ALL PRIVILEGES ON *.* TO `root`@`localhost` WITH GRANT OPTION\n\n--撤销权限 REVOKE \nREVOKE ALL PRIVILEGES ON *.* FROM acow337\n\n--删除用户\nDROP USER acow337\n```\n\n\n\n### MySQL备份\n\n\n\n```cmd\n--导出数据表（school是库名，student和result是表名）\nmysqldump -hlocalhost -uroot -p123456 school student result>D:/a.sql\n\n--导入\nmysql -uroot -p123456\nuse school\nsource d:/a.sql\n\n或者：\nmysql -u用户名 -p密码 库名<备份文件\n```\n\n\n\n\n\n### 三大范式\n\n第一范式：要求数据库表的每一列都是不可分割的原子数据项\n\n\n\n（前提：满足第一范式）\n\n第二范式：数据库表的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）\n\n \n\n（前提：满足第一 二范式）\n\n第三范式：确保数据表中的每一列数据都和主键直接相关，而不能间接相关\n\n\n\n### JDBC\n\n加载驱动->输入用户信息->创建连接->创建执行类->编写SQL语句->执行语句->释放连接\n\n```\npackage com.acow;\n\nimport java.sql.*;\n\n\tpublic class practice01 {\n    public static void main(String[] args) throws ClassNotFoundException, SQLException {\n        //1.加载驱动\n        //DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 不推荐这么用\n       Class.forName(\"com.mysql.jdbc.Driver\"); //固定写法，加载驱动\n\n        //2.用户信息和url\n        String   url=\"jdbc:mysql://localhost:3306/jdbcstudyuseUnicode=true&characterEncoding=utf8&useSSL=true\";\n        String username=\"root\";\n        String password=\"123456\";\n\n        //3.连接成功，数据库对象 Connection 代表数据库\n        Connection connection=DriverManager.getConnection(url,username,password);\n\n        //4.执行SQL的对象 Statement 执行sql的对象（执行类）\n        Statement statement = connection.createStatement();\n       \n\n        //5.执行SQL的对象，去执行SQL，可能存在结果，查看返回结果\n        String sql=\"SELECT * FROM users\";  //编写SQL\n\n        ResultSet resultSet = statement.executeQuery(sql);//返回的结果集,结果集中封装了我们全部的查询出来的结果\n        \n        while(resultSet.next()){\n            System.out.println(\"id=\"+resultSet.getObject(\"id\"));\n            System.out.println(\"id=\"+resultSet.getObject(\"NAME\"));\n            System.out.println(\"id=\"+resultSet.getObject(\"PASSWORD\"));\n        }\n        \n        //6.释放连接（必做！！）\n        resultSet.close();\n        statement.close();\n        connection.close();\n        \n        \n    }\n\n```\n\n\n\n\n\n```\nstatement.executeQuery(); //查询操作返回ResultSet\nstatement.execute(); //执行任何的SQL\nstatement.executeUpdate(); //更新 插入 删除 都是用这个 返回一个收影响的行数         \n```\n\n\n\n```\nresultSet.getObject();  //在不知道列类型的情况下使用\nresultSet.getString();\nresultSet.getInt();\nresultSet.getFloat();\nresultSet.getDate();\n\nresultSet.beforeFirst(); //移动到最前面\nresultSet.afterLast(); //移动到最后面\nresultSet.next(); //移动到下一个数据\nresultSet.previous(); //移动到前一行\nresultSet.absolute(row); //移动到指定行\n```\n\n\n\n\n\n\n\n在目录下创建文件db.properties\n\n```java\ndriver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/jdbcstudy\nusername=root\npassword=123456\n```\n\n\n\n编写工具类：\n\n```java\npackage com.acow;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\nimport static java.lang.System.getProperty;\n\npublic class JdbcUtils {\n    \n    private static String driver =null;\n    private static String url =null;\n    private static String username =null;\n    private static String password =null;\n\n    static {\n        try{\n           InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(\"db.properties\");\n            Properties properties = new Properties();\n            properties.load(in);\n            \n           driver= properties.getProperty(\"driver\");\n           url= properties.getProperty(\"url\");\n           username= properties.getProperty(\"username\");\n           password= properties.getProperty(\"password\");\n\n           //驱动只用加载一次 \n           Class.forName(driver);\n\n        }catch (IOException | ClassNotFoundException e){\n            e.printStackTrace();\n        }\n        \n    }\n    \n    //获取连接\n    public static Connection getConnection() throws SQLException {\n        \n        return DriverManager.getConnection(url,username,password);\n    }\n    \n    //释放连接资源\n    public static void release(Connection conn, Statement st, ResultSet rs){\n        if(rs!=null){\n            try {\n                rs.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n        if(st!=null){\n            try {\n                st.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n        if(rs!=null){\n            try {\n                rs.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n\n}\n\n```\n\n\n\n编写增删改：\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class TestInsert {\n    public static void main(String[] args) {\n        Connection conn=null;\n        Statement st=null;\n        ResultSet rs=null;\n\n        try {\n            conn=JdbcUtils.getConnection(); //获取数据库连接\n            st = conn.createStatement(); //获得SQL的执行对象\n            String sql=\"INSERT INTO users(id,`NAME`,`email`,`birthday`)\"+\n                    \"VALUES(4,'acow','123456','123qq.com','2020-01-01')\";\n            \n            int i = st.executeUpdate(sql);\n            if(i>0){\n                System.out.println(\"插入成功！\");\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n\n    }\n    \n}\n```\n\n查询：\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class TestSelect {\n    public static void main(String[] args) {\n        Connection conn=null;\n        Statement st=null;\n        ResultSet rs=null;\n\n        try {\n            conn=JdbcUtils.getConnection(); //获取数据库连接\n            st = conn.createStatement(); //获得SQL的执行对象\n            String sql=\"select * from users where id = 1\";\n            \n            rs=st.executeQuery(\"sql\"); //查询完会返回一个结果集\n            \n            while(rs.next()){\n                System.out.println(rs.getString(\"NAME\"));\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n\n    }\n\n}\n```\n\n\n\nprepareStatement\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.sql.rowset.JdbcRowSet;\nimport javax.xml.transform.Result;\nimport java.sql.*;\n\npublic class TestInsert {\n    public static void main(String[] args) {\n        Connection conn=null;\n        PreparedStatement st=null;\n\n        try {\n            conn = JdbcUtils.getConnection();\n            \n            //区别\n            //使用？占位符代替参数\n            String sql = \"insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)\";\n            \n            st = conn.prepareStatement(sql); //预编译SQL,先写sql,然后不执行\n            \n            //手动给参数赋值\n            st.setInt(1,4);\n            st.setString(2,\"acow\");\n            st.setString(3,\"123456\");\n            st.setString(4,\"34221@qq.com\");\n            //注意点： sql.Date  数据库\n            //       util.Date   Java     new Date().getTime() 获得时间戳\n            st.setDate(5,new java.sql.Date(new Date().getTime()));\n            \n            //执行\n            int i=st.executeUpdate();\n            if(i>0){\n                System.out.println(\"插入成功！\");\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally{\n            JdbcUtils.release(conn,st,null);\n        }\n    }\n}\n```\n\n\n\n\n\n```java\npackage Test;\nimport com.acow.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class TestSelect {\n    public static void main(String[] args) {\n        Connection conn=null;\n        PreparedStatement st=null;\n        ResultSet rs=null;\n\n        try {\n            conn=JdbcUtils.getConnection();\n            //PreparedStatement 防止SQL注入的本质，把传递进来的参数当作字符\n            //假设其中存在转义字符，比如说''就会直接被转移\n            \n            String sql=\"select * from users where id=?\"; //编写SQL\n            \n            st = conn.prepareStatement(sql); //预编译\n            \n            st.setInt(1,1); //传递参数\n            \n            rs=st.executeQuery(); //执行\n            \n            if(rs.next()) {\n                System.out.println(rs.getString(\"NAME\"));\n            }\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n\n\n    }\n\n    }\n\n}\n```\n\n\n\n\n\n```java\npackage Test;\n\nimport com.acow.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class TestTransaction1 {\n\n    public static void main(String[] args) {\n        Connection conn=null;\n        PreparedStatement st= null;\n        ResultSet rs=null;\n\n        try {\n            conn= JdbcUtils.getConnection();\n            //关闭数据库的自动提交，自动会开启事务\n            conn.setAutoCommit(false); //开启事务\n            \n            String sql1=\"update account set money = money-100 where name='A\";\n            st=conn.prepareStatement(sql1);\n            st.executeUpdate();\n            \n            String sql2=\"update account set money = money+100 where name='B'\";\n            st=conn.prepareStatement(sql1);\n            st.executeUpdate();\n            \n            //业务完毕，提交事务\n            conn.commit();\n            System.out.println(\"成功\");\n            \n        } catch (Exception e) {\n            try {\n                conn.rollback(); //如果失败则回滚事务\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.release(conn,st,rs);\n        }\n    }\n}\n```","slug":"mysql笔记","published":1,"updated":"2021-05-09T04:46:45.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckogykg390002k2709hc19dfo","content":"<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>命令行连接：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>uroot <span class=\"operator\">-</span>p <span class=\"operator\">/</span><span class=\"operator\">/</span>连接数据库</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges; <span class=\"comment\">--刷新权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> databases; <span class=\"comment\">--查看所有数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">use school； <span class=\"comment\">--切换数据库use数据库名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> tables； <span class=\"comment\">--查看数据库中所有的表</span></span><br><span class=\"line\"><span class=\"keyword\">describe</span> student； <span class=\"comment\">--显示数据库中所有表的信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> database westos； <span class=\"comment\">--创建一个数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">exit； <span class=\"comment\">--退出连接</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE if not exists hello</span><br><span class=\"line\"></span><br><span class=\"line\">DROP DATABASE IF EXISTS hello //删除</span><br><span class=\"line\"></span><br><span class=\"line\">USE 123  //使用</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>建表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> `student` (</span><br><span class=\"line\">`id` <span class=\"type\">int</span>(<span class=\"number\">4</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> auto_increment comment `学号`,</span><br><span class=\"line\">`name` <span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">default</span> `匿名` comment `学号`,</span><br><span class=\"line\">`pwd` <span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">default</span> `<span class=\"number\">123456</span>` comment `密码`,</span><br><span class=\"line\">`sex` <span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">default</span> `女` comment `性别`,</span><br><span class=\"line\">`birthday` datetime <span class=\"keyword\">default</span> <span class=\"keyword\">null</span> comment `出生日期`,</span><br><span class=\"line\"><span class=\"keyword\">primary</span> key(`id`)</span><br><span class=\"line\">)engine<span class=\"operator\">=</span>innodb <span class=\"keyword\">default</span> charset<span class=\"operator\">=</span>utf8</span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create database school --查看创建数据库的语句</span><br><span class=\"line\">show create table student --查看student数据表的定义语句</span><br><span class=\"line\">desc student --查看表的结构</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher RENAME <span class=\"keyword\">AS</span> teacher1 <span class=\"comment\">--修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher <span class=\"keyword\">ADD</span> age <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"comment\">--增加表的字段</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher1 MODIFY age <span class=\"type\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"comment\">--修改表的字段（重命名）</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tescher1 CHANGE age age1 <span class=\"type\">INT</span>(<span class=\"number\">1</span>) <span class=\"comment\">--修改约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher1 <span class=\"keyword\">DROP</span> age1 <span class=\"comment\">--删除表的字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> teacher1 <span class=\"comment\">--删除表</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>外键：</p>\n<p>注：删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表的时候没有外键关系（添加外键）</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> `FK_gradeid` <span class=\"keyword\">FOREIGN</span> KEY(`gradeid`) <span class=\"keyword\">REFERENCES</span> `grade`(`gradeid`);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h3><p>添加：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `grade`(`gradename`) <span class=\"keyword\">VALUES</span>(`大四`)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `grade`(`gradename`) <span class=\"keyword\">VALUES</span>(`大四`),(`大二`)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `grade`(`gradename`,`gradeid`) <span class=\"keyword\">VALUES</span>(`大四`,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--修改学员名字</span></span><br><span class=\"line\">UPDATE `student` <span class=\"keyword\">SET</span> `name`<span class=\"operator\">=</span>`小明`,`email`<span class=\"operator\">=</span>`<span class=\"number\">1123</span><span class=\"variable\">@qq</span>.com` <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">UPDATE `student` <span class=\"keyword\">SET</span> `name`<span class=\"operator\">=</span>`小明`,`email`<span class=\"operator\">=</span>`<span class=\"number\">1123</span><span class=\"variable\">@qq</span>.com` <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">2</span> <span class=\"keyword\">AND</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">UPDATE `student` <span class=\"keyword\">SET</span> `name`<span class=\"operator\">=</span>`小明`,`email`<span class=\"operator\">=</span>`<span class=\"number\">1123</span><span class=\"variable\">@qq</span>.com` <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> sex<span class=\"operator\">=</span>`女`;</span><br></pre></td></tr></table></figure>\n\n<p>删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TRUNCATE `student`  --清空student表</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE FROM `student` WHERE id=1;</span><br></pre></td></tr></table></figure>\n\n<p>查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询全部</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"comment\">--查询指定字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"comment\">--别名，给结果起一个名字</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo` <span class=\"keyword\">AS</span> 学号,`StudentName` <span class=\"keyword\">AS</span> 学生姓名 <span class=\"keyword\">FROM</span> student <span class=\"keyword\">AS</span> S</span><br><span class=\"line\"><span class=\"comment\">-- 函数 Concat(a,b)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(`姓名`，StudentName) <span class=\"keyword\">AS</span> 新名字 <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,`StudentResult` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span> </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> studentNo<span class=\"operator\">=</span><span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p>去重：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>   <span class=\"comment\">-- 查询全部的考试成绩</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>   <span class=\"comment\">--查询有哪些同学参加了考试</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> `StudentNo` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>  <span class=\"comment\">--发现重复数据，查重</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>考试成绩+1分查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentResult`<span class=\"operator\">+</span><span class=\"number\">1</span> <span class=\"keyword\">AS</span> `提分后` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询姓刘的同学</span></span><br><span class=\"line\"><span class=\"comment\">--like结合 %（代表0到任意个字符） </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `刘<span class=\"operator\">%</span>`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询姓刘的同学，后面只带一个字的</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `刘_`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询姓刘的同学，后面只带两个字的</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `刘__`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询名字中间有嘉字的同学</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `<span class=\"operator\">%</span>嘉<span class=\"operator\">%</span>`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询1001，1002，1003号成员</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentNo <span class=\"keyword\">IN</span> (<span class=\"number\">1001</span>,<span class=\"number\">1002</span>,<span class=\"number\">1003</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentNo <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"联表查询\"><a href=\"#联表查询\" class=\"headerlink\" title=\"联表查询\"></a>联表查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询参加了考试的同学</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 思路</span></span><br><span class=\"line\"><span class=\"comment\">1.分析需求，分析查询的字段来自哪些表，（连接查询）</span></span><br><span class=\"line\"><span class=\"comment\">2.确定使用哪种连接查询？ 7种</span></span><br><span class=\"line\"><span class=\"comment\">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class=\"line\"><span class=\"comment\">判断的条件：学生表中的studentNo = 成绩表 studentNo</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.studentNO,studentName,SubjectNo,StudentResult</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student <span class=\"keyword\">AS</span> s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">result</span> <span class=\"keyword\">AS</span> r</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> s.studentNO <span class=\"operator\">=</span> r.studentNO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Right Join</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.studentNO,studentName,SubjectNo,StudentResult</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student <span class=\"keyword\">AS</span> r</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">result</span> <span class=\"keyword\">AS</span> r</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.studentNO <span class=\"operator\">=</span> r.studentNO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Left Join</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.studentNO,studentName,SubjectNo,StudentResult</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student r</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">result</span> r</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.studentNO <span class=\"operator\">=</span> r.studentNO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--如：查询学员所属的年级（学号，学生的姓名，年级名称）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,studentName,`GradeName`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `grade` g</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.`GradeID` <span class=\"operator\">=</span> g.`GradeID`</span><br></pre></td></tr></table></figure>\n\n\n\n<p>自连表：</p>\n<p>自己的表和自己的表连接，核心：一张表拆为两张一样的表即可</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询父子信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> a.`categoryName` <span class=\"keyword\">AS</span> `父栏目`,b.`categoryName` <span class=\"keyword\">AS</span> `子栏目`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `category` <span class=\"keyword\">AS</span> a,`category` <span class=\"keyword\">AS</span> b</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a.`categoryid`<span class=\"operator\">=</span>b.`pid`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分页和排序\"><a href=\"#分页和排序\" class=\"headerlink\" title=\"分页和排序\"></a>分页和排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,studentName,`GradeName`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `grade` g</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.`GradeID` <span class=\"operator\">=</span> g.`GradeID`</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentNo <span class=\"keyword\">DESC</span>  <span class=\"operator\">/</span><span class=\"operator\">/</span>降序</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,studentName,`GradeName`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `grade` g</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.`GradeID` <span class=\"operator\">=</span> g.`GradeID`</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentNo <span class=\"keyword\">ASC</span></span><br><span class=\"line\">LIMIT <span class=\"number\">0</span>，<span class=\"number\">5</span> <span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">0</span>指的是当前页，<span class=\"number\">5</span>指的是页面的大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--第一页 limit 0,5</span></span><br><span class=\"line\"><span class=\"comment\">--第二页 limit 5,5</span></span><br><span class=\"line\"><span class=\"comment\">--第三页 limit 10,5</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>子查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询 数据库结构-1 的所有考试结果</span></span><br><span class=\"line\"><span class=\"comment\">-- 方式一：使用连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,r.`SubjectNo`,`StudentResult`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `<span class=\"keyword\">result</span>` r</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `subject` sub</span><br><span class=\"line\"><span class=\"keyword\">ON</span> r.SubjectNo <span class=\"operator\">=</span> sub.SubjectNo</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SubjectName <span class=\"operator\">=</span> `数据库结构<span class=\"number\">-1</span>`</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentResult <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 方式二：使用子查询（由里及外）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`SubjectNo`,`StudentResult`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `<span class=\"keyword\">result</span>`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SubjectNo <span class=\"operator\">=</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> SubjectNo <span class=\"keyword\">FROM</span> `subject`</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> SubjectName <span class=\"operator\">=</span> <span class=\"string\">&#x27;数据库结构-1&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentResult <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> StudentNo,StudentName <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> StudentNo <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> StudentNo <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span> <span class=\"keyword\">WHERE</span> StudentResult<span class=\"operator\">&gt;</span><span class=\"number\">80</span> <span class=\"keyword\">AND</span> SubjectNo <span class=\"operator\">=</span> (</span><br><span class=\"line\">    \t<span class=\"keyword\">SELECT</span> SubjectNo <span class=\"keyword\">FROM</span> `subject` <span class=\"keyword\">WHERE</span> `subjectName` <span class=\"operator\">=</span> `高等数学<span class=\"number\">-2</span>`</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MySQL函数\"><a href=\"#MySQL函数\" class=\"headerlink\" title=\"MySQL函数\"></a>MySQL函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数学运算</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">ABS</span>(<span class=\"number\">-8</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CEILING</span>(<span class=\"number\">9.4</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">FLOOR</span>(<span class=\"number\">9.4</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> RAND()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SIGN(<span class=\"number\">-10</span>) <span class=\"comment\">--判断一个数的符号 负数返回-1 正数返回1 0返回0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CHAR_LENGTH</span>(`即使再小的帆也能远航`)  <span class=\"comment\">--字符串长度</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>) <span class=\"comment\">--拼接字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">INSERT</span>(<span class=\"string\">&#x27;ABCD&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;LLLL&#x27;</span>)<span class=\"comment\">--查询，替换 -- 换成LLLLCD(从某个位置开始替换某个长度)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">LOWER</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">UPPER</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> INSTR(<span class=\"string\">&#x27;abcdefg&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>) <span class=\"comment\">--返回3</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> REPLACE(<span class=\"string\">&#x27;ABCDEF&#x27;</span>,<span class=\"string\">&#x27;CD&#x27;</span>,<span class=\"string\">&#x27;cd&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTR(<span class=\"string\">&#x27;ABCDEF&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>) <span class=\"comment\">--返回CD  截取开始的位置，截取的长度（长度没给就截取到头）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> REVERSE(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--例子</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> REPLACE(studentname,<span class=\"string\">&#x27;周&#x27;</span>,<span class=\"string\">&#x27;邹&#x27;</span>) <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> studentname <span class=\"keyword\">LIKE</span> `周<span class=\"operator\">%</span>`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--时间与日期函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CURRENT_DATE</span>() <span class=\"comment\">--获取当前日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURDATE() <span class=\"comment\">--获取当前日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> NOW() <span class=\"comment\">--获取当前的时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">LOCALTIME</span>() <span class=\"comment\">--本地时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SYSDATE() <span class=\"comment\">--系统时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--系统</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SYSTEM_USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> VERSION()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>聚合函数：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(studentname) <span class=\"keyword\">FROM</span> student; <span class=\"comment\">--Count(指定列) ,会忽略所有的null值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> student; <span class=\"comment\">--Count(*) ，不会忽略null值， 本质 计算行数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>; <span class=\"comment\">--Count(1)，不会忽略null值， 本质 计算行数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 总和 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 平均分 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 最高分 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MIN</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 最低分 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SubjectName,<span class=\"built_in\">AVG</span>(StudentResult) <span class=\"keyword\">AS</span> 平均分，<span class=\"built_in\">MAX</span>(StudentResult),<span class=\"built_in\">MIN</span>(StudentResult)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span> r</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `subject` sub</span><br><span class=\"line\"><span class=\"keyword\">ON</span> r.`SubjectNo` <span class=\"operator\">=</span> sub.`SubjectNo`</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> r.SubjectNo <span class=\"comment\">--通过什么字段来分组</span></span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> 平均分<span class=\"operator\">&gt;</span><span class=\"number\">80</span> <span class=\"comment\">--分组后的过滤条件</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务：将一组SQL放到一个批次中去执行</p>\n<p>事务原则：ACID 原则</p>\n<p>原子性，一致性，隔离性，持久性  （脏读，幻读…）</p>\n<p>原子性：针对同一个事务，要么都完成，要么都失败</p>\n<p>一致性：针对一个事务操作前与操作后的状态一致（前后数据完整性要保证一致）</p>\n<p>持久性：表示事务结束后的数据不随着外界原因导致数据丢失（事务一旦提交就不可逆了）</p>\n<p>隔离性：针对多个用户同时操作，主要是排除其他事务对本次事务的影响</p>\n<p>（多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，不同事务要相互隔离）</p>\n<p>隔离所导致的问题：</p>\n<p>脏读：一个事务读取了另外一个事务未提交的数据</p>\n<p>不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。</p>\n<p>（这个不一定是错误，只是某些场合不对）</p>\n<p>幻读:一个事务内读取到了别的事务插入的数据，导致前后读取不一致</p>\n<p>（一般是行影响，多了一行）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--mysql 是默认开启事务自动提交的</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span><span class=\"number\">0</span> <span class=\"comment\">/*关闭*/</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"comment\">/*开启（默认的）*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--收到处理事务</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">0</span> <span class=\"comment\">--关闭自动提交</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--事务开启</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION <span class=\"comment\">--标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--提交：持久化（成功！）</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"comment\">--回滚：回到原来的样子（失败！）</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--事务结束</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"comment\">--开启自动提交</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--了解</span></span><br><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> 保存点名 <span class=\"comment\">--设置一个事务的保存点</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">SAVEPOINT</span> 保存点名 <span class=\"comment\">--回滚到保存点</span></span><br><span class=\"line\"><span class=\"keyword\">RELEASE</span> <span class=\"keyword\">SAVEPOINT</span> 保存点名 <span class=\"comment\">-- 撤销保存点 </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE shop <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci</span><br><span class=\"line\">USE shop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `account`(</span><br><span class=\"line\">`id` <span class=\"type\">INT</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`money` <span class=\"type\">DECIMAL</span>(<span class=\"number\">9</span>,<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>INNODB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,`money`)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">2000.00</span>),(`B`,<span class=\"number\">10000.00</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--模拟转账：事务</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">--关闭自动提交</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION <span class=\"comment\">--开启一个事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE account <span class=\"keyword\">SET</span> money<span class=\"operator\">=</span>money<span class=\"number\">-500</span> <span class=\"keyword\">WHERE</span> `name`<span class=\"operator\">=</span>`A` <span class=\"comment\">--A减500</span></span><br><span class=\"line\">UPDATE account <span class=\"keyword\">SET</span> money<span class=\"operator\">=</span>money<span class=\"operator\">+</span><span class=\"number\">500</span> <span class=\"keyword\">WHERE</span> `name`<span class=\"operator\">=</span>`B` <span class=\"comment\">--A加500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>; <span class=\"comment\">--提交事务，就被持久化了</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>; <span class=\"comment\">--回滚</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">--恢复默认值 </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>索引的分类：</p>\n<p>主键索引（PRIMARY KEY)  –唯一的标识，主键不可重复</p>\n<p>唯一索引  (UNIQUE KEY)  –避免重复的列的出现，唯一索引可以重复</p>\n<p>常规索引  (KEY/INDEX) –默认的，index. key关键字来设置</p>\n<p>全文索引  (FullText)  –快速定位数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--索引的使用</span></span><br><span class=\"line\"><span class=\"comment\">--1.在创建表的时候给字段增加索引</span></span><br><span class=\"line\"><span class=\"comment\">--2.创建完毕后，增加索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--显示所有的索引信息</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> INDEX <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--增加一个全文索引(索引名) 列名</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> school.student <span class=\"keyword\">ADD</span> FULLTEXT INDEX `studentName`(`studentName`);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--EXPLAIN 分析sql执行的状况</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student; <span class=\"comment\">--非全文索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"keyword\">MATCH</span>(studentName) AGAINST(`刘`);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX id_app_user_name <span class=\"keyword\">ON</span> app_user(`name`); </span><br><span class=\"line\"><span class=\"comment\">-- CREATE INDEX 索引名 ON 表（字段）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> app_user <span class=\"keyword\">WHERE</span> `name`<span class=\"operator\">=</span>`用户<span class=\"number\">9999</span>`; <span class=\"comment\">--0.001 sec</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"权限管理和备份\"><a href=\"#权限管理和备份\" class=\"headerlink\" title=\"权限管理和备份\"></a>权限管理和备份</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--创建用户</span><br><span class=\"line\">CREATE USER acow IDENTIFIED BY `123456`</span><br><span class=\"line\"></span><br><span class=\"line\">--修改密码（修改当前用户密码）</span><br><span class=\"line\">SET PASSWORD=PASSWORD(`111111`)</span><br><span class=\"line\"></span><br><span class=\"line\">--修改密码（修改指定用户密码）</span><br><span class=\"line\">SET PASSWORD FOR acow = PASSWORD(`111111`)</span><br><span class=\"line\"></span><br><span class=\"line\">--重命名</span><br><span class=\"line\">RENAME USER acow TO acow337</span><br><span class=\"line\"></span><br><span class=\"line\">--用户授权</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO acow337</span><br><span class=\"line\"></span><br><span class=\"line\">--查询权限</span><br><span class=\"line\">SHOW GRANTS FOR acow337</span><br><span class=\"line\">SHOW GRANTS FOR root@localhost</span><br><span class=\"line\"></span><br><span class=\"line\">--ROOT用户权限：GRANT ALL PRIVILEGES ON *.* TO `root`@`localhost` WITH GRANT OPTION</span><br><span class=\"line\"></span><br><span class=\"line\">--撤销权限 REVOKE </span><br><span class=\"line\">REVOKE ALL PRIVILEGES ON *.* FROM acow337</span><br><span class=\"line\"></span><br><span class=\"line\">--删除用户</span><br><span class=\"line\">DROP USER acow337</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MySQL备份\"><a href=\"#MySQL备份\" class=\"headerlink\" title=\"MySQL备份\"></a>MySQL备份</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--导出数据表（school是库名，student和result是表名）</span><br><span class=\"line\">mysqldump -hlocalhost -uroot -p123456 school student result&gt;D:/a.sql</span><br><span class=\"line\"></span><br><span class=\"line\">--导入</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\">use school</span><br><span class=\"line\">source d:/a.sql</span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\">mysql -u用户名 -p密码 库名&lt;备份文件</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h3><p>第一范式：要求数据库表的每一列都是不可分割的原子数据项</p>\n<p>（前提：满足第一范式）</p>\n<p>第二范式：数据库表的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）</p>\n<p>（前提：满足第一 二范式）</p>\n<p>第三范式：确保数据表中的每一列数据都和主键直接相关，而不能间接相关</p>\n<h3 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h3><p>加载驱动-&gt;输入用户信息-&gt;创建连接-&gt;创建执行类-&gt;编写SQL语句-&gt;执行语句-&gt;释放连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.acow;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class practice01 &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">        //1.加载驱动</span><br><span class=\"line\">        //DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 不推荐这么用</span><br><span class=\"line\">       Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //固定写法，加载驱动</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.用户信息和url</span><br><span class=\"line\">        String   url=&quot;jdbc:mysql://localhost:3306/jdbcstudyuseUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;;</span><br><span class=\"line\">        String username=&quot;root&quot;;</span><br><span class=\"line\">        String password=&quot;123456&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        //3.连接成功，数据库对象 Connection 代表数据库</span><br><span class=\"line\">        Connection connection=DriverManager.getConnection(url,username,password);</span><br><span class=\"line\"></span><br><span class=\"line\">        //4.执行SQL的对象 Statement 执行sql的对象（执行类）</span><br><span class=\"line\">        Statement statement = connection.createStatement();</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">        //5.执行SQL的对象，去执行SQL，可能存在结果，查看返回结果</span><br><span class=\"line\">        String sql=&quot;SELECT * FROM users&quot;;  //编写SQL</span><br><span class=\"line\"></span><br><span class=\"line\">        ResultSet resultSet = statement.executeQuery(sql);//返回的结果集,结果集中封装了我们全部的查询出来的结果</span><br><span class=\"line\">        </span><br><span class=\"line\">        while(resultSet.next())&#123;</span><br><span class=\"line\">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;id&quot;));</span><br><span class=\"line\">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;NAME&quot;));</span><br><span class=\"line\">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;PASSWORD&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //6.释放连接（必做！！）</span><br><span class=\"line\">        resultSet.close();</span><br><span class=\"line\">        statement.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">statement.executeQuery(); //查询操作返回ResultSet</span><br><span class=\"line\">statement.execute(); //执行任何的SQL</span><br><span class=\"line\">statement.executeUpdate(); //更新 插入 删除 都是用这个 返回一个收影响的行数         </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resultSet.getObject();  //在不知道列类型的情况下使用</span><br><span class=\"line\">resultSet.getString();</span><br><span class=\"line\">resultSet.getInt();</span><br><span class=\"line\">resultSet.getFloat();</span><br><span class=\"line\">resultSet.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">resultSet.beforeFirst(); //移动到最前面</span><br><span class=\"line\">resultSet.afterLast(); //移动到最后面</span><br><span class=\"line\">resultSet.next(); //移动到下一个数据</span><br><span class=\"line\">resultSet.previous(); //移动到前一行</span><br><span class=\"line\">resultSet.absolute(row); //移动到指定行</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>在目录下创建文件db.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql:<span class=\"comment\">//localhost:3306/jdbcstudy</span></span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=<span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编写工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.acow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.System.getProperty;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtils</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String driver =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String username =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String password =<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">           InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;db.properties&quot;</span>);</span><br><span class=\"line\">            Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            properties.load(in);</span><br><span class=\"line\">            </span><br><span class=\"line\">           driver= properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">           url= properties.getProperty(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">           username= properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">           password= properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//驱动只用加载一次 </span></span><br><span class=\"line\">           Class.forName(driver);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//获取连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//释放连接资源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rs!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                st.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rs!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编写增删改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInsert</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Statement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn=JdbcUtils.getConnection(); <span class=\"comment\">//获取数据库连接</span></span><br><span class=\"line\">            st = conn.createStatement(); <span class=\"comment\">//获得SQL的执行对象</span></span><br><span class=\"line\">            String sql=<span class=\"string\">&quot;INSERT INTO users(id,`NAME`,`email`,`birthday`)&quot;</span>+</span><br><span class=\"line\">                    <span class=\"string\">&quot;VALUES(4,&#x27;acow&#x27;,&#x27;123456&#x27;,&#x27;123qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = st.executeUpdate(sql);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;插入成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSelect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Statement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn=JdbcUtils.getConnection(); <span class=\"comment\">//获取数据库连接</span></span><br><span class=\"line\">            st = conn.createStatement(); <span class=\"comment\">//获得SQL的执行对象</span></span><br><span class=\"line\">            String sql=<span class=\"string\">&quot;select * from users where id = 1&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            rs=st.executeQuery(<span class=\"string\">&quot;sql&quot;</span>); <span class=\"comment\">//查询完会返回一个结果集</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">                System.out.println(rs.getString(<span class=\"string\">&quot;NAME&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>prepareStatement</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.rowset.JdbcRowSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInsert</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = JdbcUtils.getConnection();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//区别</span></span><br><span class=\"line\">            <span class=\"comment\">//使用？占位符代替参数</span></span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            st = conn.prepareStatement(sql); <span class=\"comment\">//预编译SQL,先写sql,然后不执行</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//手动给参数赋值</span></span><br><span class=\"line\">            st.setInt(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">            st.setString(<span class=\"number\">2</span>,<span class=\"string\">&quot;acow&quot;</span>);</span><br><span class=\"line\">            st.setString(<span class=\"number\">3</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">            st.setString(<span class=\"number\">4</span>,<span class=\"string\">&quot;34221@qq.com&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//注意点： sql.Date  数据库</span></span><br><span class=\"line\">            <span class=\"comment\">//       util.Date   Java     new Date().getTime() 获得时间戳</span></span><br><span class=\"line\">            st.setDate(<span class=\"number\">5</span>,<span class=\"keyword\">new</span> java.sql.Date(<span class=\"keyword\">new</span> Date().getTime()));</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//执行</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i=st.executeUpdate();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;插入成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSelect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn=JdbcUtils.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">//PreparedStatement 防止SQL注入的本质，把传递进来的参数当作字符</span></span><br><span class=\"line\">            <span class=\"comment\">//假设其中存在转义字符，比如说&#x27;&#x27;就会直接被转移</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            String sql=<span class=\"string\">&quot;select * from users where id=?&quot;</span>; <span class=\"comment\">//编写SQL</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            st = conn.prepareStatement(sql); <span class=\"comment\">//预编译</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            st.setInt(<span class=\"number\">1</span>,<span class=\"number\">1</span>); <span class=\"comment\">//传递参数</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            rs=st.executeQuery(); <span class=\"comment\">//执行</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rs.next()) &#123;</span><br><span class=\"line\">                System.out.println(rs.getString(<span class=\"string\">&quot;NAME&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransaction1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement st= <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn= JdbcUtils.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">//关闭数据库的自动提交，自动会开启事务</span></span><br><span class=\"line\">            conn.setAutoCommit(<span class=\"keyword\">false</span>); <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            String sql1=<span class=\"string\">&quot;update account set money = money-100 where name=&#x27;A&quot;</span>;</span><br><span class=\"line\">            st=conn.prepareStatement(sql1);</span><br><span class=\"line\">            st.executeUpdate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            String sql2=<span class=\"string\">&quot;update account set money = money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">            st=conn.prepareStatement(sql1);</span><br><span class=\"line\">            st.executeUpdate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//业务完毕，提交事务</span></span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功&quot;</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                conn.rollback(); <span class=\"comment\">//如果失败则回滚事务</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>命令行连接：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">-</span>uroot <span class=\"operator\">-</span>p <span class=\"operator\">/</span><span class=\"operator\">/</span>连接数据库</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges; <span class=\"comment\">--刷新权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> databases; <span class=\"comment\">--查看所有数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">use school； <span class=\"comment\">--切换数据库use数据库名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> tables； <span class=\"comment\">--查看数据库中所有的表</span></span><br><span class=\"line\"><span class=\"keyword\">describe</span> student； <span class=\"comment\">--显示数据库中所有表的信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> database westos； <span class=\"comment\">--创建一个数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">exit； <span class=\"comment\">--退出连接</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE if not exists hello</span><br><span class=\"line\"></span><br><span class=\"line\">DROP DATABASE IF EXISTS hello //删除</span><br><span class=\"line\"></span><br><span class=\"line\">USE 123  //使用</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>建表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> `student` (</span><br><span class=\"line\">`id` <span class=\"type\">int</span>(<span class=\"number\">4</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> auto_increment comment `学号`,</span><br><span class=\"line\">`name` <span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">default</span> `匿名` comment `学号`,</span><br><span class=\"line\">`pwd` <span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">default</span> `<span class=\"number\">123456</span>` comment `密码`,</span><br><span class=\"line\">`sex` <span class=\"type\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">default</span> `女` comment `性别`,</span><br><span class=\"line\">`birthday` datetime <span class=\"keyword\">default</span> <span class=\"keyword\">null</span> comment `出生日期`,</span><br><span class=\"line\"><span class=\"keyword\">primary</span> key(`id`)</span><br><span class=\"line\">)engine<span class=\"operator\">=</span>innodb <span class=\"keyword\">default</span> charset<span class=\"operator\">=</span>utf8</span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create database school --查看创建数据库的语句</span><br><span class=\"line\">show create table student --查看student数据表的定义语句</span><br><span class=\"line\">desc student --查看表的结构</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher RENAME <span class=\"keyword\">AS</span> teacher1 <span class=\"comment\">--修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher <span class=\"keyword\">ADD</span> age <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"comment\">--增加表的字段</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher1 MODIFY age <span class=\"type\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"comment\">--修改表的字段（重命名）</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tescher1 CHANGE age age1 <span class=\"type\">INT</span>(<span class=\"number\">1</span>) <span class=\"comment\">--修改约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> teacher1 <span class=\"keyword\">DROP</span> age1 <span class=\"comment\">--删除表的字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> teacher1 <span class=\"comment\">--删除表</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>外键：</p>\n<p>注：删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表的时候没有外键关系（添加外键）</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> `FK_gradeid` <span class=\"keyword\">FOREIGN</span> KEY(`gradeid`) <span class=\"keyword\">REFERENCES</span> `grade`(`gradeid`);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h3><p>添加：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `grade`(`gradename`) <span class=\"keyword\">VALUES</span>(`大四`)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `grade`(`gradename`) <span class=\"keyword\">VALUES</span>(`大四`),(`大二`)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `grade`(`gradename`,`gradeid`) <span class=\"keyword\">VALUES</span>(`大四`,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--修改学员名字</span></span><br><span class=\"line\">UPDATE `student` <span class=\"keyword\">SET</span> `name`<span class=\"operator\">=</span>`小明`,`email`<span class=\"operator\">=</span>`<span class=\"number\">1123</span><span class=\"variable\">@qq</span>.com` <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">UPDATE `student` <span class=\"keyword\">SET</span> `name`<span class=\"operator\">=</span>`小明`,`email`<span class=\"operator\">=</span>`<span class=\"number\">1123</span><span class=\"variable\">@qq</span>.com` <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">2</span> <span class=\"keyword\">AND</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">UPDATE `student` <span class=\"keyword\">SET</span> `name`<span class=\"operator\">=</span>`小明`,`email`<span class=\"operator\">=</span>`<span class=\"number\">1123</span><span class=\"variable\">@qq</span>.com` <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> sex<span class=\"operator\">=</span>`女`;</span><br></pre></td></tr></table></figure>\n\n<p>删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TRUNCATE `student`  --清空student表</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE FROM `student` WHERE id=1;</span><br></pre></td></tr></table></figure>\n\n<p>查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询全部</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"comment\">--查询指定字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"comment\">--别名，给结果起一个名字</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo` <span class=\"keyword\">AS</span> 学号,`StudentName` <span class=\"keyword\">AS</span> 学生姓名 <span class=\"keyword\">FROM</span> student <span class=\"keyword\">AS</span> S</span><br><span class=\"line\"><span class=\"comment\">-- 函数 Concat(a,b)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(`姓名`，StudentName) <span class=\"keyword\">AS</span> 新名字 <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,`StudentResult` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span> </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> studentNo<span class=\"operator\">=</span><span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p>去重：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>   <span class=\"comment\">-- 查询全部的考试成绩</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>   <span class=\"comment\">--查询有哪些同学参加了考试</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> `StudentNo` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>  <span class=\"comment\">--发现重复数据，查重</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>考试成绩+1分查看</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentResult`<span class=\"operator\">+</span><span class=\"number\">1</span> <span class=\"keyword\">AS</span> `提分后` <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询姓刘的同学</span></span><br><span class=\"line\"><span class=\"comment\">--like结合 %（代表0到任意个字符） </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `刘<span class=\"operator\">%</span>`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询姓刘的同学，后面只带一个字的</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `刘_`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询姓刘的同学，后面只带两个字的</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `刘__`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询名字中间有嘉字的同学</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentName <span class=\"keyword\">LIKE</span> `<span class=\"operator\">%</span>嘉<span class=\"operator\">%</span>`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询1001，1002，1003号成员</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentNo <span class=\"keyword\">IN</span> (<span class=\"number\">1001</span>,<span class=\"number\">1002</span>,<span class=\"number\">1003</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`StudentName` <span class=\"keyword\">FROM</span> `student`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> StudentNo <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"联表查询\"><a href=\"#联表查询\" class=\"headerlink\" title=\"联表查询\"></a>联表查询</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询参加了考试的同学</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 思路</span></span><br><span class=\"line\"><span class=\"comment\">1.分析需求，分析查询的字段来自哪些表，（连接查询）</span></span><br><span class=\"line\"><span class=\"comment\">2.确定使用哪种连接查询？ 7种</span></span><br><span class=\"line\"><span class=\"comment\">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class=\"line\"><span class=\"comment\">判断的条件：学生表中的studentNo = 成绩表 studentNo</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.studentNO,studentName,SubjectNo,StudentResult</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student <span class=\"keyword\">AS</span> s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">result</span> <span class=\"keyword\">AS</span> r</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> s.studentNO <span class=\"operator\">=</span> r.studentNO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Right Join</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.studentNO,studentName,SubjectNo,StudentResult</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student <span class=\"keyword\">AS</span> r</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">result</span> <span class=\"keyword\">AS</span> r</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.studentNO <span class=\"operator\">=</span> r.studentNO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Left Join</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.studentNO,studentName,SubjectNo,StudentResult</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student r</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">result</span> r</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.studentNO <span class=\"operator\">=</span> r.studentNO</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--如：查询学员所属的年级（学号，学生的姓名，年级名称）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,studentName,`GradeName`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `grade` g</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.`GradeID` <span class=\"operator\">=</span> g.`GradeID`</span><br></pre></td></tr></table></figure>\n\n\n\n<p>自连表：</p>\n<p>自己的表和自己的表连接，核心：一张表拆为两张一样的表即可</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询父子信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> a.`categoryName` <span class=\"keyword\">AS</span> `父栏目`,b.`categoryName` <span class=\"keyword\">AS</span> `子栏目`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `category` <span class=\"keyword\">AS</span> a,`category` <span class=\"keyword\">AS</span> b</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a.`categoryid`<span class=\"operator\">=</span>b.`pid`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分页和排序\"><a href=\"#分页和排序\" class=\"headerlink\" title=\"分页和排序\"></a>分页和排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,studentName,`GradeName`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `grade` g</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.`GradeID` <span class=\"operator\">=</span> g.`GradeID`</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentNo <span class=\"keyword\">DESC</span>  <span class=\"operator\">/</span><span class=\"operator\">/</span>降序</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> studentNo,studentName,`GradeName`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> student s</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `grade` g</span><br><span class=\"line\"><span class=\"keyword\">ON</span> s.`GradeID` <span class=\"operator\">=</span> g.`GradeID`</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentNo <span class=\"keyword\">ASC</span></span><br><span class=\"line\">LIMIT <span class=\"number\">0</span>，<span class=\"number\">5</span> <span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">0</span>指的是当前页，<span class=\"number\">5</span>指的是页面的大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--第一页 limit 0,5</span></span><br><span class=\"line\"><span class=\"comment\">--第二页 limit 5,5</span></span><br><span class=\"line\"><span class=\"comment\">--第三页 limit 10,5</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>子查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询 数据库结构-1 的所有考试结果</span></span><br><span class=\"line\"><span class=\"comment\">-- 方式一：使用连接查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,r.`SubjectNo`,`StudentResult`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `<span class=\"keyword\">result</span>` r</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `subject` sub</span><br><span class=\"line\"><span class=\"keyword\">ON</span> r.SubjectNo <span class=\"operator\">=</span> sub.SubjectNo</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SubjectName <span class=\"operator\">=</span> `数据库结构<span class=\"number\">-1</span>`</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentResult <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 方式二：使用子查询（由里及外）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> `StudentNo`,`SubjectNo`,`StudentResult`</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> `<span class=\"keyword\">result</span>`</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SubjectNo <span class=\"operator\">=</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> SubjectNo <span class=\"keyword\">FROM</span> `subject`</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> SubjectName <span class=\"operator\">=</span> <span class=\"string\">&#x27;数据库结构-1&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> StudentResult <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> StudentNo,StudentName <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> StudentNo <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> StudentNo <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span> <span class=\"keyword\">WHERE</span> StudentResult<span class=\"operator\">&gt;</span><span class=\"number\">80</span> <span class=\"keyword\">AND</span> SubjectNo <span class=\"operator\">=</span> (</span><br><span class=\"line\">    \t<span class=\"keyword\">SELECT</span> SubjectNo <span class=\"keyword\">FROM</span> `subject` <span class=\"keyword\">WHERE</span> `subjectName` <span class=\"operator\">=</span> `高等数学<span class=\"number\">-2</span>`</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MySQL函数\"><a href=\"#MySQL函数\" class=\"headerlink\" title=\"MySQL函数\"></a>MySQL函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数学运算</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">ABS</span>(<span class=\"number\">-8</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CEILING</span>(<span class=\"number\">9.4</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">FLOOR</span>(<span class=\"number\">9.4</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> RAND()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SIGN(<span class=\"number\">-10</span>) <span class=\"comment\">--判断一个数的符号 负数返回-1 正数返回1 0返回0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CHAR_LENGTH</span>(`即使再小的帆也能远航`)  <span class=\"comment\">--字符串长度</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>) <span class=\"comment\">--拼接字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">INSERT</span>(<span class=\"string\">&#x27;ABCD&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;LLLL&#x27;</span>)<span class=\"comment\">--查询，替换 -- 换成LLLLCD(从某个位置开始替换某个长度)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">LOWER</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">UPPER</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> INSTR(<span class=\"string\">&#x27;abcdefg&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>) <span class=\"comment\">--返回3</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> REPLACE(<span class=\"string\">&#x27;ABCDEF&#x27;</span>,<span class=\"string\">&#x27;CD&#x27;</span>,<span class=\"string\">&#x27;cd&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SUBSTR(<span class=\"string\">&#x27;ABCDEF&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>) <span class=\"comment\">--返回CD  截取开始的位置，截取的长度（长度没给就截取到头）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> REVERSE(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--例子</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> REPLACE(studentname,<span class=\"string\">&#x27;周&#x27;</span>,<span class=\"string\">&#x27;邹&#x27;</span>) <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> studentname <span class=\"keyword\">LIKE</span> `周<span class=\"operator\">%</span>`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--时间与日期函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CURRENT_DATE</span>() <span class=\"comment\">--获取当前日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURDATE() <span class=\"comment\">--获取当前日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> NOW() <span class=\"comment\">--获取当前的时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">LOCALTIME</span>() <span class=\"comment\">--本地时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SYSDATE() <span class=\"comment\">--系统时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--系统</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SYSTEM_USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> VERSION()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>聚合函数：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(studentname) <span class=\"keyword\">FROM</span> student; <span class=\"comment\">--Count(指定列) ,会忽略所有的null值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> student; <span class=\"comment\">--Count(*) ，不会忽略null值， 本质 计算行数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span>; <span class=\"comment\">--Count(1)，不会忽略null值， 本质 计算行数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 总和 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 平均分 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 最高分 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MIN</span>(<span class=\"string\">&#x27;StudentResult&#x27;</span>) <span class=\"keyword\">AS</span> 最低分 <span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SubjectName,<span class=\"built_in\">AVG</span>(StudentResult) <span class=\"keyword\">AS</span> 平均分，<span class=\"built_in\">MAX</span>(StudentResult),<span class=\"built_in\">MIN</span>(StudentResult)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">result</span> r</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> `subject` sub</span><br><span class=\"line\"><span class=\"keyword\">ON</span> r.`SubjectNo` <span class=\"operator\">=</span> sub.`SubjectNo`</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> r.SubjectNo <span class=\"comment\">--通过什么字段来分组</span></span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> 平均分<span class=\"operator\">&gt;</span><span class=\"number\">80</span> <span class=\"comment\">--分组后的过滤条件</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务：将一组SQL放到一个批次中去执行</p>\n<p>事务原则：ACID 原则</p>\n<p>原子性，一致性，隔离性，持久性  （脏读，幻读…）</p>\n<p>原子性：针对同一个事务，要么都完成，要么都失败</p>\n<p>一致性：针对一个事务操作前与操作后的状态一致（前后数据完整性要保证一致）</p>\n<p>持久性：表示事务结束后的数据不随着外界原因导致数据丢失（事务一旦提交就不可逆了）</p>\n<p>隔离性：针对多个用户同时操作，主要是排除其他事务对本次事务的影响</p>\n<p>（多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，不同事务要相互隔离）</p>\n<p>隔离所导致的问题：</p>\n<p>脏读：一个事务读取了另外一个事务未提交的数据</p>\n<p>不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。</p>\n<p>（这个不一定是错误，只是某些场合不对）</p>\n<p>幻读:一个事务内读取到了别的事务插入的数据，导致前后读取不一致</p>\n<p>（一般是行影响，多了一行）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--mysql 是默认开启事务自动提交的</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span><span class=\"number\">0</span> <span class=\"comment\">/*关闭*/</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"comment\">/*开启（默认的）*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--收到处理事务</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">0</span> <span class=\"comment\">--关闭自动提交</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--事务开启</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION <span class=\"comment\">--标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--提交：持久化（成功！）</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"comment\">--回滚：回到原来的样子（失败！）</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--事务结束</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"comment\">--开启自动提交</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--了解</span></span><br><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> 保存点名 <span class=\"comment\">--设置一个事务的保存点</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">SAVEPOINT</span> 保存点名 <span class=\"comment\">--回滚到保存点</span></span><br><span class=\"line\"><span class=\"keyword\">RELEASE</span> <span class=\"keyword\">SAVEPOINT</span> 保存点名 <span class=\"comment\">-- 撤销保存点 </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE shop <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci</span><br><span class=\"line\">USE shop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `account`(</span><br><span class=\"line\">`id` <span class=\"type\">INT</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`money` <span class=\"type\">DECIMAL</span>(<span class=\"number\">9</span>,<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>INNODB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> account(`name`,`money`)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">2000.00</span>),(`B`,<span class=\"number\">10000.00</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--模拟转账：事务</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">--关闭自动提交</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION <span class=\"comment\">--开启一个事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE account <span class=\"keyword\">SET</span> money<span class=\"operator\">=</span>money<span class=\"number\">-500</span> <span class=\"keyword\">WHERE</span> `name`<span class=\"operator\">=</span>`A` <span class=\"comment\">--A减500</span></span><br><span class=\"line\">UPDATE account <span class=\"keyword\">SET</span> money<span class=\"operator\">=</span>money<span class=\"operator\">+</span><span class=\"number\">500</span> <span class=\"keyword\">WHERE</span> `name`<span class=\"operator\">=</span>`B` <span class=\"comment\">--A加500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>; <span class=\"comment\">--提交事务，就被持久化了</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>; <span class=\"comment\">--回滚</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> autocommit <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">--恢复默认值 </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>索引的分类：</p>\n<p>主键索引（PRIMARY KEY)  –唯一的标识，主键不可重复</p>\n<p>唯一索引  (UNIQUE KEY)  –避免重复的列的出现，唯一索引可以重复</p>\n<p>常规索引  (KEY/INDEX) –默认的，index. key关键字来设置</p>\n<p>全文索引  (FullText)  –快速定位数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--索引的使用</span></span><br><span class=\"line\"><span class=\"comment\">--1.在创建表的时候给字段增加索引</span></span><br><span class=\"line\"><span class=\"comment\">--2.创建完毕后，增加索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--显示所有的索引信息</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> INDEX <span class=\"keyword\">FROM</span> student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--增加一个全文索引(索引名) 列名</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> school.student <span class=\"keyword\">ADD</span> FULLTEXT INDEX `studentName`(`studentName`);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--EXPLAIN 分析sql执行的状况</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student; <span class=\"comment\">--非全文索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"keyword\">MATCH</span>(studentName) AGAINST(`刘`);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX id_app_user_name <span class=\"keyword\">ON</span> app_user(`name`); </span><br><span class=\"line\"><span class=\"comment\">-- CREATE INDEX 索引名 ON 表（字段）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> app_user <span class=\"keyword\">WHERE</span> `name`<span class=\"operator\">=</span>`用户<span class=\"number\">9999</span>`; <span class=\"comment\">--0.001 sec</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"权限管理和备份\"><a href=\"#权限管理和备份\" class=\"headerlink\" title=\"权限管理和备份\"></a>权限管理和备份</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--创建用户</span><br><span class=\"line\">CREATE USER acow IDENTIFIED BY `123456`</span><br><span class=\"line\"></span><br><span class=\"line\">--修改密码（修改当前用户密码）</span><br><span class=\"line\">SET PASSWORD=PASSWORD(`111111`)</span><br><span class=\"line\"></span><br><span class=\"line\">--修改密码（修改指定用户密码）</span><br><span class=\"line\">SET PASSWORD FOR acow = PASSWORD(`111111`)</span><br><span class=\"line\"></span><br><span class=\"line\">--重命名</span><br><span class=\"line\">RENAME USER acow TO acow337</span><br><span class=\"line\"></span><br><span class=\"line\">--用户授权</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO acow337</span><br><span class=\"line\"></span><br><span class=\"line\">--查询权限</span><br><span class=\"line\">SHOW GRANTS FOR acow337</span><br><span class=\"line\">SHOW GRANTS FOR root@localhost</span><br><span class=\"line\"></span><br><span class=\"line\">--ROOT用户权限：GRANT ALL PRIVILEGES ON *.* TO `root`@`localhost` WITH GRANT OPTION</span><br><span class=\"line\"></span><br><span class=\"line\">--撤销权限 REVOKE </span><br><span class=\"line\">REVOKE ALL PRIVILEGES ON *.* FROM acow337</span><br><span class=\"line\"></span><br><span class=\"line\">--删除用户</span><br><span class=\"line\">DROP USER acow337</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MySQL备份\"><a href=\"#MySQL备份\" class=\"headerlink\" title=\"MySQL备份\"></a>MySQL备份</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--导出数据表（school是库名，student和result是表名）</span><br><span class=\"line\">mysqldump -hlocalhost -uroot -p123456 school student result&gt;D:/a.sql</span><br><span class=\"line\"></span><br><span class=\"line\">--导入</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\">use school</span><br><span class=\"line\">source d:/a.sql</span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\">mysql -u用户名 -p密码 库名&lt;备份文件</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h3><p>第一范式：要求数据库表的每一列都是不可分割的原子数据项</p>\n<p>（前提：满足第一范式）</p>\n<p>第二范式：数据库表的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）</p>\n<p>（前提：满足第一 二范式）</p>\n<p>第三范式：确保数据表中的每一列数据都和主键直接相关，而不能间接相关</p>\n<h3 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h3><p>加载驱动-&gt;输入用户信息-&gt;创建连接-&gt;创建执行类-&gt;编写SQL语句-&gt;执行语句-&gt;释放连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.acow;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class practice01 &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">        //1.加载驱动</span><br><span class=\"line\">        //DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 不推荐这么用</span><br><span class=\"line\">       Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //固定写法，加载驱动</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.用户信息和url</span><br><span class=\"line\">        String   url=&quot;jdbc:mysql://localhost:3306/jdbcstudyuseUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;;</span><br><span class=\"line\">        String username=&quot;root&quot;;</span><br><span class=\"line\">        String password=&quot;123456&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        //3.连接成功，数据库对象 Connection 代表数据库</span><br><span class=\"line\">        Connection connection=DriverManager.getConnection(url,username,password);</span><br><span class=\"line\"></span><br><span class=\"line\">        //4.执行SQL的对象 Statement 执行sql的对象（执行类）</span><br><span class=\"line\">        Statement statement = connection.createStatement();</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">        //5.执行SQL的对象，去执行SQL，可能存在结果，查看返回结果</span><br><span class=\"line\">        String sql=&quot;SELECT * FROM users&quot;;  //编写SQL</span><br><span class=\"line\"></span><br><span class=\"line\">        ResultSet resultSet = statement.executeQuery(sql);//返回的结果集,结果集中封装了我们全部的查询出来的结果</span><br><span class=\"line\">        </span><br><span class=\"line\">        while(resultSet.next())&#123;</span><br><span class=\"line\">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;id&quot;));</span><br><span class=\"line\">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;NAME&quot;));</span><br><span class=\"line\">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;PASSWORD&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //6.释放连接（必做！！）</span><br><span class=\"line\">        resultSet.close();</span><br><span class=\"line\">        statement.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">statement.executeQuery(); //查询操作返回ResultSet</span><br><span class=\"line\">statement.execute(); //执行任何的SQL</span><br><span class=\"line\">statement.executeUpdate(); //更新 插入 删除 都是用这个 返回一个收影响的行数         </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resultSet.getObject();  //在不知道列类型的情况下使用</span><br><span class=\"line\">resultSet.getString();</span><br><span class=\"line\">resultSet.getInt();</span><br><span class=\"line\">resultSet.getFloat();</span><br><span class=\"line\">resultSet.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">resultSet.beforeFirst(); //移动到最前面</span><br><span class=\"line\">resultSet.afterLast(); //移动到最后面</span><br><span class=\"line\">resultSet.next(); //移动到下一个数据</span><br><span class=\"line\">resultSet.previous(); //移动到前一行</span><br><span class=\"line\">resultSet.absolute(row); //移动到指定行</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>在目录下创建文件db.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql:<span class=\"comment\">//localhost:3306/jdbcstudy</span></span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=<span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编写工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.acow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.System.getProperty;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtils</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String driver =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String username =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String password =<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">           InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;db.properties&quot;</span>);</span><br><span class=\"line\">            Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            properties.load(in);</span><br><span class=\"line\">            </span><br><span class=\"line\">           driver= properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">           url= properties.getProperty(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">           username= properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">           password= properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//驱动只用加载一次 </span></span><br><span class=\"line\">           Class.forName(driver);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//获取连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//释放连接资源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rs!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                st.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rs!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编写增删改：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInsert</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Statement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn=JdbcUtils.getConnection(); <span class=\"comment\">//获取数据库连接</span></span><br><span class=\"line\">            st = conn.createStatement(); <span class=\"comment\">//获得SQL的执行对象</span></span><br><span class=\"line\">            String sql=<span class=\"string\">&quot;INSERT INTO users(id,`NAME`,`email`,`birthday`)&quot;</span>+</span><br><span class=\"line\">                    <span class=\"string\">&quot;VALUES(4,&#x27;acow&#x27;,&#x27;123456&#x27;,&#x27;123qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = st.executeUpdate(sql);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;插入成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSelect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Statement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn=JdbcUtils.getConnection(); <span class=\"comment\">//获取数据库连接</span></span><br><span class=\"line\">            st = conn.createStatement(); <span class=\"comment\">//获得SQL的执行对象</span></span><br><span class=\"line\">            String sql=<span class=\"string\">&quot;select * from users where id = 1&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            rs=st.executeQuery(<span class=\"string\">&quot;sql&quot;</span>); <span class=\"comment\">//查询完会返回一个结果集</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">                System.out.println(rs.getString(<span class=\"string\">&quot;NAME&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>prepareStatement</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.rowset.JdbcRowSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInsert</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = JdbcUtils.getConnection();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//区别</span></span><br><span class=\"line\">            <span class=\"comment\">//使用？占位符代替参数</span></span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            st = conn.prepareStatement(sql); <span class=\"comment\">//预编译SQL,先写sql,然后不执行</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//手动给参数赋值</span></span><br><span class=\"line\">            st.setInt(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">            st.setString(<span class=\"number\">2</span>,<span class=\"string\">&quot;acow&quot;</span>);</span><br><span class=\"line\">            st.setString(<span class=\"number\">3</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">            st.setString(<span class=\"number\">4</span>,<span class=\"string\">&quot;34221@qq.com&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//注意点： sql.Date  数据库</span></span><br><span class=\"line\">            <span class=\"comment\">//       util.Date   Java     new Date().getTime() 获得时间戳</span></span><br><span class=\"line\">            st.setDate(<span class=\"number\">5</span>,<span class=\"keyword\">new</span> java.sql.Date(<span class=\"keyword\">new</span> Date().getTime()));</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//执行</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i=st.executeUpdate();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;插入成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSelect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement st=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn=JdbcUtils.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">//PreparedStatement 防止SQL注入的本质，把传递进来的参数当作字符</span></span><br><span class=\"line\">            <span class=\"comment\">//假设其中存在转义字符，比如说&#x27;&#x27;就会直接被转移</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            String sql=<span class=\"string\">&quot;select * from users where id=?&quot;</span>; <span class=\"comment\">//编写SQL</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            st = conn.prepareStatement(sql); <span class=\"comment\">//预编译</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            st.setInt(<span class=\"number\">1</span>,<span class=\"number\">1</span>); <span class=\"comment\">//传递参数</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            rs=st.executeQuery(); <span class=\"comment\">//执行</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rs.next()) &#123;</span><br><span class=\"line\">                System.out.println(rs.getString(<span class=\"string\">&quot;NAME&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.acow.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransaction1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Connection conn=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement st= <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn= JdbcUtils.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">//关闭数据库的自动提交，自动会开启事务</span></span><br><span class=\"line\">            conn.setAutoCommit(<span class=\"keyword\">false</span>); <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            String sql1=<span class=\"string\">&quot;update account set money = money-100 where name=&#x27;A&quot;</span>;</span><br><span class=\"line\">            st=conn.prepareStatement(sql1);</span><br><span class=\"line\">            st.executeUpdate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            String sql2=<span class=\"string\">&quot;update account set money = money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">            st=conn.prepareStatement(sql1);</span><br><span class=\"line\">            st.executeUpdate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//业务完毕，提交事务</span></span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功&quot;</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                conn.rollback(); <span class=\"comment\">//如果失败则回滚事务</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"redis基础","date":"2021-05-09T09:07:12.000Z","_content":"\n### jedis\n\n```java\npackage com.example.demo.controller;\n\nimport org.junit.Test;\nimport org.springframework.stereotype.Controller;\nimport redis.clients.jedis.Jedis;\n\nimport java.util.List;\n\n@Controller\npublic class TestController {\n\n    @Test\n    public void testJedis(){\n        Jedis jedis=new Jedis(\"127.0.0.1\",6379);\n        System.out.println(\"连接成功\");\n        //存储数据到列表中\n        jedis.lpush(\"site-list\", \"Runoob\");\n        jedis.lpush(\"site-list\", \"Google\");\n        jedis.lpush(\"site-list\", \"Taobao\");\n        // 获取存储的数据并输出\n        List<String> list = jedis.lrange(\"site-list\", 0 ,2);\n        for(int i=0; i<list.size(); i++) {\n            System.out.println(\"列表项为: \"+list.get(i));\n        }\n    }\n\n}\n```\n\n\n\n\n\n开启事务\n\n```java\npackage com.example.demo.controller;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.junit.Test;\nimport org.springframework.stereotype.Controller;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.Transaction;\n\nimport java.util.List;\n\n@Controller\npublic class TestController {\n\n    @Test\n    public void testJedis() throws JSONException {\n        Jedis jedis=new Jedis(\"127.0.0.1\",6379);\n\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"hello\",\"world\");\n        jsonObject.put(\"name\",\"acow\");\n        //开启事务\n        Transaction multi = jedis.multi();\n        String result = jsonObject.toString();\n\n        try {\n            multi.set(\"user1\",result);\n            multi.set(\"user2\",result);\n\n            //int i=1/0; 代码排除异常事务，执行失败\n            \n            multi.exec(); //执行事务\n        } catch (Exception e) {\n            multi.discard(); //放弃事务\n            e.printStackTrace();\n        } finally {\n            jedis.close();//关闭连接\n        }\n\n    }\n\n}\n```\n\n### Redis工具类\n\n```java\npackage com.example.demo.util;\n\nimport org.springframework.data.redis.connection.DataType;\nimport org.springframework.data.redis.core.Cursor;\nimport org.springframework.data.redis.core.ScanOptions;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.core.ZSetOperations.TypedTuple;\n\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Redis工具类*/\nclass RedisUtil {\n    private StringRedisTemplate redisTemplate;\n\n    public void setRedisTemplate(StringRedisTemplate redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public StringRedisTemplate getRedisTemplate() {\n        return this.redisTemplate;\n    }\n\n    /** -------------------key相关操作--------------------- */\n\n    /**\n     * 删除key\n     *\n     * @param key\n     */\n    public void delete(String key) {\n        redisTemplate.delete(key);\n    }\n\n    /**\n     * 批量删除key\n     *\n     * @param keys\n     */\n    public void delete(Collection<String> keys) {\n        redisTemplate.delete(keys);\n    }\n\n    /**\n     * 序列化key\n     *\n     * @param key\n     * @return\n     */\n    public byte[] dump(String key) {\n        return redisTemplate.dump(key);\n    }\n\n    /**\n     * 是否存在key\n     *\n     * @param key\n     * @return\n     */\n    public Boolean hasKey(String key) {\n        return redisTemplate.hasKey(key);\n    }\n\n    /**\n     * 设置过期时间\n     *\n     * @param key\n     * @param timeout\n     * @param unit\n     * @return\n     */\n    public Boolean expire(String key, long timeout, TimeUnit unit) {\n        return redisTemplate.expire(key, timeout, unit);\n    }\n\n    /**\n     * 设置过期时间\n     *\n     * @param key\n     * @param date\n     * @return\n     */\n    public Boolean expireAt(String key, Date date) {\n        return redisTemplate.expireAt(key, date);\n    }\n\n    /**\n     * 查找匹配的key\n     *\n     * @param pattern\n     * @return\n     */\n    public Set<String> keys(String pattern) {\n        return redisTemplate.keys(pattern);\n    }\n\n    /**\n     * 将当前数据库的 key 移动到给定的数据库 db 当中\n     *\n     * @param key\n     * @param dbIndex\n     * @return\n     */\n    public Boolean move(String key, int dbIndex) {\n        return redisTemplate.move(key, dbIndex);\n    }\n\n    /**\n     * 移除 key 的过期时间，key 将持久保持\n     *\n     * @param key\n     * @return\n     */\n    public Boolean persist(String key) {\n        return redisTemplate.persist(key);\n    }\n\n    /**\n     * 返回 key 的剩余的过期时间\n     *\n     * @param key\n     * @param unit\n     * @return\n     */\n    public Long getExpire(String key, TimeUnit unit) {\n        return redisTemplate.getExpire(key, unit);\n    }\n\n    /**\n     * 返回 key 的剩余的过期时间\n     *\n     * @param key\n     * @return\n     */\n    public Long getExpire(String key) {\n        return redisTemplate.getExpire(key);\n    }\n\n    /**\n     * 从当前数据库中随机返回一个 key\n     *\n     * @return\n     */\n    public String randomKey() {\n        return redisTemplate.randomKey();\n    }\n\n    /**\n     * 修改 key 的名称\n     *\n     * @param oldKey\n     * @param newKey\n     */\n    public void rename(String oldKey, String newKey) {\n        redisTemplate.rename(oldKey, newKey);\n    }\n\n    /**\n     * 仅当 newkey 不存在时，将 oldKey 改名为 newkey\n     *\n     * @param oldKey\n     * @param newKey\n     * @return\n     */\n    public Boolean renameIfAbsent(String oldKey, String newKey) {\n        return redisTemplate.renameIfAbsent(oldKey, newKey);\n    }\n\n    /**\n     * 返回 key 所储存的值的类型\n     *\n     * @param key\n     * @return\n     */\n    public DataType type(String key) {\n        return redisTemplate.type(key);\n    }\n\n    /** -------------------string相关操作--------------------- */\n\n    /**\n     * 设置指定 key 的值\n     * @param key\n     * @param value\n     */\n    public void set(String key, String value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    /**\n     * 获取指定 key 的值\n     * @param key\n     * @return\n     */\n    public String get(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n\n    /**\n     * 返回 key 中字符串值的子字符\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public String getRange(String key, long start, long end) {\n        return redisTemplate.opsForValue().get(key, start, end);\n    }\n\n    /**\n     * 将给定 key 的值设为 value ，并返回 key 的旧值(old value)\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public String getAndSet(String key, String value) {\n        return redisTemplate.opsForValue().getAndSet(key, value);\n    }\n\n    /**\n     * 对 key 所储存的字符串值，获取指定偏移量上的位(bit)\n     *\n     * @param key\n     * @param offset\n     * @return\n     */\n    public Boolean getBit(String key, long offset) {\n        return redisTemplate.opsForValue().getBit(key, offset);\n    }\n\n    /**\n     * 批量获取\n     *\n     * @param keys\n     * @return\n     */\n    public List<String> multiGet(Collection<String> keys) {\n        return redisTemplate.opsForValue().multiGet(keys);\n    }\n\n    /**\n     * 设置ASCII码, 字符串'a'的ASCII码是97, 转为二进制是'01100001', 此方法是将二进制第offset位值变为value\n     *\n     * @param key 位置\n     * @param value\n     *            值,true为1, false为0\n     * @return\n     */\n    public boolean setBit(String key, long offset, boolean value) {\n        return redisTemplate.opsForValue().setBit(key, offset, value);\n    }\n\n    /**\n     * 将值 value 关联到 key ，并将 key 的过期时间设为 timeout\n     *\n     * @param key\n     * @param value\n     * @param timeout\n     *            过期时间\n     * @param unit\n     *            时间单位, 天:TimeUnit.DAYS 小时:TimeUnit.HOURS 分钟:TimeUnit.MINUTES\n     *            秒:TimeUnit.SECONDS 毫秒:TimeUnit.MILLISECONDS\n     */\n    public void setEx(String key, String value, long timeout, TimeUnit unit) {\n        redisTemplate.opsForValue().set(key, value, timeout, unit);\n    }\n\n    /**\n     * 只有在 key 不存在时设置 key 的值\n     *\n     * @param key\n     * @param value\n     * @return 之前已经存在返回false,不存在返回true\n     */\n    public boolean setIfAbsent(String key, String value) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value);\n    }\n\n    /**\n     * 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始\n     *\n     * @param key\n     * @param value\n     * @param offset\n     *            从指定位置开始覆写\n     */\n    public void setRange(String key, String value, long offset) {\n        redisTemplate.opsForValue().set(key, value, offset);\n    }\n\n    /**\n     * 获取字符串的长度\n     *\n     * @param key\n     * @return\n     */\n    public Long size(String key) {\n        return redisTemplate.opsForValue().size(key);\n    }\n\n    /**\n     * 批量添加\n     *\n     * @param maps\n     */\n    public void multiSet(Map<String, String> maps) {\n        redisTemplate.opsForValue().multiSet(maps);\n    }\n\n    /**\n     * 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在\n     *\n     * @param maps\n     * @return 之前已经存在返回false,不存在返回true\n     */\n    public boolean multiSetIfAbsent(Map<String, String> maps) {\n        return redisTemplate.opsForValue().multiSetIfAbsent(maps);\n    }\n\n    /**\n     * 增加(自增长), 负数则为自减\n     *\n     * @param key\n     * @return\n     */\n    public Long incrBy(String key, long increment) {\n        return redisTemplate.opsForValue().increment(key, increment);\n    }\n\n    /**\n     *\n     * @param key\n     * @return\n     */\n    public Double incrByFloat(String key, double increment) {\n        return redisTemplate.opsForValue().increment(key, increment);\n    }\n\n    /**\n     * 追加到末尾\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Integer append(String key, String value) {\n        return redisTemplate.opsForValue().append(key, value);\n    }\n\n    /** -------------------hash相关操作------------------------- */\n\n    /**\n     * 获取存储在哈希表中指定字段的值\n     *\n     * @param key\n     * @param field\n     * @return\n     */\n    public Object hGet(String key, String field) {\n        return redisTemplate.opsForHash().get(key, field);\n    }\n\n    /**\n     * 获取所有给定字段的值\n     *\n     * @param key\n     * @return\n     */\n    public Map<Object, Object> hGetAll(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n    /**\n     * 获取所有给定字段的值\n     *\n     * @param key\n     * @param fields\n     * @return\n     */\n    public List<Object> hMultiGet(String key, Collection<Object> fields) {\n        return redisTemplate.opsForHash().multiGet(key, fields);\n    }\n\n    public void hPut(String key, String hashKey, String value) {\n        redisTemplate.opsForHash().put(key, hashKey, value);\n    }\n\n    public void hPutAll(String key, Map<String, String> maps) {\n        redisTemplate.opsForHash().putAll(key, maps);\n    }\n\n    /**\n     * 仅当hashKey不存在时才设置\n     *\n     * @param key\n     * @param hashKey\n     * @param value\n     * @return\n     */\n    public Boolean hPutIfAbsent(String key, String hashKey, String value) {\n        return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);\n    }\n\n    /**\n     * 删除一个或多个哈希表字段\n     *\n     * @param key\n     * @param fields\n     * @return\n     */\n    public Long hDelete(String key, Object... fields) {\n        return redisTemplate.opsForHash().delete(key, fields);\n    }\n\n    /**\n     * 查看哈希表 key 中，指定的字段是否存在\n     *\n     * @param key\n     * @param field\n     * @return\n     */\n    public boolean hExists(String key, String field) {\n        return redisTemplate.opsForHash().hasKey(key, field);\n    }\n\n    /**\n     * 为哈希表 key 中的指定字段的整数值加上增量 increment\n     *\n     * @param key\n     * @param field\n     * @param increment\n     * @return\n     */\n    public Long hIncrBy(String key, Object field, long increment) {\n        return redisTemplate.opsForHash().increment(key, field, increment);\n    }\n\n    /**\n     * 为哈希表 key 中的指定字段的整数值加上增量 increment\n     *\n     * @param key\n     * @param field\n     * @param delta\n     * @return\n     */\n    public Double hIncrByFloat(String key, Object field, double delta) {\n        return redisTemplate.opsForHash().increment(key, field, delta);\n    }\n\n    /**\n     * 获取所有哈希表中的字段\n     *\n     * @param key\n     * @return\n     */\n    public Set<Object> hKeys(String key) {\n        return redisTemplate.opsForHash().keys(key);\n    }\n\n    /**\n     * 获取哈希表中字段的数量\n     *\n     * @param key\n     * @return\n     */\n    public Long hSize(String key) {\n        return redisTemplate.opsForHash().size(key);\n    }\n\n    /**\n     * 获取哈希表中所有值\n     *\n     * @param key\n     * @return\n     */\n    public List<Object> hValues(String key) {\n        return redisTemplate.opsForHash().values(key);\n    }\n\n    /**\n     * 迭代哈希表中的键值对\n     *\n     * @param key\n     * @param options\n     * @return\n     */\n    public Cursor<Entry<Object, Object>> hScan(String key, ScanOptions options) {\n        return redisTemplate.opsForHash().scan(key, options);\n    }\n\n    /** ------------------------list相关操作---------------------------- */\n\n    /**\n     * 通过索引获取列表中的元素\n     *\n     * @param key\n     * @param index\n     * @return\n     */\n    public String lIndex(String key, long index) {\n        return redisTemplate.opsForList().index(key, index);\n    }\n\n    /**\n     * 获取列表指定范围内的元素\n     *\n     * @param key\n     * @param start\n     *            开始位置, 0是开始位置\n     * @param end\n     *            结束位置, -1返回所有\n     * @return\n     */\n    public List<String> lRange(String key, long start, long end) {\n        return redisTemplate.opsForList().range(key, start, end);\n    }\n\n    /**\n     * 存储在list头部\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPush(String key, String value) {\n        return redisTemplate.opsForList().leftPush(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPushAll(String key, String... value) {\n        return redisTemplate.opsForList().leftPushAll(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPushAll(String key, Collection<String> value) {\n        return redisTemplate.opsForList().leftPushAll(key, value);\n    }\n\n    /**\n     * 当list存在的时候才加入\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPushIfPresent(String key, String value) {\n        return redisTemplate.opsForList().leftPushIfPresent(key, value);\n    }\n\n    /**\n     * 如果pivot存在,再pivot前面添加\n     *\n     * @param key\n     * @param pivot\n     * @param value\n     * @return\n     */\n    public Long lLeftPush(String key, String pivot, String value) {\n        return redisTemplate.opsForList().leftPush(key, pivot, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPush(String key, String value) {\n        return redisTemplate.opsForList().rightPush(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPushAll(String key, String... value) {\n        return redisTemplate.opsForList().rightPushAll(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPushAll(String key, Collection<String> value) {\n        return redisTemplate.opsForList().rightPushAll(key, value);\n    }\n\n    /**\n     * 为已存在的列表添加值\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPushIfPresent(String key, String value) {\n        return redisTemplate.opsForList().rightPushIfPresent(key, value);\n    }\n\n    /**\n     * 在pivot元素的右边添加值\n     *\n     * @param key\n     * @param pivot\n     * @param value\n     * @return\n     */\n    public Long lRightPush(String key, String pivot, String value) {\n        return redisTemplate.opsForList().rightPush(key, pivot, value);\n    }\n\n    /**\n     * 通过索引设置列表元素的值\n     *\n     * @param key\n     * @param index\n     *            位置\n     * @param value\n     */\n    public void lSet(String key, long index, String value) {\n        redisTemplate.opsForList().set(key, index, value);\n    }\n\n    /**\n     * 移出并获取列表的第一个元素\n     *\n     * @param key\n     * @return 删除的元素\n     */\n    public String lLeftPop(String key) {\n        return redisTemplate.opsForList().leftPop(key);\n    }\n\n    /**\n     * 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n     *\n     * @param key\n     * @param timeout\n     *            等待时间\n     * @param unit\n     *            时间单位\n     * @return\n     */\n    public String lBLeftPop(String key, long timeout, TimeUnit unit) {\n        return redisTemplate.opsForList().leftPop(key, timeout, unit);\n    }\n\n    /**\n     * 移除并获取列表最后一个元素\n     *\n     * @param key\n     * @return 删除的元素\n     */\n    public String lRightPop(String key) {\n        return redisTemplate.opsForList().rightPop(key);\n    }\n\n    /**\n     * 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n     *\n     * @param key\n     * @param timeout\n     *            等待时间\n     * @param unit\n     *            时间单位\n     * @return\n     */\n    public String lBRightPop(String key, long timeout, TimeUnit unit) {\n        return redisTemplate.opsForList().rightPop(key, timeout, unit);\n    }\n\n    /**\n     * 移除列表的最后一个元素，并将该元素添加到另一个列表并返回\n     *\n     * @param sourceKey\n     * @param destinationKey\n     * @return\n     */\n    public String lRightPopAndLeftPush(String sourceKey, String destinationKey) {\n        return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,\n                destinationKey);\n    }\n\n    /**\n     * 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n     *\n     * @param sourceKey\n     * @param destinationKey\n     * @param timeout\n     * @param unit\n     * @return\n     */\n    public String lBRightPopAndLeftPush(String sourceKey, String destinationKey,\n                                        long timeout, TimeUnit unit) {\n        return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,\n                destinationKey, timeout, unit);\n    }\n\n    /**\n     * 删除集合中值等于value得元素\n     *\n     * @param key\n     * @param index\n     *            index=0, 删除所有值等于value的元素; index>0, 从头部开始删除第一个值等于value的元素;\n     *            index<0, 从尾部开始删除第一个值等于value的元素;\n     * @param value\n     * @return\n     */\n    public Long lRemove(String key, long index, String value) {\n        return redisTemplate.opsForList().remove(key, index, value);\n    }\n\n    /**\n     * 裁剪list\n     *\n     * @param key\n     * @param start\n     * @param end\n     */\n    public void lTrim(String key, long start, long end) {\n        redisTemplate.opsForList().trim(key, start, end);\n    }\n\n    /**\n     * 获取列表长度\n     *\n     * @param key\n     * @return\n     */\n    public Long lLen(String key) {\n        return redisTemplate.opsForList().size(key);\n    }\n\n    /** --------------------set相关操作-------------------------- */\n\n    /**\n     * set添加元素\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long sAdd(String key, String... values) {\n        return redisTemplate.opsForSet().add(key, values);\n    }\n\n    /**\n     * set移除元素\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long sRemove(String key, Object... values) {\n        return redisTemplate.opsForSet().remove(key, values);\n    }\n\n    /**\n     * 移除并返回集合的一个随机元素\n     *\n     * @param key\n     * @return\n     */\n    public String sPop(String key) {\n        return redisTemplate.opsForSet().pop(key);\n    }\n\n    /**\n     * 将元素value从一个集合移到另一个集合\n     *\n     * @param key\n     * @param value\n     * @param destKey\n     * @return\n     */\n    public Boolean sMove(String key, String value, String destKey) {\n        return redisTemplate.opsForSet().move(key, value, destKey);\n    }\n\n    /**\n     * 获取集合的大小\n     *\n     * @param key\n     * @return\n     */\n    public Long sSize(String key) {\n        return redisTemplate.opsForSet().size(key);\n    }\n\n    /**\n     * 判断集合是否包含value\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Boolean sIsMember(String key, Object value) {\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n\n    /**\n     * 获取两个集合的交集\n     *\n     * @param key\n     * @param otherKey\n     * @return\n     */\n    public Set<String> sIntersect(String key, String otherKey) {\n        return redisTemplate.opsForSet().intersect(key, otherKey);\n    }\n\n    /**\n     * 获取key集合与多个集合的交集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sIntersect(String key, Collection<String> otherKeys) {\n        return redisTemplate.opsForSet().intersect(key, otherKeys);\n    }\n\n    /**\n     * key集合与otherKey集合的交集存储到destKey集合中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long sIntersectAndStore(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForSet().intersectAndStore(key, otherKey,\n                destKey);\n    }\n\n    /**\n     * key集合与多个集合的交集存储到destKey集合中\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long sIntersectAndStore(String key, Collection<String> otherKeys,\n                                   String destKey) {\n        return redisTemplate.opsForSet().intersectAndStore(key, otherKeys,\n                destKey);\n    }\n\n    /**\n     * 获取两个集合的并集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sUnion(String key, String otherKeys) {\n        return redisTemplate.opsForSet().union(key, otherKeys);\n    }\n\n    /**\n     * 获取key集合与多个集合的并集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sUnion(String key, Collection<String> otherKeys) {\n        return redisTemplate.opsForSet().union(key, otherKeys);\n    }\n\n    /**\n     * key集合与otherKey集合的并集存储到destKey中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long sUnionAndStore(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);\n    }\n\n    /**\n     * key集合与多个集合的并集存储到destKey中\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long sUnionAndStore(String key, Collection<String> otherKeys,\n                               String destKey) {\n        return redisTemplate.opsForSet().unionAndStore(key, otherKeys, destKey);\n    }\n\n    /**\n     * 获取两个集合的差集\n     *\n     * @param key\n     * @param otherKey\n     * @return\n     */\n    public Set<String> sDifference(String key, String otherKey) {\n        return redisTemplate.opsForSet().difference(key, otherKey);\n    }\n\n    /**\n     * 获取key集合与多个集合的差集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sDifference(String key, Collection<String> otherKeys) {\n        return redisTemplate.opsForSet().difference(key, otherKeys);\n    }\n\n    /**\n     * key集合与otherKey集合的差集存储到destKey中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long sDifference(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForSet().differenceAndStore(key, otherKey,\n                destKey);\n    }\n\n    /**\n     * key集合与多个集合的差集存储到destKey中\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long sDifference(String key, Collection<String> otherKeys,\n                            String destKey) {\n        return redisTemplate.opsForSet().differenceAndStore(key, otherKeys,\n                destKey);\n    }\n\n    /**\n     * 获取集合所有元素\n     *\n     * @param key\n     * @return\n     */\n    public Set<String> setMembers(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }\n\n    /**\n     * 随机获取集合中的一个元素\n     *\n     * @param key\n     * @return\n     */\n    public String sRandomMember(String key) {\n        return redisTemplate.opsForSet().randomMember(key);\n    }\n\n    /**\n     * 随机获取集合中count个元素\n     *\n     * @param key\n     * @param count\n     * @return\n     */\n    public List<String> sRandomMembers(String key, long count) {\n        return redisTemplate.opsForSet().randomMembers(key, count);\n    }\n\n    /**\n     * 随机获取集合中count个元素并且去除重复的\n     *\n     * @param key\n     * @param count\n     * @return\n     */\n    public Set<String> sDistinctRandomMembers(String key, long count) {\n        return redisTemplate.opsForSet().distinctRandomMembers(key, count);\n    }\n\n    /**\n     *\n     * @param key\n     * @param options\n     * @return\n     */\n    public Cursor<String> sScan(String key, ScanOptions options) {\n        return redisTemplate.opsForSet().scan(key, options);\n    }\n\n    /**------------------zSet相关操作--------------------------------*/\n\n    /**\n     * 添加元素,有序集合是按照元素的score值由小到大排列\n     *\n     * @param key\n     * @param value\n     * @param score\n     * @return\n     */\n    public Boolean zAdd(String key, String value, double score) {\n        return redisTemplate.opsForZSet().add(key, value, score);\n    }\n\n    /**\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long zAdd(String key, Set<TypedTuple<String>> values) {\n        return redisTemplate.opsForZSet().add(key, values);\n    }\n\n    /**\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long zRemove(String key, Object... values) {\n        return redisTemplate.opsForZSet().remove(key, values);\n    }\n\n    /**\n     * 增加元素的score值，并返回增加后的值\n     *\n     * @param key\n     * @param value\n     * @param delta\n     * @return\n     */\n    public Double zIncrementScore(String key, String value, double delta) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, delta);\n    }\n\n    /**\n     * 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列\n     *\n     * @param key\n     * @param value\n     * @return 0表示第一位\n     */\n    public Long zRank(String key, Object value) {\n        return redisTemplate.opsForZSet().rank(key, value);\n    }\n\n    /**\n     * 返回元素在集合的排名,按元素的score值由大到小排列\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long zReverseRank(String key, Object value) {\n        return redisTemplate.opsForZSet().reverseRank(key, value);\n    }\n\n    /**\n     * 获取集合的元素, 从小到大排序\n     *\n     * @param key\n     * @param start\n     *            开始位置\n     * @param end\n     *            结束位置, -1查询所有\n     * @return\n     */\n    public Set<String> zRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().range(key, start, end);\n    }\n\n    /**\n     * 获取集合元素, 并且把score值也获取\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<TypedTuple<String>> zRangeWithScores(String key, long start,\n                                                    long end) {\n        return redisTemplate.opsForZSet().rangeWithScores(key, start, end);\n    }\n\n    /**\n     * 根据Score值查询集合元素\n     *\n     * @param key\n     * @param min\n     *            最小值\n     * @param max\n     *            最大值\n     * @return\n     */\n    public Set<String> zRangeByScore(String key, double min, double max) {\n        return redisTemplate.opsForZSet().rangeByScore(key, min, max);\n    }\n\n    /**\n     * 根据Score值查询集合元素, 从小到大排序\n     *\n     * @param key\n     * @param min\n     *            最小值\n     * @param max\n     *            最大值\n     * @return\n     */\n    public Set<TypedTuple<String>> zRangeByScoreWithScores(String key,\n                                                           double min, double max) {\n        return redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);\n    }\n\n    /**\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<TypedTuple<String>> zRangeByScoreWithScores(String key,\n                                                           double min, double max, long start, long end) {\n        return redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max,\n                start, end);\n    }\n\n    /**\n     * 获取集合的元素, 从大到小排序\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<String> zReverseRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().reverseRange(key, start, end);\n    }\n\n    /**\n     * 获取集合的元素, 从大到小排序, 并返回score值\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<TypedTuple<String>> zReverseRangeWithScores(String key,\n                                                           long start, long end) {\n        return redisTemplate.opsForZSet().reverseRangeWithScores(key, start,\n                end);\n    }\n\n    /**\n     * 根据Score值查询集合元素, 从大到小排序\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Set<String> zReverseRangeByScore(String key, double min,\n                                            double max) {\n        return redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);\n    }\n\n    /**\n     * 根据Score值查询集合元素, 从大到小排序\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Set<TypedTuple<String>> zReverseRangeByScoreWithScores(\n            String key, double min, double max) {\n        return redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,\n                min, max);\n    }\n\n    /**\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<String> zReverseRangeByScore(String key, double min,\n                                            double max, long start, long end) {\n        return redisTemplate.opsForZSet().reverseRangeByScore(key, min, max,\n                start, end);\n    }\n\n    /**\n     * 根据score值获取集合元素数量\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Long zCount(String key, double min, double max) {\n        return redisTemplate.opsForZSet().count(key, min, max);\n    }\n\n    /**\n     * 获取集合大小\n     *\n     * @param key\n     * @return\n     */\n    public Long zSize(String key) {\n        return redisTemplate.opsForZSet().size(key);\n    }\n\n    /**\n     * 获取集合大小\n     *\n     * @param key\n     * @return\n     */\n    public Long zZCard(String key) {\n        return redisTemplate.opsForZSet().zCard(key);\n    }\n\n    /**\n     * 获取集合中value元素的score值\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Double zScore(String key, Object value) {\n        return redisTemplate.opsForZSet().score(key, value);\n    }\n\n    /**\n     * 移除指定索引位置的成员\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Long zRemoveRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().removeRange(key, start, end);\n    }\n\n    /**\n     * 根据指定的score值的范围来移除成员\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Long zRemoveRangeByScore(String key, double min, double max) {\n        return redisTemplate.opsForZSet().removeRangeByScore(key, min, max);\n    }\n\n    /**\n     * 获取key和otherKey的并集并存储在destKey中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long zUnionAndStore(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);\n    }\n\n    /**\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long zUnionAndStore(String key, Collection<String> otherKeys,\n                               String destKey) {\n        return redisTemplate.opsForZSet()\n                .unionAndStore(key, otherKeys, destKey);\n    }\n\n    /**\n     * 交集\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long zIntersectAndStore(String key, String otherKey,\n                                   String destKey) {\n        return redisTemplate.opsForZSet().intersectAndStore(key, otherKey,\n                destKey);\n    }\n\n    /**\n     * 交集\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long zIntersectAndStore(String key, Collection<String> otherKeys,\n                                   String destKey) {\n        return redisTemplate.opsForZSet().intersectAndStore(key, otherKeys,\n                destKey);\n    }\n\n    /**\n     *\n     * @param key\n     * @param options\n     * @return\n     */\n    public Cursor<TypedTuple<String>> zScan(String key, ScanOptions options) {\n        return redisTemplate.opsForZSet().scan(key, options);\n    }\n}\n```\n\n\n\nRedisTemplate配置\n\n```java\npackage com.config; import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.databind.ObjectMapper; import org.springframework.cache.CacheManager; import org.springframework.cache.annotation.CachingConfigurerSupport; import org.springframework.cache.annotation.EnableCaching; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.cache.RedisCacheManager; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.*; import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; /** * @author janti * reids 相关bean的配置 */ @Configuration @EnableCaching public class RedisConfig extends CachingConfigurerSupport {     /**     * 选择redis作为默认缓存工具     * @param redisTemplate     * @return     */    @Bean    public CacheManager cacheManager(RedisTemplate redisTemplate) {        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);        return rcm;    }     /**     * retemplate相关配置     * @param factory     * @return     */    @Bean    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {         RedisTemplate<String, Object> template = new RedisTemplate<>();        // 配置连接工厂        template.setConnectionFactory(factory);         //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);         ObjectMapper om = new ObjectMapper();        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jacksonSeial.setObjectMapper(om);         // 值采用json序列化        template.setValueSerializer(jacksonSeial);        //使用StringRedisSerializer来序列化和反序列化redis的key值        template.setKeySerializer(new StringRedisSerializer());         // 设置hash key 和value序列化模式        template.setHashKeySerializer(new StringRedisSerializer());        template.setHashValueSerializer(jacksonSeial);        template.afterPropertiesSet();         return template;    }     /**     * 对hash类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForHash();    }     /**     * 对redis字符串类型数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ValueOperations<String, Object> valueOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForValue();    }     /**     * 对链表类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ListOperations<String, Object> listOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForList();    }     /**     * 对无序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public SetOperations<String, Object> setOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForSet();    }     /**     * 对有序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ZSetOperations<String, Object> zSetOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForZSet();    } } \n\n\n```\n\n","source":"_posts/redis基础.md","raw":"---\ntitle: redis基础\ndate: 2021-05-09 17:07:12\ntags:\ncategories: redis\n---\n\n### jedis\n\n```java\npackage com.example.demo.controller;\n\nimport org.junit.Test;\nimport org.springframework.stereotype.Controller;\nimport redis.clients.jedis.Jedis;\n\nimport java.util.List;\n\n@Controller\npublic class TestController {\n\n    @Test\n    public void testJedis(){\n        Jedis jedis=new Jedis(\"127.0.0.1\",6379);\n        System.out.println(\"连接成功\");\n        //存储数据到列表中\n        jedis.lpush(\"site-list\", \"Runoob\");\n        jedis.lpush(\"site-list\", \"Google\");\n        jedis.lpush(\"site-list\", \"Taobao\");\n        // 获取存储的数据并输出\n        List<String> list = jedis.lrange(\"site-list\", 0 ,2);\n        for(int i=0; i<list.size(); i++) {\n            System.out.println(\"列表项为: \"+list.get(i));\n        }\n    }\n\n}\n```\n\n\n\n\n\n开启事务\n\n```java\npackage com.example.demo.controller;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.junit.Test;\nimport org.springframework.stereotype.Controller;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.Transaction;\n\nimport java.util.List;\n\n@Controller\npublic class TestController {\n\n    @Test\n    public void testJedis() throws JSONException {\n        Jedis jedis=new Jedis(\"127.0.0.1\",6379);\n\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"hello\",\"world\");\n        jsonObject.put(\"name\",\"acow\");\n        //开启事务\n        Transaction multi = jedis.multi();\n        String result = jsonObject.toString();\n\n        try {\n            multi.set(\"user1\",result);\n            multi.set(\"user2\",result);\n\n            //int i=1/0; 代码排除异常事务，执行失败\n            \n            multi.exec(); //执行事务\n        } catch (Exception e) {\n            multi.discard(); //放弃事务\n            e.printStackTrace();\n        } finally {\n            jedis.close();//关闭连接\n        }\n\n    }\n\n}\n```\n\n### Redis工具类\n\n```java\npackage com.example.demo.util;\n\nimport org.springframework.data.redis.connection.DataType;\nimport org.springframework.data.redis.core.Cursor;\nimport org.springframework.data.redis.core.ScanOptions;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.core.ZSetOperations.TypedTuple;\n\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Redis工具类*/\nclass RedisUtil {\n    private StringRedisTemplate redisTemplate;\n\n    public void setRedisTemplate(StringRedisTemplate redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public StringRedisTemplate getRedisTemplate() {\n        return this.redisTemplate;\n    }\n\n    /** -------------------key相关操作--------------------- */\n\n    /**\n     * 删除key\n     *\n     * @param key\n     */\n    public void delete(String key) {\n        redisTemplate.delete(key);\n    }\n\n    /**\n     * 批量删除key\n     *\n     * @param keys\n     */\n    public void delete(Collection<String> keys) {\n        redisTemplate.delete(keys);\n    }\n\n    /**\n     * 序列化key\n     *\n     * @param key\n     * @return\n     */\n    public byte[] dump(String key) {\n        return redisTemplate.dump(key);\n    }\n\n    /**\n     * 是否存在key\n     *\n     * @param key\n     * @return\n     */\n    public Boolean hasKey(String key) {\n        return redisTemplate.hasKey(key);\n    }\n\n    /**\n     * 设置过期时间\n     *\n     * @param key\n     * @param timeout\n     * @param unit\n     * @return\n     */\n    public Boolean expire(String key, long timeout, TimeUnit unit) {\n        return redisTemplate.expire(key, timeout, unit);\n    }\n\n    /**\n     * 设置过期时间\n     *\n     * @param key\n     * @param date\n     * @return\n     */\n    public Boolean expireAt(String key, Date date) {\n        return redisTemplate.expireAt(key, date);\n    }\n\n    /**\n     * 查找匹配的key\n     *\n     * @param pattern\n     * @return\n     */\n    public Set<String> keys(String pattern) {\n        return redisTemplate.keys(pattern);\n    }\n\n    /**\n     * 将当前数据库的 key 移动到给定的数据库 db 当中\n     *\n     * @param key\n     * @param dbIndex\n     * @return\n     */\n    public Boolean move(String key, int dbIndex) {\n        return redisTemplate.move(key, dbIndex);\n    }\n\n    /**\n     * 移除 key 的过期时间，key 将持久保持\n     *\n     * @param key\n     * @return\n     */\n    public Boolean persist(String key) {\n        return redisTemplate.persist(key);\n    }\n\n    /**\n     * 返回 key 的剩余的过期时间\n     *\n     * @param key\n     * @param unit\n     * @return\n     */\n    public Long getExpire(String key, TimeUnit unit) {\n        return redisTemplate.getExpire(key, unit);\n    }\n\n    /**\n     * 返回 key 的剩余的过期时间\n     *\n     * @param key\n     * @return\n     */\n    public Long getExpire(String key) {\n        return redisTemplate.getExpire(key);\n    }\n\n    /**\n     * 从当前数据库中随机返回一个 key\n     *\n     * @return\n     */\n    public String randomKey() {\n        return redisTemplate.randomKey();\n    }\n\n    /**\n     * 修改 key 的名称\n     *\n     * @param oldKey\n     * @param newKey\n     */\n    public void rename(String oldKey, String newKey) {\n        redisTemplate.rename(oldKey, newKey);\n    }\n\n    /**\n     * 仅当 newkey 不存在时，将 oldKey 改名为 newkey\n     *\n     * @param oldKey\n     * @param newKey\n     * @return\n     */\n    public Boolean renameIfAbsent(String oldKey, String newKey) {\n        return redisTemplate.renameIfAbsent(oldKey, newKey);\n    }\n\n    /**\n     * 返回 key 所储存的值的类型\n     *\n     * @param key\n     * @return\n     */\n    public DataType type(String key) {\n        return redisTemplate.type(key);\n    }\n\n    /** -------------------string相关操作--------------------- */\n\n    /**\n     * 设置指定 key 的值\n     * @param key\n     * @param value\n     */\n    public void set(String key, String value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    /**\n     * 获取指定 key 的值\n     * @param key\n     * @return\n     */\n    public String get(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n\n    /**\n     * 返回 key 中字符串值的子字符\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public String getRange(String key, long start, long end) {\n        return redisTemplate.opsForValue().get(key, start, end);\n    }\n\n    /**\n     * 将给定 key 的值设为 value ，并返回 key 的旧值(old value)\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public String getAndSet(String key, String value) {\n        return redisTemplate.opsForValue().getAndSet(key, value);\n    }\n\n    /**\n     * 对 key 所储存的字符串值，获取指定偏移量上的位(bit)\n     *\n     * @param key\n     * @param offset\n     * @return\n     */\n    public Boolean getBit(String key, long offset) {\n        return redisTemplate.opsForValue().getBit(key, offset);\n    }\n\n    /**\n     * 批量获取\n     *\n     * @param keys\n     * @return\n     */\n    public List<String> multiGet(Collection<String> keys) {\n        return redisTemplate.opsForValue().multiGet(keys);\n    }\n\n    /**\n     * 设置ASCII码, 字符串'a'的ASCII码是97, 转为二进制是'01100001', 此方法是将二进制第offset位值变为value\n     *\n     * @param key 位置\n     * @param value\n     *            值,true为1, false为0\n     * @return\n     */\n    public boolean setBit(String key, long offset, boolean value) {\n        return redisTemplate.opsForValue().setBit(key, offset, value);\n    }\n\n    /**\n     * 将值 value 关联到 key ，并将 key 的过期时间设为 timeout\n     *\n     * @param key\n     * @param value\n     * @param timeout\n     *            过期时间\n     * @param unit\n     *            时间单位, 天:TimeUnit.DAYS 小时:TimeUnit.HOURS 分钟:TimeUnit.MINUTES\n     *            秒:TimeUnit.SECONDS 毫秒:TimeUnit.MILLISECONDS\n     */\n    public void setEx(String key, String value, long timeout, TimeUnit unit) {\n        redisTemplate.opsForValue().set(key, value, timeout, unit);\n    }\n\n    /**\n     * 只有在 key 不存在时设置 key 的值\n     *\n     * @param key\n     * @param value\n     * @return 之前已经存在返回false,不存在返回true\n     */\n    public boolean setIfAbsent(String key, String value) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value);\n    }\n\n    /**\n     * 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始\n     *\n     * @param key\n     * @param value\n     * @param offset\n     *            从指定位置开始覆写\n     */\n    public void setRange(String key, String value, long offset) {\n        redisTemplate.opsForValue().set(key, value, offset);\n    }\n\n    /**\n     * 获取字符串的长度\n     *\n     * @param key\n     * @return\n     */\n    public Long size(String key) {\n        return redisTemplate.opsForValue().size(key);\n    }\n\n    /**\n     * 批量添加\n     *\n     * @param maps\n     */\n    public void multiSet(Map<String, String> maps) {\n        redisTemplate.opsForValue().multiSet(maps);\n    }\n\n    /**\n     * 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在\n     *\n     * @param maps\n     * @return 之前已经存在返回false,不存在返回true\n     */\n    public boolean multiSetIfAbsent(Map<String, String> maps) {\n        return redisTemplate.opsForValue().multiSetIfAbsent(maps);\n    }\n\n    /**\n     * 增加(自增长), 负数则为自减\n     *\n     * @param key\n     * @return\n     */\n    public Long incrBy(String key, long increment) {\n        return redisTemplate.opsForValue().increment(key, increment);\n    }\n\n    /**\n     *\n     * @param key\n     * @return\n     */\n    public Double incrByFloat(String key, double increment) {\n        return redisTemplate.opsForValue().increment(key, increment);\n    }\n\n    /**\n     * 追加到末尾\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Integer append(String key, String value) {\n        return redisTemplate.opsForValue().append(key, value);\n    }\n\n    /** -------------------hash相关操作------------------------- */\n\n    /**\n     * 获取存储在哈希表中指定字段的值\n     *\n     * @param key\n     * @param field\n     * @return\n     */\n    public Object hGet(String key, String field) {\n        return redisTemplate.opsForHash().get(key, field);\n    }\n\n    /**\n     * 获取所有给定字段的值\n     *\n     * @param key\n     * @return\n     */\n    public Map<Object, Object> hGetAll(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n    /**\n     * 获取所有给定字段的值\n     *\n     * @param key\n     * @param fields\n     * @return\n     */\n    public List<Object> hMultiGet(String key, Collection<Object> fields) {\n        return redisTemplate.opsForHash().multiGet(key, fields);\n    }\n\n    public void hPut(String key, String hashKey, String value) {\n        redisTemplate.opsForHash().put(key, hashKey, value);\n    }\n\n    public void hPutAll(String key, Map<String, String> maps) {\n        redisTemplate.opsForHash().putAll(key, maps);\n    }\n\n    /**\n     * 仅当hashKey不存在时才设置\n     *\n     * @param key\n     * @param hashKey\n     * @param value\n     * @return\n     */\n    public Boolean hPutIfAbsent(String key, String hashKey, String value) {\n        return redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);\n    }\n\n    /**\n     * 删除一个或多个哈希表字段\n     *\n     * @param key\n     * @param fields\n     * @return\n     */\n    public Long hDelete(String key, Object... fields) {\n        return redisTemplate.opsForHash().delete(key, fields);\n    }\n\n    /**\n     * 查看哈希表 key 中，指定的字段是否存在\n     *\n     * @param key\n     * @param field\n     * @return\n     */\n    public boolean hExists(String key, String field) {\n        return redisTemplate.opsForHash().hasKey(key, field);\n    }\n\n    /**\n     * 为哈希表 key 中的指定字段的整数值加上增量 increment\n     *\n     * @param key\n     * @param field\n     * @param increment\n     * @return\n     */\n    public Long hIncrBy(String key, Object field, long increment) {\n        return redisTemplate.opsForHash().increment(key, field, increment);\n    }\n\n    /**\n     * 为哈希表 key 中的指定字段的整数值加上增量 increment\n     *\n     * @param key\n     * @param field\n     * @param delta\n     * @return\n     */\n    public Double hIncrByFloat(String key, Object field, double delta) {\n        return redisTemplate.opsForHash().increment(key, field, delta);\n    }\n\n    /**\n     * 获取所有哈希表中的字段\n     *\n     * @param key\n     * @return\n     */\n    public Set<Object> hKeys(String key) {\n        return redisTemplate.opsForHash().keys(key);\n    }\n\n    /**\n     * 获取哈希表中字段的数量\n     *\n     * @param key\n     * @return\n     */\n    public Long hSize(String key) {\n        return redisTemplate.opsForHash().size(key);\n    }\n\n    /**\n     * 获取哈希表中所有值\n     *\n     * @param key\n     * @return\n     */\n    public List<Object> hValues(String key) {\n        return redisTemplate.opsForHash().values(key);\n    }\n\n    /**\n     * 迭代哈希表中的键值对\n     *\n     * @param key\n     * @param options\n     * @return\n     */\n    public Cursor<Entry<Object, Object>> hScan(String key, ScanOptions options) {\n        return redisTemplate.opsForHash().scan(key, options);\n    }\n\n    /** ------------------------list相关操作---------------------------- */\n\n    /**\n     * 通过索引获取列表中的元素\n     *\n     * @param key\n     * @param index\n     * @return\n     */\n    public String lIndex(String key, long index) {\n        return redisTemplate.opsForList().index(key, index);\n    }\n\n    /**\n     * 获取列表指定范围内的元素\n     *\n     * @param key\n     * @param start\n     *            开始位置, 0是开始位置\n     * @param end\n     *            结束位置, -1返回所有\n     * @return\n     */\n    public List<String> lRange(String key, long start, long end) {\n        return redisTemplate.opsForList().range(key, start, end);\n    }\n\n    /**\n     * 存储在list头部\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPush(String key, String value) {\n        return redisTemplate.opsForList().leftPush(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPushAll(String key, String... value) {\n        return redisTemplate.opsForList().leftPushAll(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPushAll(String key, Collection<String> value) {\n        return redisTemplate.opsForList().leftPushAll(key, value);\n    }\n\n    /**\n     * 当list存在的时候才加入\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lLeftPushIfPresent(String key, String value) {\n        return redisTemplate.opsForList().leftPushIfPresent(key, value);\n    }\n\n    /**\n     * 如果pivot存在,再pivot前面添加\n     *\n     * @param key\n     * @param pivot\n     * @param value\n     * @return\n     */\n    public Long lLeftPush(String key, String pivot, String value) {\n        return redisTemplate.opsForList().leftPush(key, pivot, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPush(String key, String value) {\n        return redisTemplate.opsForList().rightPush(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPushAll(String key, String... value) {\n        return redisTemplate.opsForList().rightPushAll(key, value);\n    }\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPushAll(String key, Collection<String> value) {\n        return redisTemplate.opsForList().rightPushAll(key, value);\n    }\n\n    /**\n     * 为已存在的列表添加值\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long lRightPushIfPresent(String key, String value) {\n        return redisTemplate.opsForList().rightPushIfPresent(key, value);\n    }\n\n    /**\n     * 在pivot元素的右边添加值\n     *\n     * @param key\n     * @param pivot\n     * @param value\n     * @return\n     */\n    public Long lRightPush(String key, String pivot, String value) {\n        return redisTemplate.opsForList().rightPush(key, pivot, value);\n    }\n\n    /**\n     * 通过索引设置列表元素的值\n     *\n     * @param key\n     * @param index\n     *            位置\n     * @param value\n     */\n    public void lSet(String key, long index, String value) {\n        redisTemplate.opsForList().set(key, index, value);\n    }\n\n    /**\n     * 移出并获取列表的第一个元素\n     *\n     * @param key\n     * @return 删除的元素\n     */\n    public String lLeftPop(String key) {\n        return redisTemplate.opsForList().leftPop(key);\n    }\n\n    /**\n     * 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n     *\n     * @param key\n     * @param timeout\n     *            等待时间\n     * @param unit\n     *            时间单位\n     * @return\n     */\n    public String lBLeftPop(String key, long timeout, TimeUnit unit) {\n        return redisTemplate.opsForList().leftPop(key, timeout, unit);\n    }\n\n    /**\n     * 移除并获取列表最后一个元素\n     *\n     * @param key\n     * @return 删除的元素\n     */\n    public String lRightPop(String key) {\n        return redisTemplate.opsForList().rightPop(key);\n    }\n\n    /**\n     * 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n     *\n     * @param key\n     * @param timeout\n     *            等待时间\n     * @param unit\n     *            时间单位\n     * @return\n     */\n    public String lBRightPop(String key, long timeout, TimeUnit unit) {\n        return redisTemplate.opsForList().rightPop(key, timeout, unit);\n    }\n\n    /**\n     * 移除列表的最后一个元素，并将该元素添加到另一个列表并返回\n     *\n     * @param sourceKey\n     * @param destinationKey\n     * @return\n     */\n    public String lRightPopAndLeftPush(String sourceKey, String destinationKey) {\n        return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,\n                destinationKey);\n    }\n\n    /**\n     * 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\n     *\n     * @param sourceKey\n     * @param destinationKey\n     * @param timeout\n     * @param unit\n     * @return\n     */\n    public String lBRightPopAndLeftPush(String sourceKey, String destinationKey,\n                                        long timeout, TimeUnit unit) {\n        return redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,\n                destinationKey, timeout, unit);\n    }\n\n    /**\n     * 删除集合中值等于value得元素\n     *\n     * @param key\n     * @param index\n     *            index=0, 删除所有值等于value的元素; index>0, 从头部开始删除第一个值等于value的元素;\n     *            index<0, 从尾部开始删除第一个值等于value的元素;\n     * @param value\n     * @return\n     */\n    public Long lRemove(String key, long index, String value) {\n        return redisTemplate.opsForList().remove(key, index, value);\n    }\n\n    /**\n     * 裁剪list\n     *\n     * @param key\n     * @param start\n     * @param end\n     */\n    public void lTrim(String key, long start, long end) {\n        redisTemplate.opsForList().trim(key, start, end);\n    }\n\n    /**\n     * 获取列表长度\n     *\n     * @param key\n     * @return\n     */\n    public Long lLen(String key) {\n        return redisTemplate.opsForList().size(key);\n    }\n\n    /** --------------------set相关操作-------------------------- */\n\n    /**\n     * set添加元素\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long sAdd(String key, String... values) {\n        return redisTemplate.opsForSet().add(key, values);\n    }\n\n    /**\n     * set移除元素\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long sRemove(String key, Object... values) {\n        return redisTemplate.opsForSet().remove(key, values);\n    }\n\n    /**\n     * 移除并返回集合的一个随机元素\n     *\n     * @param key\n     * @return\n     */\n    public String sPop(String key) {\n        return redisTemplate.opsForSet().pop(key);\n    }\n\n    /**\n     * 将元素value从一个集合移到另一个集合\n     *\n     * @param key\n     * @param value\n     * @param destKey\n     * @return\n     */\n    public Boolean sMove(String key, String value, String destKey) {\n        return redisTemplate.opsForSet().move(key, value, destKey);\n    }\n\n    /**\n     * 获取集合的大小\n     *\n     * @param key\n     * @return\n     */\n    public Long sSize(String key) {\n        return redisTemplate.opsForSet().size(key);\n    }\n\n    /**\n     * 判断集合是否包含value\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Boolean sIsMember(String key, Object value) {\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n\n    /**\n     * 获取两个集合的交集\n     *\n     * @param key\n     * @param otherKey\n     * @return\n     */\n    public Set<String> sIntersect(String key, String otherKey) {\n        return redisTemplate.opsForSet().intersect(key, otherKey);\n    }\n\n    /**\n     * 获取key集合与多个集合的交集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sIntersect(String key, Collection<String> otherKeys) {\n        return redisTemplate.opsForSet().intersect(key, otherKeys);\n    }\n\n    /**\n     * key集合与otherKey集合的交集存储到destKey集合中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long sIntersectAndStore(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForSet().intersectAndStore(key, otherKey,\n                destKey);\n    }\n\n    /**\n     * key集合与多个集合的交集存储到destKey集合中\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long sIntersectAndStore(String key, Collection<String> otherKeys,\n                                   String destKey) {\n        return redisTemplate.opsForSet().intersectAndStore(key, otherKeys,\n                destKey);\n    }\n\n    /**\n     * 获取两个集合的并集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sUnion(String key, String otherKeys) {\n        return redisTemplate.opsForSet().union(key, otherKeys);\n    }\n\n    /**\n     * 获取key集合与多个集合的并集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sUnion(String key, Collection<String> otherKeys) {\n        return redisTemplate.opsForSet().union(key, otherKeys);\n    }\n\n    /**\n     * key集合与otherKey集合的并集存储到destKey中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long sUnionAndStore(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);\n    }\n\n    /**\n     * key集合与多个集合的并集存储到destKey中\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long sUnionAndStore(String key, Collection<String> otherKeys,\n                               String destKey) {\n        return redisTemplate.opsForSet().unionAndStore(key, otherKeys, destKey);\n    }\n\n    /**\n     * 获取两个集合的差集\n     *\n     * @param key\n     * @param otherKey\n     * @return\n     */\n    public Set<String> sDifference(String key, String otherKey) {\n        return redisTemplate.opsForSet().difference(key, otherKey);\n    }\n\n    /**\n     * 获取key集合与多个集合的差集\n     *\n     * @param key\n     * @param otherKeys\n     * @return\n     */\n    public Set<String> sDifference(String key, Collection<String> otherKeys) {\n        return redisTemplate.opsForSet().difference(key, otherKeys);\n    }\n\n    /**\n     * key集合与otherKey集合的差集存储到destKey中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long sDifference(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForSet().differenceAndStore(key, otherKey,\n                destKey);\n    }\n\n    /**\n     * key集合与多个集合的差集存储到destKey中\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long sDifference(String key, Collection<String> otherKeys,\n                            String destKey) {\n        return redisTemplate.opsForSet().differenceAndStore(key, otherKeys,\n                destKey);\n    }\n\n    /**\n     * 获取集合所有元素\n     *\n     * @param key\n     * @return\n     */\n    public Set<String> setMembers(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }\n\n    /**\n     * 随机获取集合中的一个元素\n     *\n     * @param key\n     * @return\n     */\n    public String sRandomMember(String key) {\n        return redisTemplate.opsForSet().randomMember(key);\n    }\n\n    /**\n     * 随机获取集合中count个元素\n     *\n     * @param key\n     * @param count\n     * @return\n     */\n    public List<String> sRandomMembers(String key, long count) {\n        return redisTemplate.opsForSet().randomMembers(key, count);\n    }\n\n    /**\n     * 随机获取集合中count个元素并且去除重复的\n     *\n     * @param key\n     * @param count\n     * @return\n     */\n    public Set<String> sDistinctRandomMembers(String key, long count) {\n        return redisTemplate.opsForSet().distinctRandomMembers(key, count);\n    }\n\n    /**\n     *\n     * @param key\n     * @param options\n     * @return\n     */\n    public Cursor<String> sScan(String key, ScanOptions options) {\n        return redisTemplate.opsForSet().scan(key, options);\n    }\n\n    /**------------------zSet相关操作--------------------------------*/\n\n    /**\n     * 添加元素,有序集合是按照元素的score值由小到大排列\n     *\n     * @param key\n     * @param value\n     * @param score\n     * @return\n     */\n    public Boolean zAdd(String key, String value, double score) {\n        return redisTemplate.opsForZSet().add(key, value, score);\n    }\n\n    /**\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long zAdd(String key, Set<TypedTuple<String>> values) {\n        return redisTemplate.opsForZSet().add(key, values);\n    }\n\n    /**\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    public Long zRemove(String key, Object... values) {\n        return redisTemplate.opsForZSet().remove(key, values);\n    }\n\n    /**\n     * 增加元素的score值，并返回增加后的值\n     *\n     * @param key\n     * @param value\n     * @param delta\n     * @return\n     */\n    public Double zIncrementScore(String key, String value, double delta) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, delta);\n    }\n\n    /**\n     * 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列\n     *\n     * @param key\n     * @param value\n     * @return 0表示第一位\n     */\n    public Long zRank(String key, Object value) {\n        return redisTemplate.opsForZSet().rank(key, value);\n    }\n\n    /**\n     * 返回元素在集合的排名,按元素的score值由大到小排列\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Long zReverseRank(String key, Object value) {\n        return redisTemplate.opsForZSet().reverseRank(key, value);\n    }\n\n    /**\n     * 获取集合的元素, 从小到大排序\n     *\n     * @param key\n     * @param start\n     *            开始位置\n     * @param end\n     *            结束位置, -1查询所有\n     * @return\n     */\n    public Set<String> zRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().range(key, start, end);\n    }\n\n    /**\n     * 获取集合元素, 并且把score值也获取\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<TypedTuple<String>> zRangeWithScores(String key, long start,\n                                                    long end) {\n        return redisTemplate.opsForZSet().rangeWithScores(key, start, end);\n    }\n\n    /**\n     * 根据Score值查询集合元素\n     *\n     * @param key\n     * @param min\n     *            最小值\n     * @param max\n     *            最大值\n     * @return\n     */\n    public Set<String> zRangeByScore(String key, double min, double max) {\n        return redisTemplate.opsForZSet().rangeByScore(key, min, max);\n    }\n\n    /**\n     * 根据Score值查询集合元素, 从小到大排序\n     *\n     * @param key\n     * @param min\n     *            最小值\n     * @param max\n     *            最大值\n     * @return\n     */\n    public Set<TypedTuple<String>> zRangeByScoreWithScores(String key,\n                                                           double min, double max) {\n        return redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);\n    }\n\n    /**\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<TypedTuple<String>> zRangeByScoreWithScores(String key,\n                                                           double min, double max, long start, long end) {\n        return redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max,\n                start, end);\n    }\n\n    /**\n     * 获取集合的元素, 从大到小排序\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<String> zReverseRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().reverseRange(key, start, end);\n    }\n\n    /**\n     * 获取集合的元素, 从大到小排序, 并返回score值\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<TypedTuple<String>> zReverseRangeWithScores(String key,\n                                                           long start, long end) {\n        return redisTemplate.opsForZSet().reverseRangeWithScores(key, start,\n                end);\n    }\n\n    /**\n     * 根据Score值查询集合元素, 从大到小排序\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Set<String> zReverseRangeByScore(String key, double min,\n                                            double max) {\n        return redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);\n    }\n\n    /**\n     * 根据Score值查询集合元素, 从大到小排序\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Set<TypedTuple<String>> zReverseRangeByScoreWithScores(\n            String key, double min, double max) {\n        return redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,\n                min, max);\n    }\n\n    /**\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @param start\n     * @param end\n     * @return\n     */\n    public Set<String> zReverseRangeByScore(String key, double min,\n                                            double max, long start, long end) {\n        return redisTemplate.opsForZSet().reverseRangeByScore(key, min, max,\n                start, end);\n    }\n\n    /**\n     * 根据score值获取集合元素数量\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Long zCount(String key, double min, double max) {\n        return redisTemplate.opsForZSet().count(key, min, max);\n    }\n\n    /**\n     * 获取集合大小\n     *\n     * @param key\n     * @return\n     */\n    public Long zSize(String key) {\n        return redisTemplate.opsForZSet().size(key);\n    }\n\n    /**\n     * 获取集合大小\n     *\n     * @param key\n     * @return\n     */\n    public Long zZCard(String key) {\n        return redisTemplate.opsForZSet().zCard(key);\n    }\n\n    /**\n     * 获取集合中value元素的score值\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    public Double zScore(String key, Object value) {\n        return redisTemplate.opsForZSet().score(key, value);\n    }\n\n    /**\n     * 移除指定索引位置的成员\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Long zRemoveRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().removeRange(key, start, end);\n    }\n\n    /**\n     * 根据指定的score值的范围来移除成员\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    public Long zRemoveRangeByScore(String key, double min, double max) {\n        return redisTemplate.opsForZSet().removeRangeByScore(key, min, max);\n    }\n\n    /**\n     * 获取key和otherKey的并集并存储在destKey中\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long zUnionAndStore(String key, String otherKey, String destKey) {\n        return redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);\n    }\n\n    /**\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long zUnionAndStore(String key, Collection<String> otherKeys,\n                               String destKey) {\n        return redisTemplate.opsForZSet()\n                .unionAndStore(key, otherKeys, destKey);\n    }\n\n    /**\n     * 交集\n     *\n     * @param key\n     * @param otherKey\n     * @param destKey\n     * @return\n     */\n    public Long zIntersectAndStore(String key, String otherKey,\n                                   String destKey) {\n        return redisTemplate.opsForZSet().intersectAndStore(key, otherKey,\n                destKey);\n    }\n\n    /**\n     * 交集\n     *\n     * @param key\n     * @param otherKeys\n     * @param destKey\n     * @return\n     */\n    public Long zIntersectAndStore(String key, Collection<String> otherKeys,\n                                   String destKey) {\n        return redisTemplate.opsForZSet().intersectAndStore(key, otherKeys,\n                destKey);\n    }\n\n    /**\n     *\n     * @param key\n     * @param options\n     * @return\n     */\n    public Cursor<TypedTuple<String>> zScan(String key, ScanOptions options) {\n        return redisTemplate.opsForZSet().scan(key, options);\n    }\n}\n```\n\n\n\nRedisTemplate配置\n\n```java\npackage com.config; import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.databind.ObjectMapper; import org.springframework.cache.CacheManager; import org.springframework.cache.annotation.CachingConfigurerSupport; import org.springframework.cache.annotation.EnableCaching; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.cache.RedisCacheManager; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.*; import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; /** * @author janti * reids 相关bean的配置 */ @Configuration @EnableCaching public class RedisConfig extends CachingConfigurerSupport {     /**     * 选择redis作为默认缓存工具     * @param redisTemplate     * @return     */    @Bean    public CacheManager cacheManager(RedisTemplate redisTemplate) {        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);        return rcm;    }     /**     * retemplate相关配置     * @param factory     * @return     */    @Bean    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {         RedisTemplate<String, Object> template = new RedisTemplate<>();        // 配置连接工厂        template.setConnectionFactory(factory);         //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);         ObjectMapper om = new ObjectMapper();        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jacksonSeial.setObjectMapper(om);         // 值采用json序列化        template.setValueSerializer(jacksonSeial);        //使用StringRedisSerializer来序列化和反序列化redis的key值        template.setKeySerializer(new StringRedisSerializer());         // 设置hash key 和value序列化模式        template.setHashKeySerializer(new StringRedisSerializer());        template.setHashValueSerializer(jacksonSeial);        template.afterPropertiesSet();         return template;    }     /**     * 对hash类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForHash();    }     /**     * 对redis字符串类型数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ValueOperations<String, Object> valueOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForValue();    }     /**     * 对链表类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ListOperations<String, Object> listOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForList();    }     /**     * 对无序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public SetOperations<String, Object> setOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForSet();    }     /**     * 对有序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ZSetOperations<String, Object> zSetOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForZSet();    } } \n\n\n```\n\n","slug":"redis基础","published":1,"updated":"2021-05-09T09:07:44.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckogykg3a0004k270blhyc0y2","content":"<h3 id=\"jedis\"><a href=\"#jedis\" class=\"headerlink\" title=\"jedis\"></a>jedis</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJedis</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Jedis jedis=<span class=\"keyword\">new</span> Jedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;连接成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//存储数据到列表中</span></span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Google&quot;</span>);</span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Taobao&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取存储的数据并输出</span></span><br><span class=\"line\">        List&lt;String&gt; list = jedis.lrange(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"number\">0</span> ,<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;列表项为: &quot;</span>+list.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>开启事务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJedis</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JSONException </span>&#123;</span><br><span class=\"line\">        Jedis jedis=<span class=\"keyword\">new</span> Jedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;acow&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        Transaction multi = jedis.multi();</span><br><span class=\"line\">        String result = jsonObject.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user1&quot;</span>,result);</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user2&quot;</span>,result);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//int i=1/0; 代码排除异常事务，执行失败</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            multi.exec(); <span class=\"comment\">//执行事务</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            multi.discard(); <span class=\"comment\">//放弃事务</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            jedis.close();<span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis工具类\"><a href=\"#Redis工具类\" class=\"headerlink\" title=\"Redis工具类\"></a>Redis工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.DataType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.Cursor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ScanOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ZSetOperations.TypedTuple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis工具类*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRedisTemplate</span><span class=\"params\">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title\">getRedisTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** -------------------key相关操作--------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.delete(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Collection&lt;String&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.delete(keys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 序列化key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] dump(String key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.dump(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否存在key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">hasKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">expire</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> date</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">expireAt</span><span class=\"params\">(String key, Date date)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.expireAt(key, date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找匹配的key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">(String pattern)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.keys(pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将当前数据库的 key 移动到给定的数据库 db 当中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dbIndex</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">move</span><span class=\"params\">(String key, <span class=\"keyword\">int</span> dbIndex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.move(key, dbIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除 key 的过期时间，key 将持久保持</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">persist</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.persist(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 的剩余的过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getExpire</span><span class=\"params\">(String key, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 的剩余的过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getExpire</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从当前数据库中随机返回一个 key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">randomKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.randomKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改 key 的名称</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> oldKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newKey</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rename</span><span class=\"params\">(String oldKey, String newKey)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.rename(oldKey, newKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 仅当 newkey 不存在时，将 oldKey 改名为 newkey</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> oldKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">renameIfAbsent</span><span class=\"params\">(String oldKey, String newKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 所储存的值的类型</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataType <span class=\"title\">type</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.type(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** -------------------string相关操作--------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置指定 key 的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取指定 key 的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 中字符串值的子字符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().get(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将给定 key 的值设为 value ，并返回 key 的旧值(old value)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAndSet</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对 key 所储存的字符串值，获取指定偏移量上的位(bit)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getBit</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().getBit(key, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">multiGet</span><span class=\"params\">(Collection&lt;String&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().multiGet(keys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置ASCII码, 字符串&#x27;a&#x27;的ASCII码是97, 转为二进制是&#x27;01100001&#x27;, 此方法是将二进制第offset位值变为value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     *            值,true为1, false为0</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setBit</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> offset, <span class=\"keyword\">boolean</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().setBit(key, offset, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将值 value 关联到 key ，并将 key 的过期时间设为 timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *            过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间单位, 天:TimeUnit.DAYS 小时:TimeUnit.HOURS 分钟:TimeUnit.MINUTES</span></span><br><span class=\"line\"><span class=\"comment\">     *            秒:TimeUnit.SECONDS 毫秒:TimeUnit.MILLISECONDS</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEx</span><span class=\"params\">(String key, String value, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 只有在 key 不存在时设置 key 的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 之前已经存在返回false,不存在返回true</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setIfAbsent</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> offset</span></span><br><span class=\"line\"><span class=\"comment\">     *            从指定位置开始覆写</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRange</span><span class=\"params\">(String key, String value, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">size</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maps</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">multiSet</span><span class=\"params\">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().multiSet(maps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maps</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 之前已经存在返回false,不存在返回true</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">multiSetIfAbsent</span><span class=\"params\">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().multiSetIfAbsent(maps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加(自增长), 负数则为自减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">incrBy</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> increment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">incrByFloat</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> increment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 追加到末尾</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">append</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().append(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** -------------------hash相关操作------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取存储在哈希表中指定字段的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hGet</span><span class=\"params\">(String key, String field)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().get(key, field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有给定字段的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Object, Object&gt; <span class=\"title\">hGetAll</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有给定字段的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fields</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">hMultiGet</span><span class=\"params\">(String key, Collection&lt;Object&gt; fields)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().multiGet(key, fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hPut</span><span class=\"params\">(String key, String hashKey, String value)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hPutAll</span><span class=\"params\">(String key, Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().putAll(key, maps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 仅当hashKey不存在时才设置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hashKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">hPutIfAbsent</span><span class=\"params\">(String key, String hashKey, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一个或多个哈希表字段</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fields</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">hDelete</span><span class=\"params\">(String key, Object... fields)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().delete(key, fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看哈希表 key 中，指定的字段是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hExists</span><span class=\"params\">(String key, String field)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().hasKey(key, field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为哈希表 key 中的指定字段的整数值加上增量 increment</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> increment</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">hIncrBy</span><span class=\"params\">(String key, Object field, <span class=\"keyword\">long</span> increment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, field, increment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为哈希表 key 中的指定字段的整数值加上增量 increment</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">hIncrByFloat</span><span class=\"params\">(String key, Object field, <span class=\"keyword\">double</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, field, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有哈希表中的字段</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">hKeys</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().keys(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取哈希表中字段的数量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">hSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取哈希表中所有值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">hValues</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().values(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 迭代哈希表中的键值对</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor&lt;Entry&lt;Object, Object&gt;&gt; hScan(String key, ScanOptions options) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().scan(key, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** ------------------------list相关操作---------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引获取列表中的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取列表指定范围内的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     *            开始位置, 0是开始位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     *            结束位置, -1返回所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">lRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储在list头部</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPush</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPush(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPushAll</span><span class=\"params\">(String key, String... value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPushAll</span><span class=\"params\">(String key, Collection&lt;String&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当list存在的时候才加入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPushIfPresent</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPushIfPresent(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果pivot存在,再pivot前面添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pivot</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPush</span><span class=\"params\">(String key, String pivot, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPush(key, pivot, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPush</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPushAll</span><span class=\"params\">(String key, String... value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPushAll</span><span class=\"params\">(String key, Collection&lt;String&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为已存在的列表添加值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPushIfPresent</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPushIfPresent(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在pivot元素的右边添加值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pivot</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPush</span><span class=\"params\">(String key, String pivot, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPush(key, pivot, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引设置列表元素的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     *            位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, String value)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForList().set(key, index, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移出并获取列表的第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lLeftPop</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPop(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *            等待时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lBLeftPop</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPop(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除并获取列表最后一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lRightPop</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPop(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *            等待时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lBRightPop</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPop(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destinationKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lRightPopAndLeftPush</span><span class=\"params\">(String sourceKey, String destinationKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,</span><br><span class=\"line\">                destinationKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destinationKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lBRightPopAndLeftPush</span><span class=\"params\">(String sourceKey, String destinationKey,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,</span><br><span class=\"line\">                destinationKey, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除集合中值等于value得元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     *            index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素;</span></span><br><span class=\"line\"><span class=\"comment\">     *            index&lt;0, 从尾部开始删除第一个值等于value的元素;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRemove</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().remove(key, index, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 裁剪list</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lTrim</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForList().trim(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取列表长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLen</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** --------------------set相关操作-------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sAdd</span><span class=\"params\">(String key, String... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set移除元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除并返回集合的一个随机元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sPop</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().pop(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将元素value从一个集合移到另一个集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">sMove</span><span class=\"params\">(String key, String value, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().move(key, value, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断集合是否包含value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">sIsMember</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取两个集合的交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sIntersect</span><span class=\"params\">(String key, String otherKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersect(key, otherKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key集合与多个集合的交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sIntersect</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersect(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与otherKey集合的交集存储到destKey集合中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sIntersectAndStore</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersectAndStore(key, otherKey,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与多个集合的交集存储到destKey集合中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sIntersectAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersectAndStore(key, otherKeys,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取两个集合的并集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sUnion</span><span class=\"params\">(String key, String otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().union(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key集合与多个集合的并集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sUnion</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().union(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与otherKey集合的并集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sUnionAndStore</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与多个集合的并集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sUnionAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().unionAndStore(key, otherKeys, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取两个集合的差集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sDifference</span><span class=\"params\">(String key, String otherKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().difference(key, otherKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key集合与多个集合的差集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sDifference</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().difference(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与otherKey集合的差集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sDifference</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().differenceAndStore(key, otherKey,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与多个集合的差集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sDifference</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().differenceAndStore(key, otherKeys,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合所有元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">setMembers</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机获取集合中的一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sRandomMember</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().randomMember(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机获取集合中count个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">sRandomMembers</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().randomMembers(key, count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机获取集合中count个元素并且去除重复的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sDistinctRandomMembers</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().distinctRandomMembers(key, count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Cursor&lt;String&gt; <span class=\"title\">sScan</span><span class=\"params\">(String key, ScanOptions options)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().scan(key, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**------------------zSet相关操作--------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素,有序集合是按照元素的score值由小到大排列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> score</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">zAdd</span><span class=\"params\">(String key, String value, <span class=\"keyword\">double</span> score)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().add(key, value, score);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zAdd</span><span class=\"params\">(String key, Set&lt;TypedTuple&lt;String&gt;&gt; values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().add(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加元素的score值，并返回增加后的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">zIncrementScore</span><span class=\"params\">(String key, String value, <span class=\"keyword\">double</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().incrementScore(key, value, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 0表示第一位</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRank</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rank(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回元素在集合的排名,按元素的score值由大到小排列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zReverseRank</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRank(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的元素, 从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     *            开始位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     *            结束位置, -1查询所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().range(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合元素, 并且把score值也获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeWithScores(String key, <span class=\"keyword\">long</span> start,</span><br><span class=\"line\">                                                    <span class=\"keyword\">long</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeWithScores(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     *            最小值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     *            最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素, 从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     *            最小值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     *            最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key,</span><br><span class=\"line\">                                                           <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key,</span><br><span class=\"line\">                                                           <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max,</span><br><span class=\"line\">                start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的元素, 从大到小排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zReverseRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的元素, 从大到小排序, 并返回score值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeWithScores(String key,</span><br><span class=\"line\">                                                           <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start,</span><br><span class=\"line\">                end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素, 从大到小排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zReverseRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                            <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素, 从大到小排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeByScoreWithScores(</span><br><span class=\"line\">            String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,</span><br><span class=\"line\">                min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zReverseRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                            <span class=\"keyword\">double</span> max, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max,</span><br><span class=\"line\">                start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据score值获取集合元素数量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zCount</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().count(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zZCard</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().zCard(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合中value元素的score值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">zScore</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除指定索引位置的成员</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRemoveRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().removeRange(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据指定的score值的范围来移除成员</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRemoveRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().removeRangeByScore(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key和otherKey的并集并存储在destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zUnionAndStore</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zUnionAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet()</span><br><span class=\"line\">                .unionAndStore(key, otherKeys, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zIntersectAndStore</span><span class=\"params\">(String key, String otherKey,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().intersectAndStore(key, otherKey,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zIntersectAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().intersectAndStore(key, otherKeys,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor&lt;TypedTuple&lt;String&gt;&gt; zScan(String key, ScanOptions options) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().scan(key, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>RedisTemplate配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.config; <span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect; <span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor; <span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper; <span class=\"keyword\">import</span> org.springframework.cache.CacheManager; <span class=\"keyword\">import</span> org.springframework.cache.annotation.CachingConfigurerSupport; <span class=\"keyword\">import</span> org.springframework.cache.annotation.EnableCaching; <span class=\"keyword\">import</span> org.springframework.context.annotation.Bean; <span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration; <span class=\"keyword\">import</span> org.springframework.data.redis.cache.RedisCacheManager; <span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory; <span class=\"keyword\">import</span> org.springframework.data.redis.core.*; <span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; <span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer; <span class=\"comment\">/** * <span class=\"doctag\">@author</span> janti * reids 相关bean的配置 */</span> <span class=\"meta\">@Configuration</span> <span class=\"meta\">@EnableCaching</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;     <span class=\"comment\">/**     * 选择redis作为默认缓存工具     * <span class=\"doctag\">@param</span> redisTemplate     * <span class=\"doctag\">@return</span>     */</span>    <span class=\"meta\">@Bean</span>    <span class=\"function\"><span class=\"keyword\">public</span> CacheManager <span class=\"title\">cacheManager</span><span class=\"params\">(RedisTemplate redisTemplate)</span> </span>&#123;        RedisCacheManager rcm = <span class=\"keyword\">new</span> RedisCacheManager(redisTemplate);        <span class=\"keyword\">return</span> rcm;    &#125;     <span class=\"comment\">/**     * retemplate相关配置     * <span class=\"doctag\">@param</span> factory     * <span class=\"doctag\">@return</span>     */</span>    <span class=\"meta\">@Bean</span>    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;         RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();        <span class=\"comment\">// 配置连接工厂        template.setConnectionFactory(factory);         //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);         ObjectMapper om = new ObjectMapper();        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jacksonSeial.setObjectMapper(om);         // 值采用json序列化        template.setValueSerializer(jacksonSeial);        //使用StringRedisSerializer来序列化和反序列化redis的key值        template.setKeySerializer(new StringRedisSerializer());         // 设置hash key 和value序列化模式        template.setHashKeySerializer(new StringRedisSerializer());        template.setHashValueSerializer(jacksonSeial);        template.afterPropertiesSet();         return template;    &#125;     /**     * 对hash类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public HashOperations&lt;String, String, Object&gt; hashOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForHash();    &#125;     /**     * 对redis字符串类型数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ValueOperations&lt;String, Object&gt; valueOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForValue();    &#125;     /**     * 对链表类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ListOperations&lt;String, Object&gt; listOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForList();    &#125;     /**     * 对无序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public SetOperations&lt;String, Object&gt; setOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForSet();    &#125;     /**     * 对有序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ZSetOperations&lt;String, Object&gt; zSetOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForZSet();    &#125; &#125; </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"jedis\"><a href=\"#jedis\" class=\"headerlink\" title=\"jedis\"></a>jedis</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJedis</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Jedis jedis=<span class=\"keyword\">new</span> Jedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;连接成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//存储数据到列表中</span></span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Google&quot;</span>);</span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Taobao&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取存储的数据并输出</span></span><br><span class=\"line\">        List&lt;String&gt; list = jedis.lrange(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"number\">0</span> ,<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;列表项为: &quot;</span>+list.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>开启事务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJedis</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JSONException </span>&#123;</span><br><span class=\"line\">        Jedis jedis=<span class=\"keyword\">new</span> Jedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;acow&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        Transaction multi = jedis.multi();</span><br><span class=\"line\">        String result = jsonObject.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user1&quot;</span>,result);</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user2&quot;</span>,result);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//int i=1/0; 代码排除异常事务，执行失败</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            multi.exec(); <span class=\"comment\">//执行事务</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            multi.discard(); <span class=\"comment\">//放弃事务</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            jedis.close();<span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis工具类\"><a href=\"#Redis工具类\" class=\"headerlink\" title=\"Redis工具类\"></a>Redis工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.DataType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.Cursor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ScanOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ZSetOperations.TypedTuple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis工具类*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRedisTemplate</span><span class=\"params\">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title\">getRedisTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** -------------------key相关操作--------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.delete(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Collection&lt;String&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.delete(keys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 序列化key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] dump(String key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.dump(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否存在key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">hasKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">expire</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> date</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">expireAt</span><span class=\"params\">(String key, Date date)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.expireAt(key, date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找匹配的key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">(String pattern)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.keys(pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将当前数据库的 key 移动到给定的数据库 db 当中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dbIndex</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">move</span><span class=\"params\">(String key, <span class=\"keyword\">int</span> dbIndex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.move(key, dbIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除 key 的过期时间，key 将持久保持</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">persist</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.persist(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 的剩余的过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getExpire</span><span class=\"params\">(String key, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 的剩余的过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getExpire</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从当前数据库中随机返回一个 key</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">randomKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.randomKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改 key 的名称</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> oldKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newKey</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rename</span><span class=\"params\">(String oldKey, String newKey)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.rename(oldKey, newKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 仅当 newkey 不存在时，将 oldKey 改名为 newkey</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> oldKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">renameIfAbsent</span><span class=\"params\">(String oldKey, String newKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 所储存的值的类型</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataType <span class=\"title\">type</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.type(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** -------------------string相关操作--------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置指定 key 的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取指定 key 的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回 key 中字符串值的子字符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().get(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将给定 key 的值设为 value ，并返回 key 的旧值(old value)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAndSet</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对 key 所储存的字符串值，获取指定偏移量上的位(bit)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getBit</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().getBit(key, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">multiGet</span><span class=\"params\">(Collection&lt;String&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().multiGet(keys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置ASCII码, 字符串&#x27;a&#x27;的ASCII码是97, 转为二进制是&#x27;01100001&#x27;, 此方法是将二进制第offset位值变为value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     *            值,true为1, false为0</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setBit</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> offset, <span class=\"keyword\">boolean</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().setBit(key, offset, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将值 value 关联到 key ，并将 key 的过期时间设为 timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *            过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间单位, 天:TimeUnit.DAYS 小时:TimeUnit.HOURS 分钟:TimeUnit.MINUTES</span></span><br><span class=\"line\"><span class=\"comment\">     *            秒:TimeUnit.SECONDS 毫秒:TimeUnit.MILLISECONDS</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEx</span><span class=\"params\">(String key, String value, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 只有在 key 不存在时设置 key 的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 之前已经存在返回false,不存在返回true</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setIfAbsent</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> offset</span></span><br><span class=\"line\"><span class=\"comment\">     *            从指定位置开始覆写</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRange</span><span class=\"params\">(String key, String value, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">size</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maps</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">multiSet</span><span class=\"params\">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().multiSet(maps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maps</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 之前已经存在返回false,不存在返回true</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">multiSetIfAbsent</span><span class=\"params\">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().multiSetIfAbsent(maps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加(自增长), 负数则为自减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">incrBy</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> increment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">incrByFloat</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> increment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 追加到末尾</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">append</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().append(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** -------------------hash相关操作------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取存储在哈希表中指定字段的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hGet</span><span class=\"params\">(String key, String field)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().get(key, field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有给定字段的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Object, Object&gt; <span class=\"title\">hGetAll</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有给定字段的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fields</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">hMultiGet</span><span class=\"params\">(String key, Collection&lt;Object&gt; fields)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().multiGet(key, fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hPut</span><span class=\"params\">(String key, String hashKey, String value)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hPutAll</span><span class=\"params\">(String key, Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().putAll(key, maps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 仅当hashKey不存在时才设置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hashKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">hPutIfAbsent</span><span class=\"params\">(String key, String hashKey, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除一个或多个哈希表字段</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fields</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">hDelete</span><span class=\"params\">(String key, Object... fields)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().delete(key, fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看哈希表 key 中，指定的字段是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hExists</span><span class=\"params\">(String key, String field)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().hasKey(key, field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为哈希表 key 中的指定字段的整数值加上增量 increment</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> increment</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">hIncrBy</span><span class=\"params\">(String key, Object field, <span class=\"keyword\">long</span> increment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, field, increment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为哈希表 key 中的指定字段的整数值加上增量 increment</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> field</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">hIncrByFloat</span><span class=\"params\">(String key, Object field, <span class=\"keyword\">double</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, field, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有哈希表中的字段</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">hKeys</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().keys(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取哈希表中字段的数量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">hSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取哈希表中所有值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">hValues</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().values(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 迭代哈希表中的键值对</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor&lt;Entry&lt;Object, Object&gt;&gt; hScan(String key, ScanOptions options) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().scan(key, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** ------------------------list相关操作---------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引获取列表中的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取列表指定范围内的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     *            开始位置, 0是开始位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     *            结束位置, -1返回所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">lRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储在list头部</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPush</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPush(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPushAll</span><span class=\"params\">(String key, String... value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPushAll</span><span class=\"params\">(String key, Collection&lt;String&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当list存在的时候才加入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPushIfPresent</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPushIfPresent(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果pivot存在,再pivot前面添加</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pivot</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLeftPush</span><span class=\"params\">(String key, String pivot, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPush(key, pivot, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPush</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPushAll</span><span class=\"params\">(String key, String... value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPushAll</span><span class=\"params\">(String key, Collection&lt;String&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为已存在的列表添加值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPushIfPresent</span><span class=\"params\">(String key, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPushIfPresent(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在pivot元素的右边添加值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pivot</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRightPush</span><span class=\"params\">(String key, String pivot, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPush(key, pivot, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引设置列表元素的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     *            位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, String value)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForList().set(key, index, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移出并获取列表的第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lLeftPop</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPop(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *            等待时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lBLeftPop</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().leftPop(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除并获取列表最后一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lRightPop</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPop(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     *            等待时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lBRightPop</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPop(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destinationKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lRightPopAndLeftPush</span><span class=\"params\">(String sourceKey, String destinationKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,</span><br><span class=\"line\">                destinationKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sourceKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destinationKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lBRightPopAndLeftPush</span><span class=\"params\">(String sourceKey, String destinationKey,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,</span><br><span class=\"line\">                destinationKey, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除集合中值等于value得元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     *            index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素;</span></span><br><span class=\"line\"><span class=\"comment\">     *            index&lt;0, 从尾部开始删除第一个值等于value的元素;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lRemove</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().remove(key, index, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 裁剪list</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lTrim</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForList().trim(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取列表长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">lLen</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** --------------------set相关操作-------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sAdd</span><span class=\"params\">(String key, String... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set移除元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除并返回集合的一个随机元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sPop</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().pop(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将元素value从一个集合移到另一个集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">sMove</span><span class=\"params\">(String key, String value, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().move(key, value, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断集合是否包含value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">sIsMember</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取两个集合的交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sIntersect</span><span class=\"params\">(String key, String otherKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersect(key, otherKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key集合与多个集合的交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sIntersect</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersect(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与otherKey集合的交集存储到destKey集合中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sIntersectAndStore</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersectAndStore(key, otherKey,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与多个集合的交集存储到destKey集合中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sIntersectAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().intersectAndStore(key, otherKeys,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取两个集合的并集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sUnion</span><span class=\"params\">(String key, String otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().union(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key集合与多个集合的并集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sUnion</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().union(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与otherKey集合的并集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sUnionAndStore</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与多个集合的并集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sUnionAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().unionAndStore(key, otherKeys, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取两个集合的差集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sDifference</span><span class=\"params\">(String key, String otherKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().difference(key, otherKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key集合与多个集合的差集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sDifference</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().difference(key, otherKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与otherKey集合的差集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sDifference</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().differenceAndStore(key, otherKey,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * key集合与多个集合的差集存储到destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">sDifference</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().differenceAndStore(key, otherKeys,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合所有元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">setMembers</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机获取集合中的一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sRandomMember</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().randomMember(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机获取集合中count个元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">sRandomMembers</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().randomMembers(key, count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机获取集合中count个元素并且去除重复的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">sDistinctRandomMembers</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().distinctRandomMembers(key, count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Cursor&lt;String&gt; <span class=\"title\">sScan</span><span class=\"params\">(String key, ScanOptions options)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().scan(key, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**------------------zSet相关操作--------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素,有序集合是按照元素的score值由小到大排列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> score</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">zAdd</span><span class=\"params\">(String key, String value, <span class=\"keyword\">double</span> score)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().add(key, value, score);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zAdd</span><span class=\"params\">(String key, Set&lt;TypedTuple&lt;String&gt;&gt; values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().add(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加元素的score值，并返回增加后的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">zIncrementScore</span><span class=\"params\">(String key, String value, <span class=\"keyword\">double</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().incrementScore(key, value, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 0表示第一位</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRank</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rank(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回元素在集合的排名,按元素的score值由大到小排列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zReverseRank</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRank(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的元素, 从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     *            开始位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     *            结束位置, -1查询所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().range(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合元素, 并且把score值也获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeWithScores(String key, <span class=\"keyword\">long</span> start,</span><br><span class=\"line\">                                                    <span class=\"keyword\">long</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeWithScores(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     *            最小值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     *            最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素, 从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     *            最小值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     *            最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key,</span><br><span class=\"line\">                                                           <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key,</span><br><span class=\"line\">                                                           <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max,</span><br><span class=\"line\">                start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的元素, 从大到小排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zReverseRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合的元素, 从大到小排序, 并返回score值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeWithScores(String key,</span><br><span class=\"line\">                                                           <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start,</span><br><span class=\"line\">                end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素, 从大到小排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zReverseRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                            <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据Score值查询集合元素, 从大到小排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeByScoreWithScores(</span><br><span class=\"line\">            String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,</span><br><span class=\"line\">                min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">zReverseRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                            <span class=\"keyword\">double</span> max, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max,</span><br><span class=\"line\">                start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据score值获取集合元素数量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zCount</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().count(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zZCard</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().zCard(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取集合中value元素的score值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">zScore</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除指定索引位置的成员</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRemoveRange</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().removeRange(key, start, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据指定的score值的范围来移除成员</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zRemoveRangeByScore</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> min, <span class=\"keyword\">double</span> max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().removeRangeByScore(key, min, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取key和otherKey的并集并存储在destKey中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zUnionAndStore</span><span class=\"params\">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zUnionAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet()</span><br><span class=\"line\">                .unionAndStore(key, otherKeys, destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zIntersectAndStore</span><span class=\"params\">(String key, String otherKey,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().intersectAndStore(key, otherKey,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交集</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> otherKeys</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> destKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">zIntersectAndStore</span><span class=\"params\">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   String destKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().intersectAndStore(key, otherKeys,</span><br><span class=\"line\">                destKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor&lt;TypedTuple&lt;String&gt;&gt; zScan(String key, ScanOptions options) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForZSet().scan(key, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>RedisTemplate配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.config; <span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect; <span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor; <span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper; <span class=\"keyword\">import</span> org.springframework.cache.CacheManager; <span class=\"keyword\">import</span> org.springframework.cache.annotation.CachingConfigurerSupport; <span class=\"keyword\">import</span> org.springframework.cache.annotation.EnableCaching; <span class=\"keyword\">import</span> org.springframework.context.annotation.Bean; <span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration; <span class=\"keyword\">import</span> org.springframework.data.redis.cache.RedisCacheManager; <span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory; <span class=\"keyword\">import</span> org.springframework.data.redis.core.*; <span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; <span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer; <span class=\"comment\">/** * <span class=\"doctag\">@author</span> janti * reids 相关bean的配置 */</span> <span class=\"meta\">@Configuration</span> <span class=\"meta\">@EnableCaching</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;     <span class=\"comment\">/**     * 选择redis作为默认缓存工具     * <span class=\"doctag\">@param</span> redisTemplate     * <span class=\"doctag\">@return</span>     */</span>    <span class=\"meta\">@Bean</span>    <span class=\"function\"><span class=\"keyword\">public</span> CacheManager <span class=\"title\">cacheManager</span><span class=\"params\">(RedisTemplate redisTemplate)</span> </span>&#123;        RedisCacheManager rcm = <span class=\"keyword\">new</span> RedisCacheManager(redisTemplate);        <span class=\"keyword\">return</span> rcm;    &#125;     <span class=\"comment\">/**     * retemplate相关配置     * <span class=\"doctag\">@param</span> factory     * <span class=\"doctag\">@return</span>     */</span>    <span class=\"meta\">@Bean</span>    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;         RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();        <span class=\"comment\">// 配置连接工厂        template.setConnectionFactory(factory);         //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);         ObjectMapper om = new ObjectMapper();        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jacksonSeial.setObjectMapper(om);         // 值采用json序列化        template.setValueSerializer(jacksonSeial);        //使用StringRedisSerializer来序列化和反序列化redis的key值        template.setKeySerializer(new StringRedisSerializer());         // 设置hash key 和value序列化模式        template.setHashKeySerializer(new StringRedisSerializer());        template.setHashValueSerializer(jacksonSeial);        template.afterPropertiesSet();         return template;    &#125;     /**     * 对hash类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public HashOperations&lt;String, String, Object&gt; hashOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForHash();    &#125;     /**     * 对redis字符串类型数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ValueOperations&lt;String, Object&gt; valueOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForValue();    &#125;     /**     * 对链表类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ListOperations&lt;String, Object&gt; listOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForList();    &#125;     /**     * 对无序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public SetOperations&lt;String, Object&gt; setOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForSet();    &#125;     /**     * 对有序集合类型的数据操作     *     * @param redisTemplate     * @return     */    @Bean    public ZSetOperations&lt;String, Object&gt; zSetOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;        return redisTemplate.opsForZSet();    &#125; &#125; </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"多线程","date":"2021-05-09T08:59:46.000Z","typora-copy-images-to":null,"_content":"\n继承Thread类：\n\n1.自定义线程类继承Thread类\n\n2.重写run()方法，编写线程执行体\n\n3.创建线程对象，调用start()方法启动线程\n\n\n\n注意：线程不一定立即执行，cpu安排调度\n\n```java\npublic class TestThread1 extends Thread{\n    @Override\n    public void run(){\n        for(int i=0;i<200;i++){\n            System.out.println(\"我在看代码\");          \n        }\n    }\n    \n    public static void main(String[] args){\n        //main线程，主线程\n        //创建一个线程对象\n        TestThread1 testThread1=new TestThread1(); \n        //调用start()方法开始线程\n        testThread1.start(); //不是调用run方法\n        \n        for(int i=0;i<1000;i++){\n            System.out.println(\"我在学习多线程----\");\n        }\n    }\n}\n```\n\n\n\n实现Runnable接口:   (推荐使用：避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用)\n\n1.定义MyRunnable类实现Runnable接口\n\n2.实现run()方法，编写线程执行体\n\n3.创建线程对象，调用start()方法启动线程（传入目标对象+Thread对象.start()）\n\n\n\nps: runnable接口只有一个run()方法\n\n```java\npublic class TestThread3 implements Runnable{\n    @Override\n    public void run(){\n        for(int i=0;i<200;i++){\n            System.out.println(\"我在看代码\");\n            \n        }\n    }\n    \n    public static void main(String[] args){\n        //创建runnable借口的实现类对象\n        TestThread3 testThread3=new TestThread3(); \n        //创建线程对象，通过线程对象来开启我们的线程，代理\n        //Thread thread = new Thread(testThread3);\n        //\n        //thread.start();\n        \n        new Thread(testThread3).start();\n        \n        for(int i=0;i<1000;i++){\n            System.out.println(\"我在学习多线程----\");\n        }\n    }   \n}\n```\n\n\n\n \n\n```java\n//多个线程同时操作一个对象\n//买火车票的例子\n\n\n//多个线程操作同一个资源的情况下，线程不安全，数据紊乱。\npublic class TestThread implements Runnable{\n    \n    //票数\n    private int ticketNums=10;\n    \n\t@Override\n    public void run(){\n    \twhile(true){\n            if(ticketNums<=0){\n                break;\n            }\n            System.out.println(Thread.currentThread().getName()+\"-->拿到了第\"+ticketNums--+\"票\");\n        }    \n    }\n    \n    public static void main(String[] args){\n        TestThread ticket = new TestThread();\n        \n        new Thread(ticket,\"小明\").start();\n        new Thread(ticket,\"老师\").start();\n        new Thread(ticket,\"黄牛党\").start();\n    }\n}\n```\n\n例子：龟兔赛跑\n\n\n\n```java\npublic class Race implements Runnable{\n\n    private static String winner;\n\n    @Override\n    public void run(){\n        for(int i=0;i<=100;i++){\n\n            //模拟兔子休息\n            if(Thread.currentThread().getName().equals(\"兔子\")&&i%10==0){\n                try {\n                    Thread.sleep(200);\n                }catch (InterruptedException e){\n                    e.printStackTrace();\n                }\n            }\n\n\n            //判断比赛是否结束\n            boolean flag = gameOver(i);\n            //如果比赛结束\n            if(flag){\n                break;\n            }\n\n            System.out.println(Thread.currentThread().getName()+\"-->跑了\"+i+\"步\");\n        }\n    }\n\n    //判断是否完成比赛\n\n    private boolean gameOver(int steps){\n        //判断是否有胜利者\n        if(winner!=null){//已经存在胜利者了\n            return true;\n        }{\n            if(steps>=100){\n                winner=Thread.currentThread().getName();\n                System.out.println(\"winner is\"+winner);\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    public static void main(String[] args) {\n\n        Race race=new Race();\n\n        new  Thread(race,\"兔子\").start();\n        new  Thread(race,\"乌龟\").start();\n\n    }\n}\n\n```\n\n\n\n静态代理：\n\n\n\n```java\n//静态代理模式总结\n//真实对象和代理对象都要实现同一个接口\n//代理对象需要代理真实角色\n\npublic class StaticProxy {\n\n    public static void main(String[] args) {\n\n        You you=new You();\n\n         WeddingCompany weddingCompany=new WeddingCompany(you);\n\n        weddingCompany.HappyMarry();\n\n    }\n\n}\n\ninterface Marry{\n    void HappyMarry();\n}\n\n//真实角色\nclass You implements Marry{\n    @Override\n    public void HappyMarry(){\n        System.out.println(\"X老师结婚了，真开心\");\n    }\n}\n\n//代理角色，帮助你结婚\nclass WeddingCompany implements Marry{\n\n    //代理谁-->真实目标角色\n    private Marry target;\n\n    public WeddingCompany(Marry target) {\n        this.target = target;\n    }\n\n    @Override\n    public void HappyMarry(){\n        before();\n        this.target.HappyMarry();//这就是真实对象\n        after();\n\n    }\n\n    private void after() {\n        System.out.println(\"结婚之后，收尾款\");\n    }\n\n    private void before() {\n        System.out.println(\"结婚之前，布置现场\");\n    }\n\n}\n\n\n\n\n```\n\n\n\n\n\nlambda表达式：\n\n任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口\n\n而对于函数式接口，我们可以通过lamdba表达式来创建该接口的对象\n\n\n\n```java\n//推导lambda表达式\n\npublic class TestLambda1 {\n\n    //3.静态内部类\n    static class Like2 implements ILike {\n        @Override\n        public void lambda() {\n            System.out.println(\"I like lambda2\");\n        }\n    }\n\n    public static void main(String[] args) {\n        \n        ILike like = new Like();\n        like.lambda();\n\n        like = new Like2();\n        like.lambda();\n\n        //4.局部内部类\n        class Like3 implements ILike {\n            @Override\n            public void lambda() {\n                System.out.println(\"I like lambda3\");\n            }\n        }\n\n        like = new Like3();\n        like.lambda();\n\n        //5.匿名内部类,没有类的名称，必须借助接口或者父类\n        like = new ILike() {\n            @Override\n            public void lambda() {\n                System.out.println(\"I like lambda4\");\n            }\n        };\n\n        //6.用lambda简化\n        like = ()->{\n            System.out.println(\"I like lambda5\");\n        };\n\n        like.lambda();\n\n    }\n}\n\n//1.定义一个函数式接口\ninterface ILike{\n    void lambda();\n}\n\n//2.实现类\nclass Like implements ILike {\n        @Override\n        public void lambda() {\n        System.out.println(\"I like lambda\");\n    }\n}\n```\n\n\n\n线程停止\n\n```java\n//测试stop\n//1.建议线程正常停止---->利用次数，不建议死循环\n//2.设置标志位\npublic class TestStop implements Runnable{\n    \n    //1.设置一个标识位\n    private boolean flag = true;\n\n    @Override\n    public void run(){\n        int i=0;\n        while (flag){\n            System.out.println(\"run...Thread\"+i++);\n        }\n    }\n\n    //2.设置一个公开的方法停止线程，转换标识位\n\n    public void stop(){\n        this.flag=false;\n    }\n\n    public static void main(String[] args) {\n        TestStop testStop=new TestStop();\n        new Thread(testStop).start();\n\n        for (int i=0;i<1000;i++){\n            System.out.println(\"main\"+i);\n            if(i==900){\n                //调用stop方法切换标识位，让线程停止\n                testStop.stop();\n                System.out.println(\"线程停止了\");\n            }\n        }\n\n    }\n}\n\n```\n\n\n\n\n\n线程同步：其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用\n\n（形成条件：队列+锁）\n\n\n\n同步方法：\n\n·由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized方法和synchronized块。\n\n\n\n·synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行\n\n  \n\nlock锁：\n\n```java\nprivate final ReentrantLock lock=new ReentrantLock();\n//....\n\ntry{\n    lock.lock();//加锁\n    //\n    // ......不安全的代码\n    //\n}finally{\n    lock.unlock();\n}\n\n\n```\n\n\n\n管程法\n\n```java\n//测试：生产者消费者模型-->利用缓冲区解决：管程法//生产者，消费者，产品，缓冲区public class TestPC{    public static void main(String[] args) {        SynContainer container=new SynContainer();        new Productor(container).start();        new Consumer(container).start();    }}//生产者class Productor extends Thread{    SynContainer container;    public Productor(SynContainer container){        this.container=container;    }    //生产    public void run(){        for (int i = 0; i < 100; i++) {            System.out.println(\"生产了\"+i+\"只鸡\");            container.push(new Chicken(i));        }    }}//消费者class Consumer extends Thread{    SynContainer container;    public Consumer(SynContainer container){        this.container=container;    }    //消费    @Override    public void run(){        for (int i = 0; i < 100; i++) {            System.out.println(\"消费了-->\"+container.pop().id+\"只鸡\");        }    }    }//产品class Chicken{    int id;//产品编号    public Chicken(int id) {        this.id = id;    }    }//缓冲区class SynContainer{    //需要一个容器大小    Chicken[] chickens=new Chicken[10];    //容器计数器    int count=0;    //生产者放入产品    public synchronized void push(Chicken chicken){        //如果容器满了，就需要等待消费者消费        if(count==chickens.length){            //生产等待            try{                this.wait();            }catch (InterruptedException e){                e.printStackTrace();            }        }        //如果没有满，我们就需要丢入产品        chickens[count]=chicken;        count++;        //可以通知消费者消费了        this.notifyAll();            }    //消费者消费产品     public synchronized Chicken pop(){        //判断是否能消费        if(count==0){            //等待生产者生产，消费者等待            try {                this.wait();            }catch (InterruptedException e){                e.printStackTrace();            }        }        //如果可以消费        count--;        Chicken chicken=chickens[count];        //吃完了，通知生产者生产        this.notifyAll();        return chicken;    }    }\n```\n\n\n\n\n\n信号灯法：\n\n```java\npublic class TestPc2 {    public static void main(String[] args) {        TV tv=new TV();        new Player(tv).start();        new Watcher(tv).start();    }}//生产者-->演员class Player extends Thread{    TV tv;    public Player(TV tv){        this.tv=tv;    }    @Override    public void run(){        for (int i = 0; i < 20; i++) {            if (i%2==0) {                this.tv.play(\"快乐大本营播放中\");            }else{                this.tv.play(\"正在放抖音\");            }        }    }}//消费者-->观众class Watcher extends Thread{    TV tv;    public Watcher(TV tv){        this.tv=tv;    }    @Override    public void run(){        for (int i = 0; i < 20; i++) {            tv.watch();        }    }}//产品-->节目class TV{    //演员表演，观众等待 T    //观众观看，演员等待 F    String voice;//表演的节目    Boolean flag=true;    //表演    public synchronized void play(String voice){        if(!flag){            try {                this.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(\"演员表演了：\"+voice);        //通知观众观看        this.notifyAll();//通知唤醒        this.voice=voice;        this.flag=!this.flag;    }    //观看    public synchronized void watch(){        if(flag){            try {                this.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(\"观看了：\"+voice);        //通知演员表演        this.notifyAll();        this.flag=!this.flag;    }}\n```\n\n","source":"_posts/多线程.md","raw":"---\ntitle: 多线程\ndate: 2021-05-09 16:59:46\ntypora-copy-images-to: \ncategories: JUC\ntags:\n---\n\n继承Thread类：\n\n1.自定义线程类继承Thread类\n\n2.重写run()方法，编写线程执行体\n\n3.创建线程对象，调用start()方法启动线程\n\n\n\n注意：线程不一定立即执行，cpu安排调度\n\n```java\npublic class TestThread1 extends Thread{\n    @Override\n    public void run(){\n        for(int i=0;i<200;i++){\n            System.out.println(\"我在看代码\");          \n        }\n    }\n    \n    public static void main(String[] args){\n        //main线程，主线程\n        //创建一个线程对象\n        TestThread1 testThread1=new TestThread1(); \n        //调用start()方法开始线程\n        testThread1.start(); //不是调用run方法\n        \n        for(int i=0;i<1000;i++){\n            System.out.println(\"我在学习多线程----\");\n        }\n    }\n}\n```\n\n\n\n实现Runnable接口:   (推荐使用：避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用)\n\n1.定义MyRunnable类实现Runnable接口\n\n2.实现run()方法，编写线程执行体\n\n3.创建线程对象，调用start()方法启动线程（传入目标对象+Thread对象.start()）\n\n\n\nps: runnable接口只有一个run()方法\n\n```java\npublic class TestThread3 implements Runnable{\n    @Override\n    public void run(){\n        for(int i=0;i<200;i++){\n            System.out.println(\"我在看代码\");\n            \n        }\n    }\n    \n    public static void main(String[] args){\n        //创建runnable借口的实现类对象\n        TestThread3 testThread3=new TestThread3(); \n        //创建线程对象，通过线程对象来开启我们的线程，代理\n        //Thread thread = new Thread(testThread3);\n        //\n        //thread.start();\n        \n        new Thread(testThread3).start();\n        \n        for(int i=0;i<1000;i++){\n            System.out.println(\"我在学习多线程----\");\n        }\n    }   \n}\n```\n\n\n\n \n\n```java\n//多个线程同时操作一个对象\n//买火车票的例子\n\n\n//多个线程操作同一个资源的情况下，线程不安全，数据紊乱。\npublic class TestThread implements Runnable{\n    \n    //票数\n    private int ticketNums=10;\n    \n\t@Override\n    public void run(){\n    \twhile(true){\n            if(ticketNums<=0){\n                break;\n            }\n            System.out.println(Thread.currentThread().getName()+\"-->拿到了第\"+ticketNums--+\"票\");\n        }    \n    }\n    \n    public static void main(String[] args){\n        TestThread ticket = new TestThread();\n        \n        new Thread(ticket,\"小明\").start();\n        new Thread(ticket,\"老师\").start();\n        new Thread(ticket,\"黄牛党\").start();\n    }\n}\n```\n\n例子：龟兔赛跑\n\n\n\n```java\npublic class Race implements Runnable{\n\n    private static String winner;\n\n    @Override\n    public void run(){\n        for(int i=0;i<=100;i++){\n\n            //模拟兔子休息\n            if(Thread.currentThread().getName().equals(\"兔子\")&&i%10==0){\n                try {\n                    Thread.sleep(200);\n                }catch (InterruptedException e){\n                    e.printStackTrace();\n                }\n            }\n\n\n            //判断比赛是否结束\n            boolean flag = gameOver(i);\n            //如果比赛结束\n            if(flag){\n                break;\n            }\n\n            System.out.println(Thread.currentThread().getName()+\"-->跑了\"+i+\"步\");\n        }\n    }\n\n    //判断是否完成比赛\n\n    private boolean gameOver(int steps){\n        //判断是否有胜利者\n        if(winner!=null){//已经存在胜利者了\n            return true;\n        }{\n            if(steps>=100){\n                winner=Thread.currentThread().getName();\n                System.out.println(\"winner is\"+winner);\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    public static void main(String[] args) {\n\n        Race race=new Race();\n\n        new  Thread(race,\"兔子\").start();\n        new  Thread(race,\"乌龟\").start();\n\n    }\n}\n\n```\n\n\n\n静态代理：\n\n\n\n```java\n//静态代理模式总结\n//真实对象和代理对象都要实现同一个接口\n//代理对象需要代理真实角色\n\npublic class StaticProxy {\n\n    public static void main(String[] args) {\n\n        You you=new You();\n\n         WeddingCompany weddingCompany=new WeddingCompany(you);\n\n        weddingCompany.HappyMarry();\n\n    }\n\n}\n\ninterface Marry{\n    void HappyMarry();\n}\n\n//真实角色\nclass You implements Marry{\n    @Override\n    public void HappyMarry(){\n        System.out.println(\"X老师结婚了，真开心\");\n    }\n}\n\n//代理角色，帮助你结婚\nclass WeddingCompany implements Marry{\n\n    //代理谁-->真实目标角色\n    private Marry target;\n\n    public WeddingCompany(Marry target) {\n        this.target = target;\n    }\n\n    @Override\n    public void HappyMarry(){\n        before();\n        this.target.HappyMarry();//这就是真实对象\n        after();\n\n    }\n\n    private void after() {\n        System.out.println(\"结婚之后，收尾款\");\n    }\n\n    private void before() {\n        System.out.println(\"结婚之前，布置现场\");\n    }\n\n}\n\n\n\n\n```\n\n\n\n\n\nlambda表达式：\n\n任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口\n\n而对于函数式接口，我们可以通过lamdba表达式来创建该接口的对象\n\n\n\n```java\n//推导lambda表达式\n\npublic class TestLambda1 {\n\n    //3.静态内部类\n    static class Like2 implements ILike {\n        @Override\n        public void lambda() {\n            System.out.println(\"I like lambda2\");\n        }\n    }\n\n    public static void main(String[] args) {\n        \n        ILike like = new Like();\n        like.lambda();\n\n        like = new Like2();\n        like.lambda();\n\n        //4.局部内部类\n        class Like3 implements ILike {\n            @Override\n            public void lambda() {\n                System.out.println(\"I like lambda3\");\n            }\n        }\n\n        like = new Like3();\n        like.lambda();\n\n        //5.匿名内部类,没有类的名称，必须借助接口或者父类\n        like = new ILike() {\n            @Override\n            public void lambda() {\n                System.out.println(\"I like lambda4\");\n            }\n        };\n\n        //6.用lambda简化\n        like = ()->{\n            System.out.println(\"I like lambda5\");\n        };\n\n        like.lambda();\n\n    }\n}\n\n//1.定义一个函数式接口\ninterface ILike{\n    void lambda();\n}\n\n//2.实现类\nclass Like implements ILike {\n        @Override\n        public void lambda() {\n        System.out.println(\"I like lambda\");\n    }\n}\n```\n\n\n\n线程停止\n\n```java\n//测试stop\n//1.建议线程正常停止---->利用次数，不建议死循环\n//2.设置标志位\npublic class TestStop implements Runnable{\n    \n    //1.设置一个标识位\n    private boolean flag = true;\n\n    @Override\n    public void run(){\n        int i=0;\n        while (flag){\n            System.out.println(\"run...Thread\"+i++);\n        }\n    }\n\n    //2.设置一个公开的方法停止线程，转换标识位\n\n    public void stop(){\n        this.flag=false;\n    }\n\n    public static void main(String[] args) {\n        TestStop testStop=new TestStop();\n        new Thread(testStop).start();\n\n        for (int i=0;i<1000;i++){\n            System.out.println(\"main\"+i);\n            if(i==900){\n                //调用stop方法切换标识位，让线程停止\n                testStop.stop();\n                System.out.println(\"线程停止了\");\n            }\n        }\n\n    }\n}\n\n```\n\n\n\n\n\n线程同步：其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用\n\n（形成条件：队列+锁）\n\n\n\n同步方法：\n\n·由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized方法和synchronized块。\n\n\n\n·synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行\n\n  \n\nlock锁：\n\n```java\nprivate final ReentrantLock lock=new ReentrantLock();\n//....\n\ntry{\n    lock.lock();//加锁\n    //\n    // ......不安全的代码\n    //\n}finally{\n    lock.unlock();\n}\n\n\n```\n\n\n\n管程法\n\n```java\n//测试：生产者消费者模型-->利用缓冲区解决：管程法//生产者，消费者，产品，缓冲区public class TestPC{    public static void main(String[] args) {        SynContainer container=new SynContainer();        new Productor(container).start();        new Consumer(container).start();    }}//生产者class Productor extends Thread{    SynContainer container;    public Productor(SynContainer container){        this.container=container;    }    //生产    public void run(){        for (int i = 0; i < 100; i++) {            System.out.println(\"生产了\"+i+\"只鸡\");            container.push(new Chicken(i));        }    }}//消费者class Consumer extends Thread{    SynContainer container;    public Consumer(SynContainer container){        this.container=container;    }    //消费    @Override    public void run(){        for (int i = 0; i < 100; i++) {            System.out.println(\"消费了-->\"+container.pop().id+\"只鸡\");        }    }    }//产品class Chicken{    int id;//产品编号    public Chicken(int id) {        this.id = id;    }    }//缓冲区class SynContainer{    //需要一个容器大小    Chicken[] chickens=new Chicken[10];    //容器计数器    int count=0;    //生产者放入产品    public synchronized void push(Chicken chicken){        //如果容器满了，就需要等待消费者消费        if(count==chickens.length){            //生产等待            try{                this.wait();            }catch (InterruptedException e){                e.printStackTrace();            }        }        //如果没有满，我们就需要丢入产品        chickens[count]=chicken;        count++;        //可以通知消费者消费了        this.notifyAll();            }    //消费者消费产品     public synchronized Chicken pop(){        //判断是否能消费        if(count==0){            //等待生产者生产，消费者等待            try {                this.wait();            }catch (InterruptedException e){                e.printStackTrace();            }        }        //如果可以消费        count--;        Chicken chicken=chickens[count];        //吃完了，通知生产者生产        this.notifyAll();        return chicken;    }    }\n```\n\n\n\n\n\n信号灯法：\n\n```java\npublic class TestPc2 {    public static void main(String[] args) {        TV tv=new TV();        new Player(tv).start();        new Watcher(tv).start();    }}//生产者-->演员class Player extends Thread{    TV tv;    public Player(TV tv){        this.tv=tv;    }    @Override    public void run(){        for (int i = 0; i < 20; i++) {            if (i%2==0) {                this.tv.play(\"快乐大本营播放中\");            }else{                this.tv.play(\"正在放抖音\");            }        }    }}//消费者-->观众class Watcher extends Thread{    TV tv;    public Watcher(TV tv){        this.tv=tv;    }    @Override    public void run(){        for (int i = 0; i < 20; i++) {            tv.watch();        }    }}//产品-->节目class TV{    //演员表演，观众等待 T    //观众观看，演员等待 F    String voice;//表演的节目    Boolean flag=true;    //表演    public synchronized void play(String voice){        if(!flag){            try {                this.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(\"演员表演了：\"+voice);        //通知观众观看        this.notifyAll();//通知唤醒        this.voice=voice;        this.flag=!this.flag;    }    //观看    public synchronized void watch(){        if(flag){            try {                this.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(\"观看了：\"+voice);        //通知演员表演        this.notifyAll();        this.flag=!this.flag;    }}\n```\n\n","slug":"多线程","published":1,"updated":"2021-05-09T09:02:23.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckogykg3a0005k270ej0sf83f","content":"<p>继承Thread类：</p>\n<p>1.自定义线程类继承Thread类</p>\n<p>2.重写run()方法，编写线程执行体</p>\n<p>3.创建线程对象，调用start()方法启动线程</p>\n<p>注意：线程不一定立即执行，cpu安排调度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">200</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码&quot;</span>);          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程对象</span></span><br><span class=\"line\">        TestThread1 testThread1=<span class=\"keyword\">new</span> TestThread1(); </span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开始线程</span></span><br><span class=\"line\">        testThread1.start(); <span class=\"comment\">//不是调用run方法</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程----&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>实现Runnable接口:   (推荐使用：避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用)</p>\n<p>1.定义MyRunnable类实现Runnable接口</p>\n<p>2.实现run()方法，编写线程执行体</p>\n<p>3.创建线程对象，调用start()方法启动线程（传入目标对象+Thread对象.start()）</p>\n<p>ps: runnable接口只有一个run()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread3</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">200</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码&quot;</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建runnable借口的实现类对象</span></span><br><span class=\"line\">        TestThread3 testThread3=<span class=\"keyword\">new</span> TestThread3(); </span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class=\"line\">        <span class=\"comment\">//Thread thread = new Thread(testThread3);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//thread.start();</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testThread3).start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程----&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//多个线程同时操作一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//买火车票的例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个线程操作同一个资源的情况下，线程不安全，数据紊乱。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//票数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNums=<span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ticketNums&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;拿到了第&quot;</span>+ticketNums--+<span class=\"string\">&quot;票&quot;</span>);</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        TestThread ticket = <span class=\"keyword\">new</span> TestThread();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket,<span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket,<span class=\"string\">&quot;老师&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket,<span class=\"string\">&quot;黄牛党&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：龟兔赛跑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Race</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>)&amp;&amp;i%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = gameOver(i);</span><br><span class=\"line\">            <span class=\"comment\">//如果比赛结束</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;跑了&quot;</span>+i+<span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否完成比赛</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">gameOver</span><span class=\"params\">(<span class=\"keyword\">int</span> steps)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有胜利者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(winner!=<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//已经存在胜利者了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(steps&gt;=<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                winner=Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;winner is&quot;</span>+winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Race race=<span class=\"keyword\">new</span> Race();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span>  Thread(race,<span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span>  Thread(race,<span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>静态代理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态代理模式总结</span></span><br><span class=\"line\"><span class=\"comment\">//真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\">//代理对象需要代理真实角色</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        You you=<span class=\"keyword\">new</span> You();</span><br><span class=\"line\"></span><br><span class=\"line\">         WeddingCompany weddingCompany=<span class=\"keyword\">new</span> WeddingCompany(you);</span><br><span class=\"line\"></span><br><span class=\"line\">        weddingCompany.HappyMarry();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HappyMarry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">You</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">HappyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;X老师结婚了，真开心&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色，帮助你结婚</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//代理谁--&gt;真实目标角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Marry target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeddingCompany</span><span class=\"params\">(Marry target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">HappyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target.HappyMarry();<span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>lambda表达式：</p>\n<p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</p>\n<p>而对于函数式接口，我们可以通过lamdba表达式来创建该接口的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推导lambda表达式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLambda1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like2</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like lambda2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ILike like = <span class=\"keyword\">new</span> Like();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> Like2();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.局部内部类</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like3</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lambda3&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> Like3();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//5.匿名内部类,没有类的名称，必须借助接口或者父类</span></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> ILike() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lambda4&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//6.用lambda简化</span></span><br><span class=\"line\">        like = ()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like lambda5&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.定义一个函数式接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILike</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.实现类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I like lambda&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>线程停止</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试stop</span></span><br><span class=\"line\"><span class=\"comment\">//1.建议线程正常停止----&gt;利用次数，不建议死循环</span></span><br><span class=\"line\"><span class=\"comment\">//2.设置标志位</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1.设置一个标识位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;run...Thread&quot;</span>+i++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.设置一个公开的方法停止线程，转换标识位</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestStop testStop=<span class=\"keyword\">new</span> TestStop();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testStop).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span>+i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用stop方法切换标识位，让线程停止</span></span><br><span class=\"line\">                testStop.stop();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程停止了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>线程同步：其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用</p>\n<p>（形成条件：队列+锁）</p>\n<p>同步方法：</p>\n<p>·由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized方法和synchronized块。</p>\n<p>·synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p>\n<p>lock锁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock lock=<span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"comment\">//....</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    lock.lock();<span class=\"comment\">//加锁</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// ......不安全的代码</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>管程法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法//生产者，消费者，产品，缓冲区public class TestPC&#123;    public static void main(String[] args) &#123;        SynContainer container=new SynContainer();        new Productor(container).start();        new Consumer(container).start();    &#125;&#125;//生产者class Productor extends Thread&#123;    SynContainer container;    public Productor(SynContainer container)&#123;        this.container=container;    &#125;    //生产    public void run()&#123;        for (int i = 0; i &lt; 100; i++) &#123;            System.out.println(&quot;生产了&quot;+i+&quot;只鸡&quot;);            container.push(new Chicken(i));        &#125;    &#125;&#125;//消费者class Consumer extends Thread&#123;    SynContainer container;    public Consumer(SynContainer container)&#123;        this.container=container;    &#125;    //消费    @Override    public void run()&#123;        for (int i = 0; i &lt; 100; i++) &#123;            System.out.println(&quot;消费了--&gt;&quot;+container.pop().id+&quot;只鸡&quot;);        &#125;    &#125;    &#125;//产品class Chicken&#123;    int id;//产品编号    public Chicken(int id) &#123;        this.id = id;    &#125;    &#125;//缓冲区class SynContainer&#123;    //需要一个容器大小    Chicken[] chickens=new Chicken[10];    //容器计数器    int count=0;    //生产者放入产品    public synchronized void push(Chicken chicken)&#123;        //如果容器满了，就需要等待消费者消费        if(count==chickens.length)&#123;            //生产等待            try&#123;                this.wait();            &#125;catch (InterruptedException e)&#123;                e.printStackTrace();            &#125;        &#125;        //如果没有满，我们就需要丢入产品        chickens[count]=chicken;        count++;        //可以通知消费者消费了        this.notifyAll();            &#125;    //消费者消费产品     public synchronized Chicken pop()&#123;        //判断是否能消费        if(count==0)&#123;            //等待生产者生产，消费者等待            try &#123;                this.wait();            &#125;catch (InterruptedException e)&#123;                e.printStackTrace();            &#125;        &#125;        //如果可以消费        count--;        Chicken chicken=chickens[count];        //吃完了，通知生产者生产        this.notifyAll();        return chicken;    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>信号灯法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPc2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        TV tv=<span class=\"keyword\">new</span> TV();        <span class=\"keyword\">new</span> Player(tv).start();        <span class=\"keyword\">new</span> Watcher(tv).start();    &#125;&#125;<span class=\"comment\">//生产者--&gt;演员class Player extends Thread&#123;    TV tv;    public Player(TV tv)&#123;        this.tv=tv;    &#125;    @Override    public void run()&#123;        for (int i = 0; i &lt; 20; i++) &#123;            if (i%2==0) &#123;                this.tv.play(&quot;快乐大本营播放中&quot;);            &#125;else&#123;                this.tv.play(&quot;正在放抖音&quot;);            &#125;        &#125;    &#125;&#125;//消费者--&gt;观众class Watcher extends Thread&#123;    TV tv;    public Watcher(TV tv)&#123;        this.tv=tv;    &#125;    @Override    public void run()&#123;        for (int i = 0; i &lt; 20; i++) &#123;            tv.watch();        &#125;    &#125;&#125;//产品--&gt;节目class TV&#123;    //演员表演，观众等待 T    //观众观看，演员等待 F    String voice;//表演的节目    Boolean flag=true;    //表演    public synchronized void play(String voice)&#123;        if(!flag)&#123;            try &#123;                this.wait();            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.out.println(&quot;演员表演了：&quot;+voice);        //通知观众观看        this.notifyAll();//通知唤醒        this.voice=voice;        this.flag=!this.flag;    &#125;    //观看    public synchronized void watch()&#123;        if(flag)&#123;            try &#123;                this.wait();            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.out.println(&quot;观看了：&quot;+voice);        //通知演员表演        this.notifyAll();        this.flag=!this.flag;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>继承Thread类：</p>\n<p>1.自定义线程类继承Thread类</p>\n<p>2.重写run()方法，编写线程执行体</p>\n<p>3.创建线程对象，调用start()方法启动线程</p>\n<p>注意：线程不一定立即执行，cpu安排调度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">200</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码&quot;</span>);          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程对象</span></span><br><span class=\"line\">        TestThread1 testThread1=<span class=\"keyword\">new</span> TestThread1(); </span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开始线程</span></span><br><span class=\"line\">        testThread1.start(); <span class=\"comment\">//不是调用run方法</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程----&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>实现Runnable接口:   (推荐使用：避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用)</p>\n<p>1.定义MyRunnable类实现Runnable接口</p>\n<p>2.实现run()方法，编写线程执行体</p>\n<p>3.创建线程对象，调用start()方法启动线程（传入目标对象+Thread对象.start()）</p>\n<p>ps: runnable接口只有一个run()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread3</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">200</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码&quot;</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建runnable借口的实现类对象</span></span><br><span class=\"line\">        TestThread3 testThread3=<span class=\"keyword\">new</span> TestThread3(); </span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class=\"line\">        <span class=\"comment\">//Thread thread = new Thread(testThread3);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//thread.start();</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testThread3).start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程----&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//多个线程同时操作一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//买火车票的例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个线程操作同一个资源的情况下，线程不安全，数据紊乱。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//票数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNums=<span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ticketNums&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;拿到了第&quot;</span>+ticketNums--+<span class=\"string\">&quot;票&quot;</span>);</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        TestThread ticket = <span class=\"keyword\">new</span> TestThread();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket,<span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket,<span class=\"string\">&quot;老师&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket,<span class=\"string\">&quot;黄牛党&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：龟兔赛跑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Race</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>)&amp;&amp;i%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = gameOver(i);</span><br><span class=\"line\">            <span class=\"comment\">//如果比赛结束</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;跑了&quot;</span>+i+<span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否完成比赛</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">gameOver</span><span class=\"params\">(<span class=\"keyword\">int</span> steps)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有胜利者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(winner!=<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//已经存在胜利者了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(steps&gt;=<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                winner=Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;winner is&quot;</span>+winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Race race=<span class=\"keyword\">new</span> Race();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span>  Thread(race,<span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span>  Thread(race,<span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>静态代理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态代理模式总结</span></span><br><span class=\"line\"><span class=\"comment\">//真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\">//代理对象需要代理真实角色</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        You you=<span class=\"keyword\">new</span> You();</span><br><span class=\"line\"></span><br><span class=\"line\">         WeddingCompany weddingCompany=<span class=\"keyword\">new</span> WeddingCompany(you);</span><br><span class=\"line\"></span><br><span class=\"line\">        weddingCompany.HappyMarry();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HappyMarry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">You</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">HappyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;X老师结婚了，真开心&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色，帮助你结婚</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//代理谁--&gt;真实目标角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Marry target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeddingCompany</span><span class=\"params\">(Marry target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">HappyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target.HappyMarry();<span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>lambda表达式：</p>\n<p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</p>\n<p>而对于函数式接口，我们可以通过lamdba表达式来创建该接口的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推导lambda表达式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLambda1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like2</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like lambda2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ILike like = <span class=\"keyword\">new</span> Like();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> Like2();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.局部内部类</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like3</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lambda3&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> Like3();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//5.匿名内部类,没有类的名称，必须借助接口或者父类</span></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> ILike() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lambda4&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//6.用lambda简化</span></span><br><span class=\"line\">        like = ()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like lambda5&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.定义一个函数式接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILike</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.实现类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I like lambda&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>线程停止</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试stop</span></span><br><span class=\"line\"><span class=\"comment\">//1.建议线程正常停止----&gt;利用次数，不建议死循环</span></span><br><span class=\"line\"><span class=\"comment\">//2.设置标志位</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1.设置一个标识位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;run...Thread&quot;</span>+i++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.设置一个公开的方法停止线程，转换标识位</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestStop testStop=<span class=\"keyword\">new</span> TestStop();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testStop).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span>+i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用stop方法切换标识位，让线程停止</span></span><br><span class=\"line\">                testStop.stop();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程停止了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>线程同步：其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用</p>\n<p>（形成条件：队列+锁）</p>\n<p>同步方法：</p>\n<p>·由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized方法和synchronized块。</p>\n<p>·synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p>\n<p>lock锁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock lock=<span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"comment\">//....</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    lock.lock();<span class=\"comment\">//加锁</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// ......不安全的代码</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    lock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>管程法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法//生产者，消费者，产品，缓冲区public class TestPC&#123;    public static void main(String[] args) &#123;        SynContainer container=new SynContainer();        new Productor(container).start();        new Consumer(container).start();    &#125;&#125;//生产者class Productor extends Thread&#123;    SynContainer container;    public Productor(SynContainer container)&#123;        this.container=container;    &#125;    //生产    public void run()&#123;        for (int i = 0; i &lt; 100; i++) &#123;            System.out.println(&quot;生产了&quot;+i+&quot;只鸡&quot;);            container.push(new Chicken(i));        &#125;    &#125;&#125;//消费者class Consumer extends Thread&#123;    SynContainer container;    public Consumer(SynContainer container)&#123;        this.container=container;    &#125;    //消费    @Override    public void run()&#123;        for (int i = 0; i &lt; 100; i++) &#123;            System.out.println(&quot;消费了--&gt;&quot;+container.pop().id+&quot;只鸡&quot;);        &#125;    &#125;    &#125;//产品class Chicken&#123;    int id;//产品编号    public Chicken(int id) &#123;        this.id = id;    &#125;    &#125;//缓冲区class SynContainer&#123;    //需要一个容器大小    Chicken[] chickens=new Chicken[10];    //容器计数器    int count=0;    //生产者放入产品    public synchronized void push(Chicken chicken)&#123;        //如果容器满了，就需要等待消费者消费        if(count==chickens.length)&#123;            //生产等待            try&#123;                this.wait();            &#125;catch (InterruptedException e)&#123;                e.printStackTrace();            &#125;        &#125;        //如果没有满，我们就需要丢入产品        chickens[count]=chicken;        count++;        //可以通知消费者消费了        this.notifyAll();            &#125;    //消费者消费产品     public synchronized Chicken pop()&#123;        //判断是否能消费        if(count==0)&#123;            //等待生产者生产，消费者等待            try &#123;                this.wait();            &#125;catch (InterruptedException e)&#123;                e.printStackTrace();            &#125;        &#125;        //如果可以消费        count--;        Chicken chicken=chickens[count];        //吃完了，通知生产者生产        this.notifyAll();        return chicken;    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>信号灯法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPc2</span> </span>&#123;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        TV tv=<span class=\"keyword\">new</span> TV();        <span class=\"keyword\">new</span> Player(tv).start();        <span class=\"keyword\">new</span> Watcher(tv).start();    &#125;&#125;<span class=\"comment\">//生产者--&gt;演员class Player extends Thread&#123;    TV tv;    public Player(TV tv)&#123;        this.tv=tv;    &#125;    @Override    public void run()&#123;        for (int i = 0; i &lt; 20; i++) &#123;            if (i%2==0) &#123;                this.tv.play(&quot;快乐大本营播放中&quot;);            &#125;else&#123;                this.tv.play(&quot;正在放抖音&quot;);            &#125;        &#125;    &#125;&#125;//消费者--&gt;观众class Watcher extends Thread&#123;    TV tv;    public Watcher(TV tv)&#123;        this.tv=tv;    &#125;    @Override    public void run()&#123;        for (int i = 0; i &lt; 20; i++) &#123;            tv.watch();        &#125;    &#125;&#125;//产品--&gt;节目class TV&#123;    //演员表演，观众等待 T    //观众观看，演员等待 F    String voice;//表演的节目    Boolean flag=true;    //表演    public synchronized void play(String voice)&#123;        if(!flag)&#123;            try &#123;                this.wait();            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.out.println(&quot;演员表演了：&quot;+voice);        //通知观众观看        this.notifyAll();//通知唤醒        this.voice=voice;        this.flag=!this.flag;    &#125;    //观看    public synchronized void watch()&#123;        if(flag)&#123;            try &#123;                this.wait();            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.out.println(&quot;观看了：&quot;+voice);        //通知演员表演        this.notifyAll();        this.flag=!this.flag;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"爬虫入门笔记","date":"2021-05-09T09:03:58.000Z","typora-copy-images-to":null,"_content":"\n### 爬虫初期（第一天）\n\n第一次爬虫：\n\n```python\nimport requests\nif __name__ == \"__main__\":\n    url = \"https://www.sogou.com/\"\n    response = requests.get(url=url)\n    page_text = response.text\n\n    print(page_text)\n\n    with open('./sogou.html', 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('结束')\n```\n\n\n\n第二次爬虫;\n\n```python\nimport requests\n\nif __name__ == \"__main__\":\n    url = 'https://www.sogou.com/web'\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n    response = requests.get(url=url, params=param)\n    page_text = response.text\n    fileName = kw + '.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print(fileName, '保存成功')\n```\n\n\n\nUA:请求载体的身份标识 （UA伪装）\n\n\n\n(百度翻译)\n\n```python\nimport json\n\nimport requests\n\nif __name__ == \"__main__\":\n    post_url = 'https://fanyi.baidu.com/sug'\n    # 进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n    # post请求参数的处理(与get请求一致)\n    word = input('enter a word:')\n    data = {\n        'kw': word\n    }\n\n    # 请求发送\n    response = requests.post(url=post_url, data=data, headers=headers)\n    # 获取响应数据，json()方法返回的是obj(如果确认响应数据时json类型的，才可以使用json())\n    dic_obj = response.json()\n    print(dic_obj)\n\n    # 持久化存储\n    fileName = word + '.json'\n    fp = open(fileName, 'w', encoding='utf-8')\n    json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    print(\"over!!!\")\n\n```\n\n\n\n\n\n(豆瓣电影)\n\n```python\nimport json\n\nimport requests\n\nif __name__ == \"__main__\":\n    url = 'https://movie.douban.com/j/search_subjects'\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n\n    param = {\n        'type': 'movie',\n        'tag': '热门',\n        'sort': 'recommend',\n        'page_limit': '20',\n        'page_start': '1',\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    fp = open('./douban.json', 'w', encoding='utf-8')\n    json.dump(list_data, fp=fp, ensure_ascii=False)\n\n    print('over!!!')\n```\n\n\n\n\n\n（KFC）\n\n```python\nimport json\n\nimport requests\n\nif __name__ == \"__main__\":\n    url = 'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname'\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n\n    param = {\n        'cname': '',\n        'pid': '',\n        'keyword': '南京',\n        'pageIndex': 1,\n        'pageSize': 10,\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    fp = open('./kfc.json', 'w', encoding='utf-8')\n    json.dump(list_data, fp=fp, ensure_ascii=False)\n\n    print('over!!!')\n```\n\n\n\n药监总局\n\n```python\nimport requests\nimport json\n\nif __name__ == \"__main__\":\n    url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'\n    data = {\n        'on': ' true',\n        'page': '1',\n        'pageSize': '15',\n        'productName': '',\n        'conditionType': '1',\n        'applyname': '',\n        'applysn': ''\n    }\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n    json_ids = requests.post(url=url, headers=headers, data=data).json()\n\n    id_list = []  # 储存企业的ID\n    all_data_list = []  # 存储所有的企业详情数据\n\n    for dic in json_ids['list']:\n        id_list.append(dic['ID'])\n    print(id_list)\n\n    # 获取企业详情数据\n    post_url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'\n    for id in id_list:\n        data = {\n            'id': id\n        }\n        detail_json = requests.post(url=post_url, headers=headers, data=data).json()\n        print(detail_json)\n        all_data_list.append(detail_json)\n\n    # 持久化存储\n    fp = open('./allDate.json', 'w', encoding='utf-8')\n    json.dump(all_data_list, fp=fp, ensure_ascii=False)\n    print('over!!!')\n```\n\n\n\n多页查询\n\n```python\nimport requests\nimport json\n\nif __name__ == \"__main__\":\n    url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n    id_list = []  # 储存企业的ID\n    all_data_list = []  # 存储所有的企业详情数据\n\n    for page in range(1, 10):\n        page = str(page)\n        data = {\n            'on': ' true',\n            'page': page ,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': ''\n        }\n        json_ids = requests.post(url=url, headers=headers, data=data).json()\n\n        for dic in json_ids['list']:\n            id_list.append(dic['ID'])\n            print(id_list)\n\n    # 获取企业详情数据\n    post_url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'\n    for id in id_list:\n        data = {\n            'id': id\n        }\n        detail_json = requests.post(url=post_url, headers=headers, data=data).json()\n        print(detail_json)\n        all_data_list.append(detail_json)\n\n    # 持久化存储\n    fp = open('./allDate.json', 'w', encoding='utf-8')\n    json.dump(all_data_list, fp=fp, ensure_ascii=False)\n    print('over!!!')\n```\n\n\n\n### 第二天\n\n```python\nimport requests\nimport json\n\nif __name__ == \"__main__\":\n    url = 'https://pic.qiushibaike.com/system/pictures/12424/124241423/medium/B5KYZ8MOZWQOCMUC.jpg'\n    img_data = requests.get(url=url).content\n\n    with open('./qiutu.jpg', 'wb') as fp:\n        fp.write(img_data)\n```\n\n\n\n爬取图片（re）\n\n```python\nimport requestsimport reimport osif __name__ == \"__main__\":    # 创建一个文件夹，保存所有图片    if not os.path.exists('./qiutuLibs'):        os.mkdir('./qiutuLibs')    url = 'https://www.qiushibaike.com/imgrank/'    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    page_text = requests.get(url=url, headers=headers).text    ex = '<div class=\"thumb\">.*?<img src=\"(.*?)\" alt.*?>'    img_src_list = re.findall(ex, page_text, re.S)    for src in img_src_list:        src = 'https:' + src        img_data = requests.get(url=src, headers=headers).content        img_name = src.split('/')[-1]        imgPath = './qiutuLibs/' + img_name        with open(imgPath, 'wb') as fp:            fp.write(img_data)            print(img_name, '下载成功!!!')           \n```\n\n\n\n\n\n分页查询\n\n```python\nimport requestsimport reimport osif __name__ == \"__main__\":    # 创建一个文件夹，保存所有图片    if not os.path.exists('./qiutuLibs'):        os.mkdir('./qiutuLibs')    url = 'https://www.qiushibaike.com/imgrank/page/%d/'    pageNum = 1    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    for pageNum in range(1, 36):        new_url = format(url % pageNum)        page_text = requests.get(url=url, headers=headers).text        ex = '<div class=\"thumb\">.*?<img src=\"(.*?)\" alt.*?>'        img_src_list = re.findall(ex, page_text, re.S)            for src in img_src_list:            src = 'https:' + src            img_data = requests.get(url=src, headers=headers).content            img_name = src.split('/')[-1]            imgPath = './qiutuLibs/' + img_name            with open(imgPath, 'wb') as fp:                fp.write(img_data)                print(img_name, '下载成功!!!')\n```\n\n\n\n\n\n（出错？？？？？）\n\n```python\nimport requestsfrom bs4 import BeautifulSoupif __name__ == \"__main__\":    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Edg/89.0.774.77'    }    url = 'https://www.shicimingju.com/book/sanguoyanyi.html'    page_text = requests.get(url=url, headers=headers).text    soup = BeautifulSoup(page_text, 'lxml')    li_list = soup.select('.book-mulu > ul > li')    fp = open('./sanguo.txt', 'w', encoding='utf-8')    for li in li_list:        title = li.a.string        detail_url = 'http://www/shicimingju.com' + li.a['href']        # 对详情页发起请求,解析出章节内容        detail_page_text = requests.get(url=detail_url, headers=headers).text        detail_soup = BeautifulSoup(detail_page_text)        div_tag = detail_soup.find('div', class_='chapter_content')        # 解析到了章节的内容        # print(div_tag)        content = div_tag.text        fp.write(title + ':' + content + '\\n')        print(title, \"爬取成功！！！\")\n```\n\n\n\n\n\nxpath爬取全国城市名称\n\n```python\nimport requestsfrom lxml import etreeif __name__ == '__main__':    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    url = 'https://www.aqistudy.cn/historydata/'    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    hot_li_list = tree.xpath('//div[@class=\"bottom\"]/ul/li')    all_city_names = []    for li in hot_li_list:        hot_city_name = li.xpath('./a/text()')[0]        all_city_names.append(hot_city_name)    print(all_city_names)    city_names_list = tree.xpath('//div[@class=\"bottom\"]/ul/div[2]/li')    for li in city_names_list:        city_name = li.xpath('./a/text()')[0]        all_city_names.append(city_name)    print(all_city_names)\n```\n\n\n\n\n\n### 第三天\n\n\n\n验证码识别\n\n```python\nimport requestsimport fateadm_apifrom lxml import etreedef TestFunc(file_name):    pd_id = \"129393\"  # 用户中心页可以查询到pd信息    pd_key = \"fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl\"    app_id = \"329393\"  # 开发者分成用的账号，在开发者中心可以查询到    app_key = \"o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v\"    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = \"30400\"    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    '''    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    '''    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = \"123\"    # card_key        = \"123\"    # 充值    # api.Charge(card_id, card_key)if __name__ == '__main__':    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    url = 'https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx'    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = \"https://so.gushiwen.cn\" + tree.xpath('//*[@id=\"imgCode\"]/@src')[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open('./code.jpg', 'wb') as fp:        fp.write(img_data)    TestFunc('code.jpg')\n```\n\n\n\n\n\n### 第四天\n\n\n\n验证码自动识别\n\n```python\n# coding=utf-8import os, sysimport hashlibimport timeimport jsonimport requestsFATEA_PRED_URL = \"http://pred.fateadm.com\"def LOG(log):    # 不需要测试时，注释掉日志就可以了    print(log)    log = Noneclass TmpObj():    def __init__(self):        self.value = Noneclass Rsp():    def __init__(self):        self.ret_code = -1        self.cust_val = 0.0        self.err_msg = \"succ\"        self.pred_rsp = TmpObj()    def ParseJsonRsp(self, rsp_data):        if rsp_data is None:            self.err_msg = \"http request failed, get rsp Nil data\"            return        jrsp = json.loads(rsp_data)        self.ret_code = int(jrsp[\"RetCode\"])        self.err_msg = jrsp[\"ErrMsg\"]        self.request_id = jrsp[\"RequestId\"]        if self.ret_code == 0:            rslt_data = jrsp[\"RspData\"]            if rslt_data is not None and rslt_data != \"\":                jrsp_ext = json.loads(rslt_data)                if \"cust_val\" in jrsp_ext:                    data = jrsp_ext[\"cust_val\"]                    self.cust_val = float(data)                if \"result\" in jrsp_ext:                    data = jrsp_ext[\"result\"]                    self.pred_rsp.value = datadef CalcSign(pd_id, passwd, timestamp):    md5 = hashlib.md5()    md5.update((timestamp + passwd).encode())    csign = md5.hexdigest()    md5 = hashlib.md5()    md5.update((pd_id + timestamp + csign).encode())    csign = md5.hexdigest()    return csigndef CalcCardSign(cardid, cardkey, timestamp, passwd):    md5 = hashlib.md5()    md5.update(passwd + timestamp + cardid + cardkey)    return md5.hexdigest()def HttpRequest(url, body_data, img_data=\"\"):    rsp = Rsp()    post_data = body_data    files = {        'img_data': ('img_data', img_data)    }    header = {        'User-Agent': 'Mozilla/5.0',    }    rsp_data = requests.post(url, post_data, files=files, headers=header)    rsp.ParseJsonRsp(rsp_data.text)    return rspclass FateadmApi():    # API接口调用类    # 参数（appID，appKey，pdID，pdKey）    def __init__(self, app_id, app_key, pd_id, pd_key):        self.app_id = app_id        if app_id is None:            self.app_id = \"\"        self.app_key = app_key        self.pd_id = pd_id        self.pd_key = pd_key        self.host = FATEA_PRED_URL    def SetHost(self, url):        self.host = url    #    # 查询余额    # 参数：无    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.cust_val：用户余额    #   rsp.err_msg：异常时返回异常详情    #    def QueryBalc(self):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign        }        url = self.host + \"/api/custval\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"query succ ret: {} cust_val: {} rsp: {} pred: {}\".format(rsp.ret_code, rsp.cust_val, rsp.err_msg,                                                                          rsp.pred_rsp.value))        else:            LOG(\"query failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    #    # 查询网络延迟    # 参数：pred_type:识别类型    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg： 异常时返回异常详情    #    def QueryTTS(self, pred_type):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            \"predict_type\": pred_type,        }        if self.app_id != \"\":            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[\"appid\"] = self.app_id            param[\"asign\"] = asign        url = self.host + \"/api/qcrtt\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"query rtt succ ret: {} request_id: {} err: {}\".format(rsp.ret_code, rsp.request_id, rsp.err_msg))        else:            LOG(\"predict failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    #    # 识别验证码    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def Predict(self, pred_type, img_data, head_info=\"\"):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            \"predict_type\": pred_type,            \"up_type\": \"mt\"        }        if head_info is not None or head_info != \"\":            param[\"head_info\"] = head_info        if self.app_id != \"\":            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[\"appid\"] = self.app_id            param[\"asign\"] = asign        url = self.host + \"/api/capreg\"        files = img_data        rsp = HttpRequest(url, param, files)        if rsp.ret_code == 0:            LOG(\"predict succ ret: {} request_id: {} pred: {} err: {}\".format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(\"predict failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg))            if rsp.ret_code == 4003:                # lack of money                LOG(\"cust_val <= 0 lack of money, please charge immediately\")        return rsp    #    # 从文件进行验证码识别    # 参数：pred_type;识别类型  file_name:文件名    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def PredictFromFile(self, pred_type, file_name, head_info=\"\"):        with open(file_name, \"rb\") as f:            data = f.read()        return self.Predict(pred_type, data, head_info=head_info)    #    # 识别失败，进行退款请求    # 参数：request_id：需要退款的订单号    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    #    def Justice(self, request_id):        if request_id == \"\":            #            return        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            \"request_id\": request_id        }        url = self.host + \"/api/capjust\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"justice succ ret: {} request_id: {} pred: {} err: {}\".format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(\"justice failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    #    # 充值接口    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    def Charge(self, cardid, cardkey):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        csign = CalcCardSign(cardid, cardkey, tm, self.pd_key)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            'cardid': cardid,            'csign': csign        }        url = self.host + \"/api/charge\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"charge succ ret: {} request_id: {} pred: {} err: {}\".format(rsp.ret_code, rsp.request_id,                                                                             rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(\"charge failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    ##    # 充值，只返回是否成功    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值： 充值成功时返回0    ##    def ExtendCharge(self, cardid, cardkey):        return self.Charge(cardid, cardkey).ret_code    ##    # 调用退款，只返回是否成功    # 参数： request_id：需要退款的订单号    # 返回值： 退款成功时返回0    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    ##    def JusticeExtend(self, request_id):        return self.Justice(request_id).ret_code    ##    # 查询余额，只返回余额    # 参数：无    # 返回值：rsp.cust_val：余额    ##    def QueryBalcExtend(self):        rsp = self.QueryBalc()        return rsp.cust_val    ##    # 从文件识别验证码，只返回识别结果    # 参数：pred_type;识别类型  file_name:文件名    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictFromFileExtend(self, pred_type, file_name, head_info=\"\"):        rsp = self.PredictFromFile(pred_type, file_name, head_info)        return rsp.pred_rsp.value    ##    # 识别接口，只返回识别结果    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictExtend(self, pred_type, img_data, head_info=\"\"):        rsp = self.Predict(pred_type, img_data, head_info)        return rsp.pred_rsp.valuedef TestFunc():    pd_id = \"100000\"  # 用户中心页可以查询到pd信息    pd_key = \"123456\"    app_id = \"100001\"  # 开发者分成用的账号，在开发者中心可以查询到    app_key = \"123456\"    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = \"30400\"    api = FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    file_name = \"img.jpg\"    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    '''    # 如果不是通过文件识别，则调用Predict接口：    # result \t\t\t= api.PredictExtend(pred_type,data)   \t# 直接返回识别结果    rsp             = api.Predict(pred_type,data)\t\t\t\t# 返回详细的识别结果    '''    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = \"123\"    # card_key        = \"123\"    # 充值    # api.Charge(card_id, card_key)    LOG(\"print in testfunc\")if __name__ == \"__main__\":    TestFunc()\n```\n\n\n\n\n\n验证码自动识别（测试）\n\n```python\nimport requestsimport fateadm_apifrom lxml import etreedef TestFunc(file_name):    pd_id = \"129393\"  # 用户中心页可以查询到pd信息    pd_key = \"fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl\"    app_id = \"329393\"  # 开发者分成用的账号，在开发者中心可以查询到    app_key = \"o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v\"    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = \"30400\"    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    '''    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    '''    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = \"123\"    # card_key        = \"123\"    # 充值    # api.Charge(card_id, card_key)if __name__ == '__main__':    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    url = 'https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx'    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = \"https://so.gushiwen.cn\" + tree.xpath('//*[@id=\"imgCode\"]/@src')[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open('./code.jpg', 'wb') as fp:        fp.write(img_data)    TestFunc('code.jpg')\n```\n\n\n\n### 第五天(异步爬虫)\n\n\n\n梨视频爬取（未完成）\n\n```python\nimport requestsfrom lxml import etreeheaders = {    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'}url = 'https://www.pearvideo.com/category_5'page_text = requests.get(url=url, headers=headers).texttree = etree.HTML(page_text)li_list = etree.xpath('//ul[@id=\"listvideoListUl\"]/li')for li in li_list:    detail_url = 'https://www.pearvideo.com/' + li.xpath('./div/a/@href')[0]    name = li.xpath('./div/a/div[2]/text()')[0]    print(detail_url, name)\n```\n\n\n\n\n\n协程初步\n\n```python\ndef consume():    while True:        # consumer协程等待接收数据        number = yield        print('开始消费', number)consumer = consume()# 让初始化状态的consumer协程先执行起来，在yield处停止next(consumer)for num in range(0, 100):    print('开始生产', num)    # 发送数据给consumer处理    consumer.send(num)\n```\n\n\n\n协程：\n\n```python\nimport asyncioimport timeasync def request(url):    print('正在下载', url)    # 在异步协程中如果出现了同步模块相关的代码，那么就无法实现异步    # time.sleep(2)    # 当在asyncio中遇到阻塞操作时必须进行手动挂起    await asyncio.sleep(2)    print('下载完毕', url)start = time.time()urls = {    'www.baidu.com',    'www.sogou.com',    'www.goubanjia.com'}# 任务列表: 存放多个任务对象stacks = []for url in urls:    c = request(url)    task = asyncio.ensure_future(c)    stacks.append(task)loop = asyncio.get_event_loop()# 需要将任务列表封装到wait中loop.run_until_complete(asyncio.wait(stacks))print(time.time()-start)\n```\n\n\n\n\n\n\n\n```python\nimport requestsimport asyncioimport timeimport aiohttpstart = time.time()urls = [    '...', '...']async def get_page(url):    async with aiohttp.ClientSession() as session:        async with await session.get(url) as response:            # text()返回字符串形式的响应数据            # read()返回的二进制形式的响应数据            # json()返回的就是json对象            # 注意：获取响应数据操作之前一定要使用await进行手动挂起            page_text = await response.text()            print(page_text)tasks = []for url in urls:    c = get_page(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks))end = time.time()\n```\n\n\n\n\n\n### 第六天\n\n```python\nfrom selenium import webdriverfrom lxml import etreefrom time import sleep# 实例化一个浏览器对象（传入浏览器的驱动成）bro = webdriver.Chrome(executable_path='./chromedriver')# 让浏览器发起一个指定url对应请求bro.get('http://scxk.nmpa.gov.cn:81/xk/')# 获取浏览器当前页面的页面源码数据page_text = bro.page_source# 解析企业名称tree = etree.HTML(page_text)li_list = tree.xpath('//ul[@id=\"gzlist\"]/li')for li in li_list:    name = li.xpath('./dl/@title')[0]    print(name)sleep(5)bro.quit()\n```\n\n\n\n```python\nfrom selenium import webdriverfrom time import sleepbro = webdriver.Chrome(executable_path='./chromedriver.exe')# 指定标签search_input = bro.find_element_by_id('q')# 标签交互search_input.send_keys('Iphone')# 执行一组js程序bro.execute_script('window.scrollTo(0,document.body.scrollHeight)')# 点击搜索按钮btn = bro.find_element_by_css_selector('.btn-search')btn.click()bro.get('https://www.baidu.com')sleep(2)# 回退bro.back()sleep(2)# 前进bro.foward()sleep(5)bro.quit()\n```\n\n\n\n### 第七天（scrapy）\n\n终端操作\n\n```\nscrapy genspider spiderName www.xxx.comscrapy crawl spiderNamescrapy crawl spiderName -o filePath\n```\n\n\n\n","source":"_posts/爬虫入门笔记.md","raw":"---\ntitle: 爬虫入门笔记\ndate: 2021-05-09 17:03:58\ncategories: 爬虫\ntypora-copy-images-to: \ntags:\n---\n\n### 爬虫初期（第一天）\n\n第一次爬虫：\n\n```python\nimport requests\nif __name__ == \"__main__\":\n    url = \"https://www.sogou.com/\"\n    response = requests.get(url=url)\n    page_text = response.text\n\n    print(page_text)\n\n    with open('./sogou.html', 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('结束')\n```\n\n\n\n第二次爬虫;\n\n```python\nimport requests\n\nif __name__ == \"__main__\":\n    url = 'https://www.sogou.com/web'\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n    response = requests.get(url=url, params=param)\n    page_text = response.text\n    fileName = kw + '.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print(fileName, '保存成功')\n```\n\n\n\nUA:请求载体的身份标识 （UA伪装）\n\n\n\n(百度翻译)\n\n```python\nimport json\n\nimport requests\n\nif __name__ == \"__main__\":\n    post_url = 'https://fanyi.baidu.com/sug'\n    # 进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n    # post请求参数的处理(与get请求一致)\n    word = input('enter a word:')\n    data = {\n        'kw': word\n    }\n\n    # 请求发送\n    response = requests.post(url=post_url, data=data, headers=headers)\n    # 获取响应数据，json()方法返回的是obj(如果确认响应数据时json类型的，才可以使用json())\n    dic_obj = response.json()\n    print(dic_obj)\n\n    # 持久化存储\n    fileName = word + '.json'\n    fp = open(fileName, 'w', encoding='utf-8')\n    json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    print(\"over!!!\")\n\n```\n\n\n\n\n\n(豆瓣电影)\n\n```python\nimport json\n\nimport requests\n\nif __name__ == \"__main__\":\n    url = 'https://movie.douban.com/j/search_subjects'\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n\n    param = {\n        'type': 'movie',\n        'tag': '热门',\n        'sort': 'recommend',\n        'page_limit': '20',\n        'page_start': '1',\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    fp = open('./douban.json', 'w', encoding='utf-8')\n    json.dump(list_data, fp=fp, ensure_ascii=False)\n\n    print('over!!!')\n```\n\n\n\n\n\n（KFC）\n\n```python\nimport json\n\nimport requests\n\nif __name__ == \"__main__\":\n    url = 'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname'\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n\n    param = {\n        'cname': '',\n        'pid': '',\n        'keyword': '南京',\n        'pageIndex': 1,\n        'pageSize': 10,\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    fp = open('./kfc.json', 'w', encoding='utf-8')\n    json.dump(list_data, fp=fp, ensure_ascii=False)\n\n    print('over!!!')\n```\n\n\n\n药监总局\n\n```python\nimport requests\nimport json\n\nif __name__ == \"__main__\":\n    url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'\n    data = {\n        'on': ' true',\n        'page': '1',\n        'pageSize': '15',\n        'productName': '',\n        'conditionType': '1',\n        'applyname': '',\n        'applysn': ''\n    }\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n    json_ids = requests.post(url=url, headers=headers, data=data).json()\n\n    id_list = []  # 储存企业的ID\n    all_data_list = []  # 存储所有的企业详情数据\n\n    for dic in json_ids['list']:\n        id_list.append(dic['ID'])\n    print(id_list)\n\n    # 获取企业详情数据\n    post_url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'\n    for id in id_list:\n        data = {\n            'id': id\n        }\n        detail_json = requests.post(url=post_url, headers=headers, data=data).json()\n        print(detail_json)\n        all_data_list.append(detail_json)\n\n    # 持久化存储\n    fp = open('./allDate.json', 'w', encoding='utf-8')\n    json.dump(all_data_list, fp=fp, ensure_ascii=False)\n    print('over!!!')\n```\n\n\n\n多页查询\n\n```python\nimport requests\nimport json\n\nif __name__ == \"__main__\":\n    url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'\n    }\n    id_list = []  # 储存企业的ID\n    all_data_list = []  # 存储所有的企业详情数据\n\n    for page in range(1, 10):\n        page = str(page)\n        data = {\n            'on': ' true',\n            'page': page ,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': ''\n        }\n        json_ids = requests.post(url=url, headers=headers, data=data).json()\n\n        for dic in json_ids['list']:\n            id_list.append(dic['ID'])\n            print(id_list)\n\n    # 获取企业详情数据\n    post_url = 'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'\n    for id in id_list:\n        data = {\n            'id': id\n        }\n        detail_json = requests.post(url=post_url, headers=headers, data=data).json()\n        print(detail_json)\n        all_data_list.append(detail_json)\n\n    # 持久化存储\n    fp = open('./allDate.json', 'w', encoding='utf-8')\n    json.dump(all_data_list, fp=fp, ensure_ascii=False)\n    print('over!!!')\n```\n\n\n\n### 第二天\n\n```python\nimport requests\nimport json\n\nif __name__ == \"__main__\":\n    url = 'https://pic.qiushibaike.com/system/pictures/12424/124241423/medium/B5KYZ8MOZWQOCMUC.jpg'\n    img_data = requests.get(url=url).content\n\n    with open('./qiutu.jpg', 'wb') as fp:\n        fp.write(img_data)\n```\n\n\n\n爬取图片（re）\n\n```python\nimport requestsimport reimport osif __name__ == \"__main__\":    # 创建一个文件夹，保存所有图片    if not os.path.exists('./qiutuLibs'):        os.mkdir('./qiutuLibs')    url = 'https://www.qiushibaike.com/imgrank/'    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    page_text = requests.get(url=url, headers=headers).text    ex = '<div class=\"thumb\">.*?<img src=\"(.*?)\" alt.*?>'    img_src_list = re.findall(ex, page_text, re.S)    for src in img_src_list:        src = 'https:' + src        img_data = requests.get(url=src, headers=headers).content        img_name = src.split('/')[-1]        imgPath = './qiutuLibs/' + img_name        with open(imgPath, 'wb') as fp:            fp.write(img_data)            print(img_name, '下载成功!!!')           \n```\n\n\n\n\n\n分页查询\n\n```python\nimport requestsimport reimport osif __name__ == \"__main__\":    # 创建一个文件夹，保存所有图片    if not os.path.exists('./qiutuLibs'):        os.mkdir('./qiutuLibs')    url = 'https://www.qiushibaike.com/imgrank/page/%d/'    pageNum = 1    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    for pageNum in range(1, 36):        new_url = format(url % pageNum)        page_text = requests.get(url=url, headers=headers).text        ex = '<div class=\"thumb\">.*?<img src=\"(.*?)\" alt.*?>'        img_src_list = re.findall(ex, page_text, re.S)            for src in img_src_list:            src = 'https:' + src            img_data = requests.get(url=src, headers=headers).content            img_name = src.split('/')[-1]            imgPath = './qiutuLibs/' + img_name            with open(imgPath, 'wb') as fp:                fp.write(img_data)                print(img_name, '下载成功!!!')\n```\n\n\n\n\n\n（出错？？？？？）\n\n```python\nimport requestsfrom bs4 import BeautifulSoupif __name__ == \"__main__\":    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Edg/89.0.774.77'    }    url = 'https://www.shicimingju.com/book/sanguoyanyi.html'    page_text = requests.get(url=url, headers=headers).text    soup = BeautifulSoup(page_text, 'lxml')    li_list = soup.select('.book-mulu > ul > li')    fp = open('./sanguo.txt', 'w', encoding='utf-8')    for li in li_list:        title = li.a.string        detail_url = 'http://www/shicimingju.com' + li.a['href']        # 对详情页发起请求,解析出章节内容        detail_page_text = requests.get(url=detail_url, headers=headers).text        detail_soup = BeautifulSoup(detail_page_text)        div_tag = detail_soup.find('div', class_='chapter_content')        # 解析到了章节的内容        # print(div_tag)        content = div_tag.text        fp.write(title + ':' + content + '\\n')        print(title, \"爬取成功！！！\")\n```\n\n\n\n\n\nxpath爬取全国城市名称\n\n```python\nimport requestsfrom lxml import etreeif __name__ == '__main__':    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    url = 'https://www.aqistudy.cn/historydata/'    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    hot_li_list = tree.xpath('//div[@class=\"bottom\"]/ul/li')    all_city_names = []    for li in hot_li_list:        hot_city_name = li.xpath('./a/text()')[0]        all_city_names.append(hot_city_name)    print(all_city_names)    city_names_list = tree.xpath('//div[@class=\"bottom\"]/ul/div[2]/li')    for li in city_names_list:        city_name = li.xpath('./a/text()')[0]        all_city_names.append(city_name)    print(all_city_names)\n```\n\n\n\n\n\n### 第三天\n\n\n\n验证码识别\n\n```python\nimport requestsimport fateadm_apifrom lxml import etreedef TestFunc(file_name):    pd_id = \"129393\"  # 用户中心页可以查询到pd信息    pd_key = \"fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl\"    app_id = \"329393\"  # 开发者分成用的账号，在开发者中心可以查询到    app_key = \"o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v\"    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = \"30400\"    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    '''    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    '''    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = \"123\"    # card_key        = \"123\"    # 充值    # api.Charge(card_id, card_key)if __name__ == '__main__':    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    url = 'https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx'    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = \"https://so.gushiwen.cn\" + tree.xpath('//*[@id=\"imgCode\"]/@src')[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open('./code.jpg', 'wb') as fp:        fp.write(img_data)    TestFunc('code.jpg')\n```\n\n\n\n\n\n### 第四天\n\n\n\n验证码自动识别\n\n```python\n# coding=utf-8import os, sysimport hashlibimport timeimport jsonimport requestsFATEA_PRED_URL = \"http://pred.fateadm.com\"def LOG(log):    # 不需要测试时，注释掉日志就可以了    print(log)    log = Noneclass TmpObj():    def __init__(self):        self.value = Noneclass Rsp():    def __init__(self):        self.ret_code = -1        self.cust_val = 0.0        self.err_msg = \"succ\"        self.pred_rsp = TmpObj()    def ParseJsonRsp(self, rsp_data):        if rsp_data is None:            self.err_msg = \"http request failed, get rsp Nil data\"            return        jrsp = json.loads(rsp_data)        self.ret_code = int(jrsp[\"RetCode\"])        self.err_msg = jrsp[\"ErrMsg\"]        self.request_id = jrsp[\"RequestId\"]        if self.ret_code == 0:            rslt_data = jrsp[\"RspData\"]            if rslt_data is not None and rslt_data != \"\":                jrsp_ext = json.loads(rslt_data)                if \"cust_val\" in jrsp_ext:                    data = jrsp_ext[\"cust_val\"]                    self.cust_val = float(data)                if \"result\" in jrsp_ext:                    data = jrsp_ext[\"result\"]                    self.pred_rsp.value = datadef CalcSign(pd_id, passwd, timestamp):    md5 = hashlib.md5()    md5.update((timestamp + passwd).encode())    csign = md5.hexdigest()    md5 = hashlib.md5()    md5.update((pd_id + timestamp + csign).encode())    csign = md5.hexdigest()    return csigndef CalcCardSign(cardid, cardkey, timestamp, passwd):    md5 = hashlib.md5()    md5.update(passwd + timestamp + cardid + cardkey)    return md5.hexdigest()def HttpRequest(url, body_data, img_data=\"\"):    rsp = Rsp()    post_data = body_data    files = {        'img_data': ('img_data', img_data)    }    header = {        'User-Agent': 'Mozilla/5.0',    }    rsp_data = requests.post(url, post_data, files=files, headers=header)    rsp.ParseJsonRsp(rsp_data.text)    return rspclass FateadmApi():    # API接口调用类    # 参数（appID，appKey，pdID，pdKey）    def __init__(self, app_id, app_key, pd_id, pd_key):        self.app_id = app_id        if app_id is None:            self.app_id = \"\"        self.app_key = app_key        self.pd_id = pd_id        self.pd_key = pd_key        self.host = FATEA_PRED_URL    def SetHost(self, url):        self.host = url    #    # 查询余额    # 参数：无    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.cust_val：用户余额    #   rsp.err_msg：异常时返回异常详情    #    def QueryBalc(self):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign        }        url = self.host + \"/api/custval\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"query succ ret: {} cust_val: {} rsp: {} pred: {}\".format(rsp.ret_code, rsp.cust_val, rsp.err_msg,                                                                          rsp.pred_rsp.value))        else:            LOG(\"query failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    #    # 查询网络延迟    # 参数：pred_type:识别类型    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg： 异常时返回异常详情    #    def QueryTTS(self, pred_type):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            \"predict_type\": pred_type,        }        if self.app_id != \"\":            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[\"appid\"] = self.app_id            param[\"asign\"] = asign        url = self.host + \"/api/qcrtt\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"query rtt succ ret: {} request_id: {} err: {}\".format(rsp.ret_code, rsp.request_id, rsp.err_msg))        else:            LOG(\"predict failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    #    # 识别验证码    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def Predict(self, pred_type, img_data, head_info=\"\"):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            \"predict_type\": pred_type,            \"up_type\": \"mt\"        }        if head_info is not None or head_info != \"\":            param[\"head_info\"] = head_info        if self.app_id != \"\":            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[\"appid\"] = self.app_id            param[\"asign\"] = asign        url = self.host + \"/api/capreg\"        files = img_data        rsp = HttpRequest(url, param, files)        if rsp.ret_code == 0:            LOG(\"predict succ ret: {} request_id: {} pred: {} err: {}\".format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(\"predict failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg))            if rsp.ret_code == 4003:                # lack of money                LOG(\"cust_val <= 0 lack of money, please charge immediately\")        return rsp    #    # 从文件进行验证码识别    # 参数：pred_type;识别类型  file_name:文件名    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def PredictFromFile(self, pred_type, file_name, head_info=\"\"):        with open(file_name, \"rb\") as f:            data = f.read()        return self.Predict(pred_type, data, head_info=head_info)    #    # 识别失败，进行退款请求    # 参数：request_id：需要退款的订单号    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    #    def Justice(self, request_id):        if request_id == \"\":            #            return        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            \"request_id\": request_id        }        url = self.host + \"/api/capjust\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"justice succ ret: {} request_id: {} pred: {} err: {}\".format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(\"justice failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    #    # 充值接口    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    def Charge(self, cardid, cardkey):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        csign = CalcCardSign(cardid, cardkey, tm, self.pd_key)        param = {            \"user_id\": self.pd_id,            \"timestamp\": tm,            \"sign\": sign,            'cardid': cardid,            'csign': csign        }        url = self.host + \"/api/charge\"        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(\"charge succ ret: {} request_id: {} pred: {} err: {}\".format(rsp.ret_code, rsp.request_id,                                                                             rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(\"charge failed ret: {} err: {}\".format(rsp.ret_code, rsp.err_msg.encode('utf-8')))        return rsp    ##    # 充值，只返回是否成功    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值： 充值成功时返回0    ##    def ExtendCharge(self, cardid, cardkey):        return self.Charge(cardid, cardkey).ret_code    ##    # 调用退款，只返回是否成功    # 参数： request_id：需要退款的订单号    # 返回值： 退款成功时返回0    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    ##    def JusticeExtend(self, request_id):        return self.Justice(request_id).ret_code    ##    # 查询余额，只返回余额    # 参数：无    # 返回值：rsp.cust_val：余额    ##    def QueryBalcExtend(self):        rsp = self.QueryBalc()        return rsp.cust_val    ##    # 从文件识别验证码，只返回识别结果    # 参数：pred_type;识别类型  file_name:文件名    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictFromFileExtend(self, pred_type, file_name, head_info=\"\"):        rsp = self.PredictFromFile(pred_type, file_name, head_info)        return rsp.pred_rsp.value    ##    # 识别接口，只返回识别结果    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictExtend(self, pred_type, img_data, head_info=\"\"):        rsp = self.Predict(pred_type, img_data, head_info)        return rsp.pred_rsp.valuedef TestFunc():    pd_id = \"100000\"  # 用户中心页可以查询到pd信息    pd_key = \"123456\"    app_id = \"100001\"  # 开发者分成用的账号，在开发者中心可以查询到    app_key = \"123456\"    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = \"30400\"    api = FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    file_name = \"img.jpg\"    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    '''    # 如果不是通过文件识别，则调用Predict接口：    # result \t\t\t= api.PredictExtend(pred_type,data)   \t# 直接返回识别结果    rsp             = api.Predict(pred_type,data)\t\t\t\t# 返回详细的识别结果    '''    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = \"123\"    # card_key        = \"123\"    # 充值    # api.Charge(card_id, card_key)    LOG(\"print in testfunc\")if __name__ == \"__main__\":    TestFunc()\n```\n\n\n\n\n\n验证码自动识别（测试）\n\n```python\nimport requestsimport fateadm_apifrom lxml import etreedef TestFunc(file_name):    pd_id = \"129393\"  # 用户中心页可以查询到pd信息    pd_key = \"fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl\"    app_id = \"329393\"  # 开发者分成用的账号，在开发者中心可以查询到    app_key = \"o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v\"    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = \"30400\"    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    '''    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    '''    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = \"123\"    # card_key        = \"123\"    # 充值    # api.Charge(card_id, card_key)if __name__ == '__main__':    headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'    }    url = 'https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx'    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = \"https://so.gushiwen.cn\" + tree.xpath('//*[@id=\"imgCode\"]/@src')[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open('./code.jpg', 'wb') as fp:        fp.write(img_data)    TestFunc('code.jpg')\n```\n\n\n\n### 第五天(异步爬虫)\n\n\n\n梨视频爬取（未完成）\n\n```python\nimport requestsfrom lxml import etreeheaders = {    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'}url = 'https://www.pearvideo.com/category_5'page_text = requests.get(url=url, headers=headers).texttree = etree.HTML(page_text)li_list = etree.xpath('//ul[@id=\"listvideoListUl\"]/li')for li in li_list:    detail_url = 'https://www.pearvideo.com/' + li.xpath('./div/a/@href')[0]    name = li.xpath('./div/a/div[2]/text()')[0]    print(detail_url, name)\n```\n\n\n\n\n\n协程初步\n\n```python\ndef consume():    while True:        # consumer协程等待接收数据        number = yield        print('开始消费', number)consumer = consume()# 让初始化状态的consumer协程先执行起来，在yield处停止next(consumer)for num in range(0, 100):    print('开始生产', num)    # 发送数据给consumer处理    consumer.send(num)\n```\n\n\n\n协程：\n\n```python\nimport asyncioimport timeasync def request(url):    print('正在下载', url)    # 在异步协程中如果出现了同步模块相关的代码，那么就无法实现异步    # time.sleep(2)    # 当在asyncio中遇到阻塞操作时必须进行手动挂起    await asyncio.sleep(2)    print('下载完毕', url)start = time.time()urls = {    'www.baidu.com',    'www.sogou.com',    'www.goubanjia.com'}# 任务列表: 存放多个任务对象stacks = []for url in urls:    c = request(url)    task = asyncio.ensure_future(c)    stacks.append(task)loop = asyncio.get_event_loop()# 需要将任务列表封装到wait中loop.run_until_complete(asyncio.wait(stacks))print(time.time()-start)\n```\n\n\n\n\n\n\n\n```python\nimport requestsimport asyncioimport timeimport aiohttpstart = time.time()urls = [    '...', '...']async def get_page(url):    async with aiohttp.ClientSession() as session:        async with await session.get(url) as response:            # text()返回字符串形式的响应数据            # read()返回的二进制形式的响应数据            # json()返回的就是json对象            # 注意：获取响应数据操作之前一定要使用await进行手动挂起            page_text = await response.text()            print(page_text)tasks = []for url in urls:    c = get_page(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks))end = time.time()\n```\n\n\n\n\n\n### 第六天\n\n```python\nfrom selenium import webdriverfrom lxml import etreefrom time import sleep# 实例化一个浏览器对象（传入浏览器的驱动成）bro = webdriver.Chrome(executable_path='./chromedriver')# 让浏览器发起一个指定url对应请求bro.get('http://scxk.nmpa.gov.cn:81/xk/')# 获取浏览器当前页面的页面源码数据page_text = bro.page_source# 解析企业名称tree = etree.HTML(page_text)li_list = tree.xpath('//ul[@id=\"gzlist\"]/li')for li in li_list:    name = li.xpath('./dl/@title')[0]    print(name)sleep(5)bro.quit()\n```\n\n\n\n```python\nfrom selenium import webdriverfrom time import sleepbro = webdriver.Chrome(executable_path='./chromedriver.exe')# 指定标签search_input = bro.find_element_by_id('q')# 标签交互search_input.send_keys('Iphone')# 执行一组js程序bro.execute_script('window.scrollTo(0,document.body.scrollHeight)')# 点击搜索按钮btn = bro.find_element_by_css_selector('.btn-search')btn.click()bro.get('https://www.baidu.com')sleep(2)# 回退bro.back()sleep(2)# 前进bro.foward()sleep(5)bro.quit()\n```\n\n\n\n### 第七天（scrapy）\n\n终端操作\n\n```\nscrapy genspider spiderName www.xxx.comscrapy crawl spiderNamescrapy crawl spiderName -o filePath\n```\n\n\n\n","slug":"爬虫入门笔记","published":1,"updated":"2021-05-09T09:04:56.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckogykg3g000ck27057uobubl","content":"<h3 id=\"爬虫初期（第一天）\"><a href=\"#爬虫初期（第一天）\" class=\"headerlink\" title=\"爬虫初期（第一天）\"></a>爬虫初期（第一天）</h3><p>第一次爬虫：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://www.sogou.com/&quot;</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./sogou.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第二次爬虫;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class=\"line\">    kw = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;enter a word:&#x27;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = requests.get(url=url, params=param)</span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    fileName = kw + <span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fileName, <span class=\"string\">&#x27;保存成功&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>UA:请求载体的身份标识 （UA伪装）</p>\n<p>(百度翻译)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 进行UA伪装</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># post请求参数的处理(与get请求一致)</span></span><br><span class=\"line\">    word = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;enter a word:&#x27;</span>)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 请求发送</span></span><br><span class=\"line\">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class=\"line\">    <span class=\"comment\"># 获取响应数据，json()方法返回的是obj(如果确认响应数据时json类型的，才可以使用json())</span></span><br><span class=\"line\">    dic_obj = response.json()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(dic_obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    fileName = word + <span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;over!!!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>(豆瓣电影)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://movie.douban.com/j/search_subjects&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;movie&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;tag&#x27;</span>: <span class=\"string\">&#x27;热门&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;sort&#x27;</span>: <span class=\"string\">&#x27;recommend&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page_limit&#x27;</span>: <span class=\"string\">&#x27;20&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page_start&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(list_data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>（KFC）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;cname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pid&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;keyword&#x27;</span>: <span class=\"string\">&#x27;南京&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageIndex&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./kfc.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(list_data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>药监总局</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27; true&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\"></span><br><span class=\"line\">    id_list = []  <span class=\"comment\"># 储存企业的ID</span></span><br><span class=\"line\">    all_data_list = []  <span class=\"comment\"># 存储所有的企业详情数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:</span><br><span class=\"line\">        id_list.append(dic[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(id_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        detail_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(detail_json)</span><br><span class=\"line\">        all_data_list.append(detail_json)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./allDate.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>多页查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id_list = []  <span class=\"comment\"># 储存企业的ID</span></span><br><span class=\"line\">    all_data_list = []  <span class=\"comment\"># 存储所有的企业详情数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27; true&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;page&#x27;</span>: page ,</span><br><span class=\"line\">            <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:</span><br><span class=\"line\">            id_list.append(dic[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(id_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        detail_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(detail_json)</span><br><span class=\"line\">        all_data_list.append(detail_json)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./allDate.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第二天\"><a href=\"#第二天\" class=\"headerlink\" title=\"第二天\"></a>第二天</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://pic.qiushibaike.com/system/pictures/12424/124241423/medium/B5KYZ8MOZWQOCMUC.jpg&#x27;</span></span><br><span class=\"line\">    img_data = requests.get(url=url).content</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./qiutu.jpg&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(img_data)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>爬取图片（re）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport reimport osif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    <span class=\"comment\"># 创建一个文件夹，保存所有图片    if not os.path.exists(&#x27;./qiutuLibs&#x27;):        os.mkdir(&#x27;./qiutuLibs&#x27;)    url = &#x27;https://www.qiushibaike.com/imgrank/&#x27;    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    page_text = requests.get(url=url, headers=headers).text    ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&gt;&#x27;    img_src_list = re.findall(ex, page_text, re.S)    for src in img_src_list:        src = &#x27;https:&#x27; + src        img_data = requests.get(url=src, headers=headers).content        img_name = src.split(&#x27;/&#x27;)[-1]        imgPath = &#x27;./qiutuLibs/&#x27; + img_name        with open(imgPath, &#x27;wb&#x27;) as fp:            fp.write(img_data)            print(img_name, &#x27;下载成功!!!&#x27;)           </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>分页查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport reimport osif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    <span class=\"comment\"># 创建一个文件夹，保存所有图片    if not os.path.exists(&#x27;./qiutuLibs&#x27;):        os.mkdir(&#x27;./qiutuLibs&#x27;)    url = &#x27;https://www.qiushibaike.com/imgrank/page/%d/&#x27;    pageNum = 1    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    for pageNum in range(1, 36):        new_url = format(url % pageNum)        page_text = requests.get(url=url, headers=headers).text        ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&gt;&#x27;        img_src_list = re.findall(ex, page_text, re.S)            for src in img_src_list:            src = &#x27;https:&#x27; + src            img_data = requests.get(url=src, headers=headers).content            img_name = src.split(&#x27;/&#x27;)[-1]            imgPath = &#x27;./qiutuLibs/&#x27; + img_name            with open(imgPath, &#x27;wb&#x27;) as fp:                fp.write(img_data)                print(img_name, &#x27;下载成功!!!&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>（出错？？？？？）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsfrom bs4 <span class=\"keyword\">import</span> BeautifulSoupif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    headers = &#123;        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Edg/89.0.774.77&#x27;</span>    &#125;    url = <span class=\"string\">&#x27;https://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span>    page_text = requests.get(url=url, headers=headers).text    soup = BeautifulSoup(page_text, <span class=\"string\">&#x27;lxml&#x27;</span>)    li_list = soup.select(<span class=\"string\">&#x27;.book-mulu &gt; ul &gt; li&#x27;</span>)    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./sanguo.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:        title = li.a.string        detail_url = <span class=\"string\">&#x27;http://www/shicimingju.com&#x27;</span> + li.a[<span class=\"string\">&#x27;href&#x27;</span>]        <span class=\"comment\"># 对详情页发起请求,解析出章节内容        detail_page_text = requests.get(url=detail_url, headers=headers).text        detail_soup = BeautifulSoup(detail_page_text)        div_tag = detail_soup.find(&#x27;div&#x27;, class_=&#x27;chapter_content&#x27;)        # 解析到了章节的内容        # print(div_tag)        content = div_tag.text        fp.write(title + &#x27;:&#x27; + content + &#x27;\\n&#x27;)        print(title, &quot;爬取成功！！！&quot;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>xpath爬取全国城市名称</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsfrom lxml <span class=\"keyword\">import</span> etreeif __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:    headers = &#123;        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span>    &#125;    url = <span class=\"string\">&#x27;https://www.aqistudy.cn/historydata/&#x27;</span>    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    hot_li_list = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;bottom&quot;]/ul/li&#x27;</span>)    all_city_names = []    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> hot_li_list:        hot_city_name = li.xpath(<span class=\"string\">&#x27;./a/text()&#x27;</span>)[<span class=\"number\">0</span>]        all_city_names.append(hot_city_name)    <span class=\"built_in\">print</span>(all_city_names)    city_names_list = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;bottom&quot;]/ul/div[2]/li&#x27;</span>)    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> city_names_list:        city_name = li.xpath(<span class=\"string\">&#x27;./a/text()&#x27;</span>)[<span class=\"number\">0</span>]        all_city_names.append(city_name)    <span class=\"built_in\">print</span>(all_city_names)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"第三天\"><a href=\"#第三天\" class=\"headerlink\" title=\"第三天\"></a>第三天</h3><p>验证码识别</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport fateadm_apifrom lxml <span class=\"keyword\">import</span> etreedef TestFunc(file_name):    pd_id = <span class=\"string\">&quot;129393&quot;</span>  <span class=\"comment\"># 用户中心页可以查询到pd信息    pd_key = &quot;fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl&quot;    app_id = &quot;329393&quot;  # 开发者分成用的账号，在开发者中心可以查询到    app_key = &quot;o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v&quot;    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = &quot;30400&quot;    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    &#x27;&#x27;&#x27;    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    &#x27;&#x27;&#x27;    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = &quot;123&quot;    # card_key        = &quot;123&quot;    # 充值    # api.Charge(card_id, card_key)if __name__ == &#x27;__main__&#x27;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    url = &#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = &quot;https://so.gushiwen.cn&quot; + tree.xpath(&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;)[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open(&#x27;./code.jpg&#x27;, &#x27;wb&#x27;) as fp:        fp.write(img_data)    TestFunc(&#x27;code.jpg&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"第四天\"><a href=\"#第四天\" class=\"headerlink\" title=\"第四天\"></a>第四天</h3><p>验证码自动识别</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8import os, sysimport hashlibimport timeimport jsonimport requestsFATEA_PRED_URL = &quot;http://pred.fateadm.com&quot;def LOG(log):    # 不需要测试时，注释掉日志就可以了    print(log)    log = Noneclass TmpObj():    def __init__(self):        self.value = Noneclass Rsp():    def __init__(self):        self.ret_code = -1        self.cust_val = 0.0        self.err_msg = &quot;succ&quot;        self.pred_rsp = TmpObj()    def ParseJsonRsp(self, rsp_data):        if rsp_data is None:            self.err_msg = &quot;http request failed, get rsp Nil data&quot;            return        jrsp = json.loads(rsp_data)        self.ret_code = int(jrsp[&quot;RetCode&quot;])        self.err_msg = jrsp[&quot;ErrMsg&quot;]        self.request_id = jrsp[&quot;RequestId&quot;]        if self.ret_code == 0:            rslt_data = jrsp[&quot;RspData&quot;]            if rslt_data is not None and rslt_data != &quot;&quot;:                jrsp_ext = json.loads(rslt_data)                if &quot;cust_val&quot; in jrsp_ext:                    data = jrsp_ext[&quot;cust_val&quot;]                    self.cust_val = float(data)                if &quot;result&quot; in jrsp_ext:                    data = jrsp_ext[&quot;result&quot;]                    self.pred_rsp.value = datadef CalcSign(pd_id, passwd, timestamp):    md5 = hashlib.md5()    md5.update((timestamp + passwd).encode())    csign = md5.hexdigest()    md5 = hashlib.md5()    md5.update((pd_id + timestamp + csign).encode())    csign = md5.hexdigest()    return csigndef CalcCardSign(cardid, cardkey, timestamp, passwd):    md5 = hashlib.md5()    md5.update(passwd + timestamp + cardid + cardkey)    return md5.hexdigest()def HttpRequest(url, body_data, img_data=&quot;&quot;):    rsp = Rsp()    post_data = body_data    files = &#123;        &#x27;img_data&#x27;: (&#x27;img_data&#x27;, img_data)    &#125;    header = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0&#x27;,    &#125;    rsp_data = requests.post(url, post_data, files=files, headers=header)    rsp.ParseJsonRsp(rsp_data.text)    return rspclass FateadmApi():    # API接口调用类    # 参数（appID，appKey，pdID，pdKey）    def __init__(self, app_id, app_key, pd_id, pd_key):        self.app_id = app_id        if app_id is None:            self.app_id = &quot;&quot;        self.app_key = app_key        self.pd_id = pd_id        self.pd_key = pd_key        self.host = FATEA_PRED_URL    def SetHost(self, url):        self.host = url    #    # 查询余额    # 参数：无    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.cust_val：用户余额    #   rsp.err_msg：异常时返回异常详情    #    def QueryBalc(self):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign        &#125;        url = self.host + &quot;/api/custval&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;query succ ret: &#123;&#125; cust_val: &#123;&#125; rsp: &#123;&#125; pred: &#123;&#125;&quot;.format(rsp.ret_code, rsp.cust_val, rsp.err_msg,                                                                          rsp.pred_rsp.value))        else:            LOG(&quot;query failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    #    # 查询网络延迟    # 参数：pred_type:识别类型    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg： 异常时返回异常详情    #    def QueryTTS(self, pred_type):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &quot;predict_type&quot;: pred_type,        &#125;        if self.app_id != &quot;&quot;:            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[&quot;appid&quot;] = self.app_id            param[&quot;asign&quot;] = asign        url = self.host + &quot;/api/qcrtt&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;query rtt succ ret: &#123;&#125; request_id: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id, rsp.err_msg))        else:            LOG(&quot;predict failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    #    # 识别验证码    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def Predict(self, pred_type, img_data, head_info=&quot;&quot;):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &quot;predict_type&quot;: pred_type,            &quot;up_type&quot;: &quot;mt&quot;        &#125;        if head_info is not None or head_info != &quot;&quot;:            param[&quot;head_info&quot;] = head_info        if self.app_id != &quot;&quot;:            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[&quot;appid&quot;] = self.app_id            param[&quot;asign&quot;] = asign        url = self.host + &quot;/api/capreg&quot;        files = img_data        rsp = HttpRequest(url, param, files)        if rsp.ret_code == 0:            LOG(&quot;predict succ ret: &#123;&#125; request_id: &#123;&#125; pred: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(&quot;predict failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg))            if rsp.ret_code == 4003:                # lack of money                LOG(&quot;cust_val &lt;= 0 lack of money, please charge immediately&quot;)        return rsp    #    # 从文件进行验证码识别    # 参数：pred_type;识别类型  file_name:文件名    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def PredictFromFile(self, pred_type, file_name, head_info=&quot;&quot;):        with open(file_name, &quot;rb&quot;) as f:            data = f.read()        return self.Predict(pred_type, data, head_info=head_info)    #    # 识别失败，进行退款请求    # 参数：request_id：需要退款的订单号    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    #    def Justice(self, request_id):        if request_id == &quot;&quot;:            #            return        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &quot;request_id&quot;: request_id        &#125;        url = self.host + &quot;/api/capjust&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;justice succ ret: &#123;&#125; request_id: &#123;&#125; pred: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(&quot;justice failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    #    # 充值接口    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    def Charge(self, cardid, cardkey):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        csign = CalcCardSign(cardid, cardkey, tm, self.pd_key)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &#x27;cardid&#x27;: cardid,            &#x27;csign&#x27;: csign        &#125;        url = self.host + &quot;/api/charge&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;charge succ ret: &#123;&#125; request_id: &#123;&#125; pred: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id,                                                                             rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(&quot;charge failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    ##    # 充值，只返回是否成功    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值： 充值成功时返回0    ##    def ExtendCharge(self, cardid, cardkey):        return self.Charge(cardid, cardkey).ret_code    ##    # 调用退款，只返回是否成功    # 参数： request_id：需要退款的订单号    # 返回值： 退款成功时返回0    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    ##    def JusticeExtend(self, request_id):        return self.Justice(request_id).ret_code    ##    # 查询余额，只返回余额    # 参数：无    # 返回值：rsp.cust_val：余额    ##    def QueryBalcExtend(self):        rsp = self.QueryBalc()        return rsp.cust_val    ##    # 从文件识别验证码，只返回识别结果    # 参数：pred_type;识别类型  file_name:文件名    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictFromFileExtend(self, pred_type, file_name, head_info=&quot;&quot;):        rsp = self.PredictFromFile(pred_type, file_name, head_info)        return rsp.pred_rsp.value    ##    # 识别接口，只返回识别结果    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictExtend(self, pred_type, img_data, head_info=&quot;&quot;):        rsp = self.Predict(pred_type, img_data, head_info)        return rsp.pred_rsp.valuedef TestFunc():    pd_id = &quot;100000&quot;  # 用户中心页可以查询到pd信息    pd_key = &quot;123456&quot;    app_id = &quot;100001&quot;  # 开发者分成用的账号，在开发者中心可以查询到    app_key = &quot;123456&quot;    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = &quot;30400&quot;    api = FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    file_name = &quot;img.jpg&quot;    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    &#x27;&#x27;&#x27;    # 如果不是通过文件识别，则调用Predict接口：    # result \t\t\t= api.PredictExtend(pred_type,data)   \t# 直接返回识别结果    rsp             = api.Predict(pred_type,data)\t\t\t\t# 返回详细的识别结果    &#x27;&#x27;&#x27;    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = &quot;123&quot;    # card_key        = &quot;123&quot;    # 充值    # api.Charge(card_id, card_key)    LOG(&quot;print in testfunc&quot;)if __name__ == &quot;__main__&quot;:    TestFunc()</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>验证码自动识别（测试）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport fateadm_apifrom lxml <span class=\"keyword\">import</span> etreedef TestFunc(file_name):    pd_id = <span class=\"string\">&quot;129393&quot;</span>  <span class=\"comment\"># 用户中心页可以查询到pd信息    pd_key = &quot;fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl&quot;    app_id = &quot;329393&quot;  # 开发者分成用的账号，在开发者中心可以查询到    app_key = &quot;o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v&quot;    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = &quot;30400&quot;    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    &#x27;&#x27;&#x27;    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    &#x27;&#x27;&#x27;    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = &quot;123&quot;    # card_key        = &quot;123&quot;    # 充值    # api.Charge(card_id, card_key)if __name__ == &#x27;__main__&#x27;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    url = &#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = &quot;https://so.gushiwen.cn&quot; + tree.xpath(&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;)[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open(&#x27;./code.jpg&#x27;, &#x27;wb&#x27;) as fp:        fp.write(img_data)    TestFunc(&#x27;code.jpg&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第五天-异步爬虫\"><a href=\"#第五天-异步爬虫\" class=\"headerlink\" title=\"第五天(异步爬虫)\"></a>第五天(异步爬虫)</h3><p>梨视频爬取（未完成）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsfrom lxml <span class=\"keyword\">import</span> etreeheaders = &#123;    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span>&#125;url = <span class=\"string\">&#x27;https://www.pearvideo.com/category_5&#x27;</span>page_text = requests.get(url=url, headers=headers).texttree = etree.HTML(page_text)li_list = etree.xpath(<span class=\"string\">&#x27;//ul[@id=&quot;listvideoListUl&quot;]/li&#x27;</span>)<span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:    detail_url = <span class=\"string\">&#x27;https://www.pearvideo.com/&#x27;</span> + li.xpath(<span class=\"string\">&#x27;./div/a/@href&#x27;</span>)[<span class=\"number\">0</span>]    name = li.xpath(<span class=\"string\">&#x27;./div/a/div[2]/text()&#x27;</span>)[<span class=\"number\">0</span>]    <span class=\"built_in\">print</span>(detail_url, name)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>协程初步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consume</span>():</span>    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:        <span class=\"comment\"># consumer协程等待接收数据        number = yield        print(&#x27;开始消费&#x27;, number)consumer = consume()# 让初始化状态的consumer协程先执行起来，在yield处停止next(consumer)for num in range(0, 100):    print(&#x27;开始生产&#x27;, num)    # 发送数据给consumer处理    consumer.send(num)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>协程：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncioimport timeasync <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>):</span>    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;正在下载&#x27;</span>, url)    <span class=\"comment\"># 在异步协程中如果出现了同步模块相关的代码，那么就无法实现异步    # time.sleep(2)    # 当在asyncio中遇到阻塞操作时必须进行手动挂起    await asyncio.sleep(2)    print(&#x27;下载完毕&#x27;, url)start = time.time()urls = &#123;    &#x27;www.baidu.com&#x27;,    &#x27;www.sogou.com&#x27;,    &#x27;www.goubanjia.com&#x27;&#125;# 任务列表: 存放多个任务对象stacks = []for url in urls:    c = request(url)    task = asyncio.ensure_future(c)    stacks.append(task)loop = asyncio.get_event_loop()# 需要将任务列表封装到wait中loop.run_until_complete(asyncio.wait(stacks))print(time.time()-start)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport asyncioimport timeimport aiohttpstart = time.time()urls = [    <span class=\"string\">&#x27;...&#x27;</span>, <span class=\"string\">&#x27;...&#x27;</span>]<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span>(<span class=\"params\">url</span>):</span>    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> <span class=\"keyword\">await</span> session.get(url) <span class=\"keyword\">as</span> response:            <span class=\"comment\"># text()返回字符串形式的响应数据            # read()返回的二进制形式的响应数据            # json()返回的就是json对象            # 注意：获取响应数据操作之前一定要使用await进行手动挂起            page_text = await response.text()            print(page_text)tasks = []for url in urls:    c = get_page(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks))end = time.time()</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"第六天\"><a href=\"#第六天\" class=\"headerlink\" title=\"第六天\"></a>第六天</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriverfrom lxml <span class=\"keyword\">import</span> etreefrom time <span class=\"keyword\">import</span> sleep<span class=\"comment\"># 实例化一个浏览器对象（传入浏览器的驱动成）bro = webdriver.Chrome(executable_path=&#x27;./chromedriver&#x27;)# 让浏览器发起一个指定url对应请求bro.get(&#x27;http://scxk.nmpa.gov.cn:81/xk/&#x27;)# 获取浏览器当前页面的页面源码数据page_text = bro.page_source# 解析企业名称tree = etree.HTML(page_text)li_list = tree.xpath(&#x27;//ul[@id=&quot;gzlist&quot;]/li&#x27;)for li in li_list:    name = li.xpath(&#x27;./dl/@title&#x27;)[0]    print(name)sleep(5)bro.quit()</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriverfrom time <span class=\"keyword\">import</span> sleepbro = webdriver.Chrome(executable_path=<span class=\"string\">&#x27;./chromedriver.exe&#x27;</span>)<span class=\"comment\"># 指定标签search_input = bro.find_element_by_id(&#x27;q&#x27;)# 标签交互search_input.send_keys(&#x27;Iphone&#x27;)# 执行一组js程序bro.execute_script(&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;)# 点击搜索按钮btn = bro.find_element_by_css_selector(&#x27;.btn-search&#x27;)btn.click()bro.get(&#x27;https://www.baidu.com&#x27;)sleep(2)# 回退bro.back()sleep(2)# 前进bro.foward()sleep(5)bro.quit()</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第七天（scrapy）\"><a href=\"#第七天（scrapy）\" class=\"headerlink\" title=\"第七天（scrapy）\"></a>第七天（scrapy）</h3><p>终端操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy genspider spiderName www.xxx.comscrapy crawl spiderNamescrapy crawl spiderName -o filePath</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"爬虫初期（第一天）\"><a href=\"#爬虫初期（第一天）\" class=\"headerlink\" title=\"爬虫初期（第一天）\"></a>爬虫初期（第一天）</h3><p>第一次爬虫：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://www.sogou.com/&quot;</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./sogou.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第二次爬虫;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class=\"line\">    kw = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;enter a word:&#x27;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = requests.get(url=url, params=param)</span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    fileName = kw + <span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fileName, <span class=\"string\">&#x27;保存成功&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>UA:请求载体的身份标识 （UA伪装）</p>\n<p>(百度翻译)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 进行UA伪装</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># post请求参数的处理(与get请求一致)</span></span><br><span class=\"line\">    word = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;enter a word:&#x27;</span>)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 请求发送</span></span><br><span class=\"line\">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class=\"line\">    <span class=\"comment\"># 获取响应数据，json()方法返回的是obj(如果确认响应数据时json类型的，才可以使用json())</span></span><br><span class=\"line\">    dic_obj = response.json()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(dic_obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    fileName = word + <span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;over!!!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>(豆瓣电影)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://movie.douban.com/j/search_subjects&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;movie&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;tag&#x27;</span>: <span class=\"string\">&#x27;热门&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;sort&#x27;</span>: <span class=\"string\">&#x27;recommend&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page_limit&#x27;</span>: <span class=\"string\">&#x27;20&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page_start&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(list_data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>（KFC）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;cname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pid&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;keyword&#x27;</span>: <span class=\"string\">&#x27;南京&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageIndex&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./kfc.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(list_data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>药监总局</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27; true&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\"></span><br><span class=\"line\">    id_list = []  <span class=\"comment\"># 储存企业的ID</span></span><br><span class=\"line\">    all_data_list = []  <span class=\"comment\"># 存储所有的企业详情数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:</span><br><span class=\"line\">        id_list.append(dic[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(id_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        detail_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(detail_json)</span><br><span class=\"line\">        all_data_list.append(detail_json)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./allDate.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>多页查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id_list = []  <span class=\"comment\"># 储存企业的ID</span></span><br><span class=\"line\">    all_data_list = []  <span class=\"comment\"># 存储所有的企业详情数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27; true&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;page&#x27;</span>: page ,</span><br><span class=\"line\">            <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:</span><br><span class=\"line\">            id_list.append(dic[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(id_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        detail_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(detail_json)</span><br><span class=\"line\">        all_data_list.append(detail_json)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./allDate.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第二天\"><a href=\"#第二天\" class=\"headerlink\" title=\"第二天\"></a>第二天</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://pic.qiushibaike.com/system/pictures/12424/124241423/medium/B5KYZ8MOZWQOCMUC.jpg&#x27;</span></span><br><span class=\"line\">    img_data = requests.get(url=url).content</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./qiutu.jpg&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(img_data)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>爬取图片（re）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport reimport osif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    <span class=\"comment\"># 创建一个文件夹，保存所有图片    if not os.path.exists(&#x27;./qiutuLibs&#x27;):        os.mkdir(&#x27;./qiutuLibs&#x27;)    url = &#x27;https://www.qiushibaike.com/imgrank/&#x27;    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    page_text = requests.get(url=url, headers=headers).text    ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&gt;&#x27;    img_src_list = re.findall(ex, page_text, re.S)    for src in img_src_list:        src = &#x27;https:&#x27; + src        img_data = requests.get(url=src, headers=headers).content        img_name = src.split(&#x27;/&#x27;)[-1]        imgPath = &#x27;./qiutuLibs/&#x27; + img_name        with open(imgPath, &#x27;wb&#x27;) as fp:            fp.write(img_data)            print(img_name, &#x27;下载成功!!!&#x27;)           </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>分页查询</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport reimport osif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    <span class=\"comment\"># 创建一个文件夹，保存所有图片    if not os.path.exists(&#x27;./qiutuLibs&#x27;):        os.mkdir(&#x27;./qiutuLibs&#x27;)    url = &#x27;https://www.qiushibaike.com/imgrank/page/%d/&#x27;    pageNum = 1    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    for pageNum in range(1, 36):        new_url = format(url % pageNum)        page_text = requests.get(url=url, headers=headers).text        ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&gt;&#x27;        img_src_list = re.findall(ex, page_text, re.S)            for src in img_src_list:            src = &#x27;https:&#x27; + src            img_data = requests.get(url=src, headers=headers).content            img_name = src.split(&#x27;/&#x27;)[-1]            imgPath = &#x27;./qiutuLibs/&#x27; + img_name            with open(imgPath, &#x27;wb&#x27;) as fp:                fp.write(img_data)                print(img_name, &#x27;下载成功!!!&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>（出错？？？？？）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsfrom bs4 <span class=\"keyword\">import</span> BeautifulSoupif __name__ == <span class=\"string\">&quot;__main__&quot;</span>:    headers = &#123;        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Edg/89.0.774.77&#x27;</span>    &#125;    url = <span class=\"string\">&#x27;https://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span>    page_text = requests.get(url=url, headers=headers).text    soup = BeautifulSoup(page_text, <span class=\"string\">&#x27;lxml&#x27;</span>)    li_list = soup.select(<span class=\"string\">&#x27;.book-mulu &gt; ul &gt; li&#x27;</span>)    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./sanguo.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:        title = li.a.string        detail_url = <span class=\"string\">&#x27;http://www/shicimingju.com&#x27;</span> + li.a[<span class=\"string\">&#x27;href&#x27;</span>]        <span class=\"comment\"># 对详情页发起请求,解析出章节内容        detail_page_text = requests.get(url=detail_url, headers=headers).text        detail_soup = BeautifulSoup(detail_page_text)        div_tag = detail_soup.find(&#x27;div&#x27;, class_=&#x27;chapter_content&#x27;)        # 解析到了章节的内容        # print(div_tag)        content = div_tag.text        fp.write(title + &#x27;:&#x27; + content + &#x27;\\n&#x27;)        print(title, &quot;爬取成功！！！&quot;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>xpath爬取全国城市名称</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsfrom lxml <span class=\"keyword\">import</span> etreeif __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:    headers = &#123;        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span>    &#125;    url = <span class=\"string\">&#x27;https://www.aqistudy.cn/historydata/&#x27;</span>    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    hot_li_list = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;bottom&quot;]/ul/li&#x27;</span>)    all_city_names = []    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> hot_li_list:        hot_city_name = li.xpath(<span class=\"string\">&#x27;./a/text()&#x27;</span>)[<span class=\"number\">0</span>]        all_city_names.append(hot_city_name)    <span class=\"built_in\">print</span>(all_city_names)    city_names_list = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;bottom&quot;]/ul/div[2]/li&#x27;</span>)    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> city_names_list:        city_name = li.xpath(<span class=\"string\">&#x27;./a/text()&#x27;</span>)[<span class=\"number\">0</span>]        all_city_names.append(city_name)    <span class=\"built_in\">print</span>(all_city_names)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"第三天\"><a href=\"#第三天\" class=\"headerlink\" title=\"第三天\"></a>第三天</h3><p>验证码识别</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport fateadm_apifrom lxml <span class=\"keyword\">import</span> etreedef TestFunc(file_name):    pd_id = <span class=\"string\">&quot;129393&quot;</span>  <span class=\"comment\"># 用户中心页可以查询到pd信息    pd_key = &quot;fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl&quot;    app_id = &quot;329393&quot;  # 开发者分成用的账号，在开发者中心可以查询到    app_key = &quot;o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v&quot;    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = &quot;30400&quot;    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    &#x27;&#x27;&#x27;    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    &#x27;&#x27;&#x27;    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = &quot;123&quot;    # card_key        = &quot;123&quot;    # 充值    # api.Charge(card_id, card_key)if __name__ == &#x27;__main__&#x27;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    url = &#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = &quot;https://so.gushiwen.cn&quot; + tree.xpath(&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;)[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open(&#x27;./code.jpg&#x27;, &#x27;wb&#x27;) as fp:        fp.write(img_data)    TestFunc(&#x27;code.jpg&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"第四天\"><a href=\"#第四天\" class=\"headerlink\" title=\"第四天\"></a>第四天</h3><p>验证码自动识别</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8import os, sysimport hashlibimport timeimport jsonimport requestsFATEA_PRED_URL = &quot;http://pred.fateadm.com&quot;def LOG(log):    # 不需要测试时，注释掉日志就可以了    print(log)    log = Noneclass TmpObj():    def __init__(self):        self.value = Noneclass Rsp():    def __init__(self):        self.ret_code = -1        self.cust_val = 0.0        self.err_msg = &quot;succ&quot;        self.pred_rsp = TmpObj()    def ParseJsonRsp(self, rsp_data):        if rsp_data is None:            self.err_msg = &quot;http request failed, get rsp Nil data&quot;            return        jrsp = json.loads(rsp_data)        self.ret_code = int(jrsp[&quot;RetCode&quot;])        self.err_msg = jrsp[&quot;ErrMsg&quot;]        self.request_id = jrsp[&quot;RequestId&quot;]        if self.ret_code == 0:            rslt_data = jrsp[&quot;RspData&quot;]            if rslt_data is not None and rslt_data != &quot;&quot;:                jrsp_ext = json.loads(rslt_data)                if &quot;cust_val&quot; in jrsp_ext:                    data = jrsp_ext[&quot;cust_val&quot;]                    self.cust_val = float(data)                if &quot;result&quot; in jrsp_ext:                    data = jrsp_ext[&quot;result&quot;]                    self.pred_rsp.value = datadef CalcSign(pd_id, passwd, timestamp):    md5 = hashlib.md5()    md5.update((timestamp + passwd).encode())    csign = md5.hexdigest()    md5 = hashlib.md5()    md5.update((pd_id + timestamp + csign).encode())    csign = md5.hexdigest()    return csigndef CalcCardSign(cardid, cardkey, timestamp, passwd):    md5 = hashlib.md5()    md5.update(passwd + timestamp + cardid + cardkey)    return md5.hexdigest()def HttpRequest(url, body_data, img_data=&quot;&quot;):    rsp = Rsp()    post_data = body_data    files = &#123;        &#x27;img_data&#x27;: (&#x27;img_data&#x27;, img_data)    &#125;    header = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0&#x27;,    &#125;    rsp_data = requests.post(url, post_data, files=files, headers=header)    rsp.ParseJsonRsp(rsp_data.text)    return rspclass FateadmApi():    # API接口调用类    # 参数（appID，appKey，pdID，pdKey）    def __init__(self, app_id, app_key, pd_id, pd_key):        self.app_id = app_id        if app_id is None:            self.app_id = &quot;&quot;        self.app_key = app_key        self.pd_id = pd_id        self.pd_key = pd_key        self.host = FATEA_PRED_URL    def SetHost(self, url):        self.host = url    #    # 查询余额    # 参数：无    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.cust_val：用户余额    #   rsp.err_msg：异常时返回异常详情    #    def QueryBalc(self):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign        &#125;        url = self.host + &quot;/api/custval&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;query succ ret: &#123;&#125; cust_val: &#123;&#125; rsp: &#123;&#125; pred: &#123;&#125;&quot;.format(rsp.ret_code, rsp.cust_val, rsp.err_msg,                                                                          rsp.pred_rsp.value))        else:            LOG(&quot;query failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    #    # 查询网络延迟    # 参数：pred_type:识别类型    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg： 异常时返回异常详情    #    def QueryTTS(self, pred_type):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &quot;predict_type&quot;: pred_type,        &#125;        if self.app_id != &quot;&quot;:            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[&quot;appid&quot;] = self.app_id            param[&quot;asign&quot;] = asign        url = self.host + &quot;/api/qcrtt&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;query rtt succ ret: &#123;&#125; request_id: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id, rsp.err_msg))        else:            LOG(&quot;predict failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    #    # 识别验证码    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def Predict(self, pred_type, img_data, head_info=&quot;&quot;):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &quot;predict_type&quot;: pred_type,            &quot;up_type&quot;: &quot;mt&quot;        &#125;        if head_info is not None or head_info != &quot;&quot;:            param[&quot;head_info&quot;] = head_info        if self.app_id != &quot;&quot;:            #            asign = CalcSign(self.app_id, self.app_key, tm)            param[&quot;appid&quot;] = self.app_id            param[&quot;asign&quot;] = asign        url = self.host + &quot;/api/capreg&quot;        files = img_data        rsp = HttpRequest(url, param, files)        if rsp.ret_code == 0:            LOG(&quot;predict succ ret: &#123;&#125; request_id: &#123;&#125; pred: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(&quot;predict failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg))            if rsp.ret_code == 4003:                # lack of money                LOG(&quot;cust_val &lt;= 0 lack of money, please charge immediately&quot;)        return rsp    #    # 从文件进行验证码识别    # 参数：pred_type;识别类型  file_name:文件名    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.request_id：唯一订单号    #   rsp.pred_rsp.value：识别结果    #   rsp.err_msg：异常时返回异常详情    #    def PredictFromFile(self, pred_type, file_name, head_info=&quot;&quot;):        with open(file_name, &quot;rb&quot;) as f:            data = f.read()        return self.Predict(pred_type, data, head_info=head_info)    #    # 识别失败，进行退款请求    # 参数：request_id：需要退款的订单号    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    #    def Justice(self, request_id):        if request_id == &quot;&quot;:            #            return        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &quot;request_id&quot;: request_id        &#125;        url = self.host + &quot;/api/capjust&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;justice succ ret: &#123;&#125; request_id: &#123;&#125; pred: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id,                                                                              rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(&quot;justice failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    #    # 充值接口    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值：    #   rsp.ret_code：正常返回0    #   rsp.err_msg：异常时返回异常详情    #    def Charge(self, cardid, cardkey):        tm = str(int(time.time()))        sign = CalcSign(self.pd_id, self.pd_key, tm)        csign = CalcCardSign(cardid, cardkey, tm, self.pd_key)        param = &#123;            &quot;user_id&quot;: self.pd_id,            &quot;timestamp&quot;: tm,            &quot;sign&quot;: sign,            &#x27;cardid&#x27;: cardid,            &#x27;csign&#x27;: csign        &#125;        url = self.host + &quot;/api/charge&quot;        rsp = HttpRequest(url, param)        if rsp.ret_code == 0:            LOG(&quot;charge succ ret: &#123;&#125; request_id: &#123;&#125; pred: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.request_id,                                                                             rsp.pred_rsp.value, rsp.err_msg))        else:            LOG(&quot;charge failed ret: &#123;&#125; err: &#123;&#125;&quot;.format(rsp.ret_code, rsp.err_msg.encode(&#x27;utf-8&#x27;)))        return rsp    ##    # 充值，只返回是否成功    # 参数：cardid：充值卡号  cardkey：充值卡签名串    # 返回值： 充值成功时返回0    ##    def ExtendCharge(self, cardid, cardkey):        return self.Charge(cardid, cardkey).ret_code    ##    # 调用退款，只返回是否成功    # 参数： request_id：需要退款的订单号    # 返回值： 退款成功时返回0    #    # 注意:    #    Predict识别接口，仅在ret_code == 0时才会进行扣款，才需要进行退款请求，否则无需进行退款操作    # 注意2:    #   退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理    ##    def JusticeExtend(self, request_id):        return self.Justice(request_id).ret_code    ##    # 查询余额，只返回余额    # 参数：无    # 返回值：rsp.cust_val：余额    ##    def QueryBalcExtend(self):        rsp = self.QueryBalc()        return rsp.cust_val    ##    # 从文件识别验证码，只返回识别结果    # 参数：pred_type;识别类型  file_name:文件名    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictFromFileExtend(self, pred_type, file_name, head_info=&quot;&quot;):        rsp = self.PredictFromFile(pred_type, file_name, head_info)        return rsp.pred_rsp.value    ##    # 识别接口，只返回识别结果    # 参数：pred_type:识别类型  img_data:图片的数据    # 返回值： rsp.pred_rsp.value：识别的结果    ##    def PredictExtend(self, pred_type, img_data, head_info=&quot;&quot;):        rsp = self.Predict(pred_type, img_data, head_info)        return rsp.pred_rsp.valuedef TestFunc():    pd_id = &quot;100000&quot;  # 用户中心页可以查询到pd信息    pd_key = &quot;123456&quot;    app_id = &quot;100001&quot;  # 开发者分成用的账号，在开发者中心可以查询到    app_key = &quot;123456&quot;    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = &quot;30400&quot;    api = FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    file_name = &quot;img.jpg&quot;    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    &#x27;&#x27;&#x27;    # 如果不是通过文件识别，则调用Predict接口：    # result \t\t\t= api.PredictExtend(pred_type,data)   \t# 直接返回识别结果    rsp             = api.Predict(pred_type,data)\t\t\t\t# 返回详细的识别结果    &#x27;&#x27;&#x27;    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = &quot;123&quot;    # card_key        = &quot;123&quot;    # 充值    # api.Charge(card_id, card_key)    LOG(&quot;print in testfunc&quot;)if __name__ == &quot;__main__&quot;:    TestFunc()</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>验证码自动识别（测试）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport fateadm_apifrom lxml <span class=\"keyword\">import</span> etreedef TestFunc(file_name):    pd_id = <span class=\"string\">&quot;129393&quot;</span>  <span class=\"comment\"># 用户中心页可以查询到pd信息    pd_key = &quot;fe2DLWIF4f/QJ2uVGb/3cW3w4+3OAfZl&quot;    app_id = &quot;329393&quot;  # 开发者分成用的账号，在开发者中心可以查询到    app_key = &quot;o7JQVbeIN0wyrERcfybl9iJ96vK7KW6v&quot;    # 识别类型，    # 具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服    pred_type = &quot;30400&quot;    api = fateadm_api.FateadmApi(app_id, app_key, pd_id, pd_key)    # 查询余额    balance = api.QueryBalcExtend()  # 直接返余额    # api.QueryBalc()    # 通过文件形式识别：    # 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6    # result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果    rsp = api.PredictFromFile(pred_type, file_name)  # 返回详细识别结果    &#x27;&#x27;&#x27;    # 如果不是通过文件识别，则调用Predict接口：    # result         = api.PredictExtend(pred_type,data)    # 直接返回识别结果    rsp             = api.Predict(pred_type,data)           # 返回详细的识别结果    &#x27;&#x27;&#x27;    just_flag = False    if just_flag:        if rsp.ret_code == 0:            # 识别的结果如果与预期不符，可以调用这个接口将预期不符的订单退款            # 退款仅在正常识别出结果后，无法通过网站验证的情况，请勿非法或者滥用，否则可能进行封号处理            api.Justice(rsp.request_id)    # card_id         = &quot;123&quot;    # card_key        = &quot;123&quot;    # 充值    # api.Charge(card_id, card_key)if __name__ == &#x27;__main__&#x27;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;    &#125;    url = &#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;    page_text = requests.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = &quot;https://so.gushiwen.cn&quot; + tree.xpath(&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;)[0]    img_data = requests.get(url=code_img_src, headers=headers).content    with open(&#x27;./code.jpg&#x27;, &#x27;wb&#x27;) as fp:        fp.write(img_data)    TestFunc(&#x27;code.jpg&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第五天-异步爬虫\"><a href=\"#第五天-异步爬虫\" class=\"headerlink\" title=\"第五天(异步爬虫)\"></a>第五天(异步爬虫)</h3><p>梨视频爬取（未完成）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsfrom lxml <span class=\"keyword\">import</span> etreeheaders = &#123;    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span>&#125;url = <span class=\"string\">&#x27;https://www.pearvideo.com/category_5&#x27;</span>page_text = requests.get(url=url, headers=headers).texttree = etree.HTML(page_text)li_list = etree.xpath(<span class=\"string\">&#x27;//ul[@id=&quot;listvideoListUl&quot;]/li&#x27;</span>)<span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:    detail_url = <span class=\"string\">&#x27;https://www.pearvideo.com/&#x27;</span> + li.xpath(<span class=\"string\">&#x27;./div/a/@href&#x27;</span>)[<span class=\"number\">0</span>]    name = li.xpath(<span class=\"string\">&#x27;./div/a/div[2]/text()&#x27;</span>)[<span class=\"number\">0</span>]    <span class=\"built_in\">print</span>(detail_url, name)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>协程初步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consume</span>():</span>    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:        <span class=\"comment\"># consumer协程等待接收数据        number = yield        print(&#x27;开始消费&#x27;, number)consumer = consume()# 让初始化状态的consumer协程先执行起来，在yield处停止next(consumer)for num in range(0, 100):    print(&#x27;开始生产&#x27;, num)    # 发送数据给consumer处理    consumer.send(num)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>协程：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncioimport timeasync <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>):</span>    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;正在下载&#x27;</span>, url)    <span class=\"comment\"># 在异步协程中如果出现了同步模块相关的代码，那么就无法实现异步    # time.sleep(2)    # 当在asyncio中遇到阻塞操作时必须进行手动挂起    await asyncio.sleep(2)    print(&#x27;下载完毕&#x27;, url)start = time.time()urls = &#123;    &#x27;www.baidu.com&#x27;,    &#x27;www.sogou.com&#x27;,    &#x27;www.goubanjia.com&#x27;&#125;# 任务列表: 存放多个任务对象stacks = []for url in urls:    c = request(url)    task = asyncio.ensure_future(c)    stacks.append(task)loop = asyncio.get_event_loop()# 需要将任务列表封装到wait中loop.run_until_complete(asyncio.wait(stacks))print(time.time()-start)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requestsimport asyncioimport timeimport aiohttpstart = time.time()urls = [    <span class=\"string\">&#x27;...&#x27;</span>, <span class=\"string\">&#x27;...&#x27;</span>]<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span>(<span class=\"params\">url</span>):</span>    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> <span class=\"keyword\">await</span> session.get(url) <span class=\"keyword\">as</span> response:            <span class=\"comment\"># text()返回字符串形式的响应数据            # read()返回的二进制形式的响应数据            # json()返回的就是json对象            # 注意：获取响应数据操作之前一定要使用await进行手动挂起            page_text = await response.text()            print(page_text)tasks = []for url in urls:    c = get_page(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks))end = time.time()</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"第六天\"><a href=\"#第六天\" class=\"headerlink\" title=\"第六天\"></a>第六天</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriverfrom lxml <span class=\"keyword\">import</span> etreefrom time <span class=\"keyword\">import</span> sleep<span class=\"comment\"># 实例化一个浏览器对象（传入浏览器的驱动成）bro = webdriver.Chrome(executable_path=&#x27;./chromedriver&#x27;)# 让浏览器发起一个指定url对应请求bro.get(&#x27;http://scxk.nmpa.gov.cn:81/xk/&#x27;)# 获取浏览器当前页面的页面源码数据page_text = bro.page_source# 解析企业名称tree = etree.HTML(page_text)li_list = tree.xpath(&#x27;//ul[@id=&quot;gzlist&quot;]/li&#x27;)for li in li_list:    name = li.xpath(&#x27;./dl/@title&#x27;)[0]    print(name)sleep(5)bro.quit()</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriverfrom time <span class=\"keyword\">import</span> sleepbro = webdriver.Chrome(executable_path=<span class=\"string\">&#x27;./chromedriver.exe&#x27;</span>)<span class=\"comment\"># 指定标签search_input = bro.find_element_by_id(&#x27;q&#x27;)# 标签交互search_input.send_keys(&#x27;Iphone&#x27;)# 执行一组js程序bro.execute_script(&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;)# 点击搜索按钮btn = bro.find_element_by_css_selector(&#x27;.btn-search&#x27;)btn.click()bro.get(&#x27;https://www.baidu.com&#x27;)sleep(2)# 回退bro.back()sleep(2)# 前进bro.foward()sleep(5)bro.quit()</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第七天（scrapy）\"><a href=\"#第七天（scrapy）\" class=\"headerlink\" title=\"第七天（scrapy）\"></a>第七天（scrapy）</h3><p>终端操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy genspider spiderName www.xxx.comscrapy crawl spiderNamescrapy crawl spiderName -o filePath</span><br></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckogykg3a0005k270ej0sf83f","category_id":"ckogykg390003k2702trvgojg","_id":"ckogykg3b0007k270g6pjfv5u"},{"post_id":"ckogykg380001k2708256a9ji","category_id":"ckogykg390003k2702trvgojg","_id":"ckogykg3b0009k270b4cifj34"},{"post_id":"ckogykg390002k2709hc19dfo","category_id":"ckogykg3b0006k270ecly72ar","_id":"ckogykg3b000ak2708fwwev9v"},{"post_id":"ckogykg3a0004k270blhyc0y2","category_id":"ckogykg3b0008k27013lgftar","_id":"ckogykg3b000bk27007ehe6ft"},{"post_id":"ckogykg3g000ck27057uobubl","category_id":"ckogykg3h000dk270d6zl6r3m","_id":"ckogykg3h000ek2705b9d3m7v"}],"PostTag":[],"Tag":[]}}